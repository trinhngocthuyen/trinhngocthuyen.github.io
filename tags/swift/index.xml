<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>swift on Thuyen&#39;s corner</title>
    <link>https://trinhngocthuyen.github.io/tags/swift/</link>
    <description>Recent content in swift on Thuyen&#39;s corner</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 01 Jun 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://trinhngocthuyen.github.io/tags/swift/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Swift: The downsides of lazy var (part 2)</title>
      <link>https://trinhngocthuyen.github.io/posts/tech/swift-the-downsides-of-lazy-var-part-2/</link>
      <pubDate>Fri, 01 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://trinhngocthuyen.github.io/posts/tech/swift-the-downsides-of-lazy-var-part-2/</guid>
      <description>Continue from the previous post, we will look into a few problems when working with lazy var&amp;hellip;</description>
    </item>
    
    <item>
      <title>Swift: The downsides of lazy var (part 1)</title>
      <link>https://trinhngocthuyen.github.io/posts/tech/swift-the-downsides-of-lazy-var-part-1/</link>
      <pubDate>Thu, 31 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://trinhngocthuyen.github.io/posts/tech/swift-the-downsides-of-lazy-var-part-1/</guid>
      <description>Lazy evaluation is a really powerful technique which enhances app performance by avoiding unecessary computation. In Swift, apart from this advantage, it also brings convenience when it comes to coding style&amp;hellip;</description>
    </item>
    
    <item>
      <title>How to stub network in iOS</title>
      <link>https://trinhngocthuyen.github.io/posts/tech/how-to-stub-network-in-ios/</link>
      <pubDate>Sat, 04 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://trinhngocthuyen.github.io/posts/tech/how-to-stub-network-in-ios/</guid>
      <description>There are times we wish to fake a network event, for example, a network error. However, integrating a 3rd party stub library just for this purpose is not really worthy. This post aims at demonstrating how to stub network.</description>
    </item>
    
    <item>
      <title>Quick thoughts on Tail recursion in Swift</title>
      <link>https://trinhngocthuyen.github.io/posts/tech/quick-thoughts-on-tail-recursion-in-swift/</link>
      <pubDate>Mon, 30 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://trinhngocthuyen.github.io/posts/tech/quick-thoughts-on-tail-recursion-in-swift/</guid>
      <description>I always thought that Tail call optimization (TCO), sometimes called tail recursion optimization, is supported in most languages by default. It turns out to be opposite.</description>
    </item>
    
    <item>
      <title>Method Swizzling: What, Why and How</title>
      <link>https://trinhngocthuyen.github.io/posts/tech/method-swizzling-what-why-and-how/</link>
      <pubDate>Fri, 20 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://trinhngocthuyen.github.io/posts/tech/method-swizzling-what-why-and-how/</guid>
      <description>Method swizzling is a very powerful technique that takes advantage of dynamism. The core idea of this technique is to replace the real implementation of a method at runtime. With this power, we could be able to do a lot of cool stuffs. Actually, this special feature is offered by the Objective-C runtime, via message dispatch.</description>
    </item>
    
    <item>
      <title>Method dispatch in Swift</title>
      <link>https://trinhngocthuyen.github.io/posts/tech/method-dispatch-in-swift/</link>
      <pubDate>Mon, 25 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://trinhngocthuyen.github.io/posts/tech/method-dispatch-in-swift/</guid>
      <description>Method dispatch is a term referring to mechanisms by which the program determines which operation should be executed (by operation, I mean a set of instructions). There are times we expect a method behavior to be determined only at runtime. This motivation give rise to different mechanisms of dispatching a method, each of which has its own pros and cons.</description>
    </item>
    
    <item>
      <title>How a Swift file is compiled</title>
      <link>https://trinhngocthuyen.github.io/posts/tech/how-a-swift-file-is-compiled/</link>
      <pubDate>Sat, 23 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://trinhngocthuyen.github.io/posts/tech/how-a-swift-file-is-compiled/</guid>
      <description>First of all, this is not &amp;ldquo;how an iOS/MacOS app is built&amp;rdquo;. An app consists of a bunch of source code files, structured in modules/frameworks, each of which could be purely in swift/objective-c, or mixed and match&amp;hellip;</description>
    </item>
    
  </channel>
</rss>
