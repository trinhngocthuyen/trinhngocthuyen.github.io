<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ci on Thuyen&#39;s corner</title>
    <link>https://trinhngocthuyen.com/tags/ci/</link>
    <description>Recent content in ci on Thuyen&#39;s corner</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 08 Mar 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://trinhngocthuyen.com/tags/ci/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>In Search of Test Discovery Solutions in iOS</title>
      <link>https://trinhngocthuyen.com/posts/tech/in-search-of-test-discovery/</link>
      <pubDate>Sat, 08 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://trinhngocthuyen.com/posts/tech/in-search-of-test-discovery/</guid>
      <description>Introduction Five years ago, I wrote a blog post about extracting test methods before runtime in iOS. This falls under a broader category of test discovery - the process of identifying test cases in a codebase.&#xA;While test discovery is relatively straightforward in scripting languages, it is more challenging in iOS and other statically typed languages. For a Swift package project, this can be done with the swift test list command.</description>
    </item>
    <item>
      <title>Swift Testing and the Compatibility With xcodebuild</title>
      <link>https://trinhngocthuyen.com/posts/tech/swift-testing-and-xcodebuild/</link>
      <pubDate>Tue, 25 Feb 2025 00:00:00 +0000</pubDate>
      <guid>https://trinhngocthuyen.com/posts/tech/swift-testing-and-xcodebuild/</guid>
      <description>Introduction Swift Testing is a new test framework introduced by Apple at WWDC 2024. It offers a range of macro-based features, making test writing more expressive. One of the key features driving migration from XCTest to Swift Testing is parameterized testing. While this concept has been widely available in other languages (ex. pytest introduced it in 2011), Swift Testing now enables repeated test execution with different inputs and expected outputs.</description>
    </item>
    <item>
      <title>pre-commit Environment Issue in SourceTree</title>
      <link>https://trinhngocthuyen.com/posts/tech/pre-commit-env-in-sourcetree/</link>
      <pubDate>Tue, 06 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://trinhngocthuyen.com/posts/tech/pre-commit-env-in-sourcetree/</guid>
      <description>In the previous post, I mentioned pre-commit as a powerful tool to lint and format in a project.&#xA;It had worked seamlessly for me until I committed code using SourceTree. Just to clarify, I predominantly use git on terminal. I only use a GUI app such as SourceTree to view the diff, or to stage selective chunks in a file (which is a bit difficult to achieve when using terminal). Therefore, the issue went unnoticed during my usual workflow.</description>
    </item>
    <item>
      <title>Using pre-commit for Linters/Formatters</title>
      <link>https://trinhngocthuyen.com/posts/tech/pre-commit/</link>
      <pubDate>Thu, 01 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://trinhngocthuyen.com/posts/tech/pre-commit/</guid>
      <description>During my tenure at Grab, I witnessed the project’s transformation from an iOS exclusive to a multi-language initiative. Initially, the project primarily comprised iOS code. Over time, we developed various scripts (Ruby, Python, Bash, etc.) to enhance project build time and facilitate CI/CD integration. However, the linter setup was not sufficient for such a multi-language project.&#xA;At a glance, we used SwiftLint, Rubocop, and Flake8 to lint Swift, Ruby, and Python code, respectively.</description>
    </item>
    <item>
      <title>Designing Test Quarantine Logic to Deal With Flaky Tests</title>
      <link>https://trinhngocthuyen.com/posts/tech/test-quarantine/</link>
      <pubDate>Sun, 17 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://trinhngocthuyen.com/posts/tech/test-quarantine/</guid>
      <description>1. Introduction Flaky tests, known for producing inconsistent results (success or failure) over time, can be a source of frustration for developers. These non-deterministic tests can arise due to various factors, including code issues or an inconsistent testing environment. In this blog post, we will explore the concept of test quarantine, an approach to mitigate the challenges posed by flaky tests.&#xA;2. The Need for Test Quarantine 2.1. The Challenge of Flaky Tests Flaky tests are particularly prevalent in certain types of testing, such as UI testing, where the higher level of integration introduces greater complexity.</description>
    </item>
    <item>
      <title>A Tale of Project Build Time Improvement</title>
      <link>https://trinhngocthuyen.com/posts/tech/a-tale-of-project-build-time/</link>
      <pubDate>Tue, 29 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://trinhngocthuyen.com/posts/tech/a-tale-of-project-build-time/</guid>
      <description>Introduction Build time is a key factor to engineers’ productivity. Slow build time can be frustrating and lead to hindered progress. There has been a great amount of effort by the community to tackle this complex problem. This blog post highlights various methodologies employed by our team (at Grab) to alleviate this pain point.&#xA;Background The process of building an iOS project involves multiple steps, including compiling source code, processing resources (headers, assets, storyboards, etc.</description>
    </item>
    <item>
      <title>On Using Python for Scripting in iOS Projects</title>
      <link>https://trinhngocthuyen.com/posts/tech/on-using-python-for-scripting/</link>
      <pubDate>Tue, 22 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://trinhngocthuyen.com/posts/tech/on-using-python-for-scripting/</guid>
      <description>As an iOS engineer, my recent focus has been on platform work, involving tasks like optimizing build times, integrating CI/CD pipelines, and devising testing solutions. This has led me to explore various scripting options, and I&amp;rsquo;ve found great satisfaction in using Python as our preferred choice.&#xA;The first Python code Initially, scripting wasn&amp;rsquo;t a prominent aspect of my team&amp;rsquo;s workflow, largely due to the simplicity of our CI/CD setup and the prevalence of Bash scripts in our project.</description>
    </item>
    <item>
      <title>Code Signing on CI</title>
      <link>https://trinhngocthuyen.com/posts/tech/code-signing-on-ci/</link>
      <pubDate>Tue, 01 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://trinhngocthuyen.com/posts/tech/code-signing-on-ci/</guid>
      <description>1. Introduction Code signing in iOS refers to the process of digitally signing an app&amp;rsquo;s executable code to ensure its authenticity and integrity.&#xA;During feature development, developers usually do not have to worry about code signing because Xcode handles the complicated work. Most of the time, we build and run the app on simulators that do not require special code signing settings.&#xA;However, distributing the app requires code signing. While working locally, you can rely on the &amp;ldquo;Automatically manage signing&amp;rdquo; option in the project settings.</description>
    </item>
    <item>
      <title>50 Shades of Git: Remotes and Authentication</title>
      <link>https://trinhngocthuyen.com/posts/tech/50-shades-of-git-remotes-and-authentication/</link>
      <pubDate>Tue, 14 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://trinhngocthuyen.com/posts/tech/50-shades-of-git-remotes-and-authentication/</guid>
      <description>Introduction Git is a software development tool that almost all engineers use in their work. This source control tool enables us to make changes to a project code base collaboratively. However, Git can be a headache at times. When running on CI environment, it sometimes does not work the way it does locally. Moreover, we sometimes follow best practices without knowing much about how it works. This gap together with the limited debug capabilities on CI make it even harder to resolve issues.</description>
    </item>
    <item>
      <title>Dealing With Flaky UI Tests in iOS</title>
      <link>https://trinhngocthuyen.com/posts/tech/dealing-with-flaky-ui-tests/</link>
      <pubDate>Sat, 25 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://trinhngocthuyen.com/posts/tech/dealing-with-flaky-ui-tests/</guid>
      <description>1. Introduction UI testing is a test technique, besides unit testing, to ensure product quality. While unit testing focuses on small portions (or units) of the system, UI testing aims to cover a wider user journey in the app. This testing technique helps engineers gain more confidence when developing, refactoring, and shipping the products to users. In the context of iOS development, UI testing plays a key role in product quality as the form of a feature shipped to users is usually through what they see on the app.</description>
    </item>
    <item>
      <title>CI: Heuristically Extracting Test Methods Before Runtime</title>
      <link>https://trinhngocthuyen.com/posts/tech/ci-extract-test-methods/</link>
      <pubDate>Sun, 08 Nov 2020 00:00:00 +0000</pubDate>
      <guid>https://trinhngocthuyen.com/posts/tech/ci-extract-test-methods/</guid>
      <description>1. Introduction Reducing pipeline time is a key problem in the pipeline time reduction epic. As mentioned in the previous post, this can be done by dividing tests in the project into smaller sets and run them in parallel CI jobs (sometimes called runners). The assignment of what tests to what jobs usually takes place at the end of the build job, before tests being executed. In order to assign/distribute tests to runners, we must know what tests we have.</description>
    </item>
    <item>
      <title>CI: Thinning iOS Build Artifacts</title>
      <link>https://trinhngocthuyen.com/posts/tech/ci-ios-artifacts-optimization/</link>
      <pubDate>Mon, 02 Nov 2020 00:00:00 +0000</pubDate>
      <guid>https://trinhngocthuyen.com/posts/tech/ci-ios-artifacts-optimization/</guid>
      <description>1. Introduction 1.1. Pipeline Time Improvement As engineers, we always want to land our change on master as quickly as possible. Apart from the time it takes to resolve code review comments from peers, there&amp;rsquo;s one constraint engineers have to face before getting their changes merged. That constraint is the CI pipeline time (ie. the time it takes for a CI pipeline to run against certain changes).&#xA;For iOS development, a typical CI pre-merge pipeline usually involves building the project, then running unit tests and UI tests.</description>
    </item>
    <item>
      <title>When Project Labels are not Just to Categorize Things</title>
      <link>https://trinhngocthuyen.com/posts/tech/when-project-labels-are-not-just-to-categorize-things/</link>
      <pubDate>Sun, 29 Mar 2020 00:00:00 +0000</pubDate>
      <guid>https://trinhngocthuyen.com/posts/tech/when-project-labels-are-not-just-to-categorize-things/</guid>
      <description>Whether you are a fan of Github, Gitlab, BitBucket, or any git-based repo hosting platform, I am sure you must be farmiliar with project labels.&#xA;Categorizing (Messy) Project Issues A common use case of project labels is to categorize project issues of a repo. For engineering discussion, we use Slack (or any alternative for instant messaging platform) only for quick discussions. Those usually end shortly. If such a discussion become lengthy, probably you used the wrong communication channel 😀?</description>
    </item>
    <item>
      <title>When iOS CI/CD Config is not Just a File or a Dashboard</title>
      <link>https://trinhngocthuyen.com/posts/tech/when-cicd-config-is-not-just-a-file-or-a-dashboard/</link>
      <pubDate>Sun, 15 Mar 2020 00:00:00 +0000</pubDate>
      <guid>https://trinhngocthuyen.com/posts/tech/when-cicd-config-is-not-just-a-file-or-a-dashboard/</guid>
      <description>A while ago, when I heard the term &amp;ldquo;CI/CD&amp;rdquo;, I always thought of a dashboard to drag and drop, upload certificates and input the scheme&amp;hellip; blah blah. That&amp;rsquo;s all! And I was kinda believe that a good CI/CD platform must be like that: convenient, as few setups as possible. Now, I have a different viewpoint. What I very much expect in a CI/CD platform is the ability to customize workflow. This does not mean those drag-and-drop platforms are inadequate.</description>
    </item>
    <item>
      <title>Tản mạn: chuyện Gitlab</title>
      <link>https://trinhngocthuyen.com/posts/tech/random-thoughts-on-gitlab/</link>
      <pubDate>Sun, 02 Feb 2020 00:00:00 +0000</pubDate>
      <guid>https://trinhngocthuyen.com/posts/tech/random-thoughts-on-gitlab/</guid>
      <description>1 Khi mình join team, công ty mình host các projects trên Github. Một dev mới vào công ty sẽ được add tài khoản Github cá nhân mình vào tài khoản organization của công ty. Lúc ấy, trên Github profile của bạn sẽ hiển thị membership với công ty (bạn phải public cái membership thì người khác mới thấy được nha). Nếu bạn làm cho công ty nào ok, hoặc thuộc dạng top-notch trong nước/khu vực, thì Github profile của bạn sẽ có-vẻ đẹp hơn một tí.</description>
    </item>
    <item>
      <title>Random thoughts on being a CI engineer</title>
      <link>https://trinhngocthuyen.com/posts/tech/random-thoughts-on-being-a-ci-engineer/</link>
      <pubDate>Sun, 30 Jun 2019 00:00:00 +0000</pubDate>
      <guid>https://trinhngocthuyen.com/posts/tech/random-thoughts-on-being-a-ci-engineer/</guid>
      <description>In this post, I am going to talk about my experiences when working with CI/CD for iOS applications and some valuable lessons I learned.&#xA;1 In the past few months, I have been intensively working on CI/CD features in my team. My teammates sometimes refer to me as &amp;ldquo;the CI guy&amp;rdquo;. Before me, &amp;ldquo;the CI guy&amp;rdquo; was someone else who is humble, and quiet. After he left the company, I became the main PIC for CI/CD-related issues.</description>
    </item>
  </channel>
</rss>
