<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>concurrency on Thuyen&#39;s corner</title>
    <link>https://trinhngocthuyen.com/tags/concurrency/</link>
    <description>Recent content in concurrency on Thuyen&#39;s corner</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 25 Mar 2025 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://trinhngocthuyen.com/tags/concurrency/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Async Let Bindings: a Gotcha and a Closer Look</title>
      <link>https://trinhngocthuyen.com/posts/tech/async-let-bindings-gotcha-and-closer-look/</link>
      <pubDate>Tue, 25 Mar 2025 00:00:00 +0000</pubDate>
      <guid>https://trinhngocthuyen.com/posts/tech/async-let-bindings-gotcha-and-closer-look/</guid>
      <description>Swift 5.5 introduced a powerful set of concurrency tools to deal with asynchronous tasks, eliminating the complexity of callbacks and queues.&#xA;Besides Task and TaskGroup for managing child tasks, the async let syntax allows you to start concurrent tasks and bind their results to variables, following structured concurrency principles.&#xA;Yet, be cautious when writing async let bindings. Consider these two declarations below.&#xA;async let x = taskX() // returns an Int async let y = taskY() // retunns a String let result = await (x, y) async let (x, y) = (taskX(), taskY()) let result = await (x, y) At first glance, they seem equivalent.</description>
    </item>
  </channel>
</rss>
