[{"content":"","href":"/tech/","title":"Tech"},{"content":"","href":"/reasoning/","title":"Reasoning"},{"content":"","href":"/misc/","title":"Misc"},{"content":"","href":"/reading/","title":"Reading Corner"},{"content":"Welcome to Thuyen\u0026rsquo;s corner!\nI am Thuyen Trinh. I am currently based in Ho Chi Minh city, Vietnam. As a \u0026ldquo;young\u0026rdquo; developer, I find myself in a thirst of knowledge, not only about programming, but also other interesting stuffs.\nI believe sharing culture lies at the heart of spreading knowledge and acquiring more in return. Also, by writing down your understanding, we are challenging ourselves to become a self-teacher, which is a perfect mean of systematizing and reinforcing your knowledge.\nThis blog came to existence with the same purposes.\nContact me at:\n Email Github LinkedIn Twitter  ","href":"/about/","title":"About"},{"content":"","href":"/categories/","title":"Categories"},{"content":"","href":"/categories/misc/","title":"Misc"},{"content":"","href":"/tags/","title":"Tags"},{"content":"","href":"/tags/retrospective/","title":"retrospective"},{"content":"","href":"/","title":"üè° Home"},{"content":" June is coming to an end soon\u0026hellip; It\u0026rsquo;s the end of month, the end of quarter, and also the end of the first half. It\u0026rsquo;s time to look back on what I have done so far. About future plans, I\u0026rsquo;d like to leave it open.\nWork 1 My work interest gradually shifted away from iOS. I have to admit that after a few years working as an iOS engineer, I started to like iOS a little less. As of now, I still don\u0026rsquo;t know how to use SwiftUI, I still truggle with making a certain UI work as expected.\nTo me, the world of iOS development is fairly small with some repetitive problems.\nIn the past six months, I have barely written any iOS code (Swift/Objective-C). Rather, I\u0026rsquo;ve been working on some projects that involve more of scripting languages (Ruby, Python\u0026hellip;). Although those projects are still intricately tied to iOS, it doesn\u0026rsquo;t require much investment in keeping up-to-date with various project architectures and trendy technologies. I can find the right balance between iOS and non-iOS.\n2 It\u0026rsquo;s easier for me to get stressed than before. I usually feel burned out. I wonder at times if the negative emotion is a side effect of COVID-19 when we\u0026rsquo;re isolated from others, or it actually comes from my work.\nI realize that in order to maintain healthy habits, I need to \u0026ldquo;stop working\u0026rdquo; at the right time. For example, I often clock out at 6:30pm and work out then. If I work a bit longer (7pm or even later), I\u0026rsquo;ll feel tired that evening, even after the workout. Though I am fully aware of it, tackling it is a different matter. Sometimes, It\u0026rsquo;s hard to shut your brain off, keep yourself from thinking about it, put it in hibernation mode for temporary\u0026hellip;\n3 I like things to be organized. When it comes to work, although dealing with code smell is normal to any software engineer, it\u0026rsquo;s sometimes hard for me to embrace that truth. For instance, one day, I recognized a hack in the code which explained why certain things worked in certain ways. It freaked me out rather than filled me with joy that I knew something new :(. Then, that day I need to spend time calming me down instead of dealing with the code which is the source of my frustration. One of my co-workers describes that aspect of me as OCD. Hmmm\u0026hellip; It\u0026rsquo;s not that extreme, it\u0026rsquo;s not OCD, but I do struggle with this matter.\n4 You probably heard of the recent news about employees getting laid off as a consequence of COVID-19\u0026rsquo;s impact. My company is no exception. In fact, I\u0026rsquo;ve never thought of that scenario and I believe some of those impacted employees also held the same belief\u0026hellip; I am fortunate to continue contributing to the company\u0026rsquo;s mission. But, apparently, I better be prepared for such a scenario as the health crisis and the recession are not yet over anytime soon.\nLife Health 5 It\u0026rsquo;s a good sign that my health has been improved lately. I work out more regularly, either running outdoor or doing indoor exercises. Having a good look is a side effect that I don\u0026rsquo;t expect much. Rather, I just want to build up a healthy habit. At first, it was a bit challenging to follow the schedule. But after a while, I gradually formed the habit and workout has been a part of my daily routine that I would have never thought I could have.\nReading 6 I have a resolution this year about reading books in English. I tried to pick up some books and then gave up quickly. Even though some are of my favorite genres (if written in Vietnamese) such as detective books, mind-blowing books\u0026hellip; I find it difficult catching up on the author\u0026rsquo;s storylines because of improficiency in English.\nForeign languages 7 I did not spend much time on improving my English in the first quarter. I have just resumed recently. I started to use Anki to learn and revise vocab. Overall, I find this app quite suitable for me\u0026hellip; However, it takes me more effort to find new vocabs on my own and look them up again to find examples, and then input to Anki. To reduce this effort, I followed some English channels on Youtube and picked up new vocabs from those sources.\nA funny thing is: I am a kind of person who dislikes apps that do not have a fancy look. I can spend the whole day fine-tuning colors and fonts for my IDE(s) and I won\u0026rsquo;t admit it\u0026rsquo;s a waste of time. And\u0026hellip; Definitely, this Anki app fails to meet my aesthetic creteria. It just looks corny to me. But somehow, its needs-improvement appearance (in my view) does not bother me when I use it at all\u0026hellip; I come to realize that its intuitiveness really matters here. Therefore, for those English learners who underestimate this app because of its UI, why don\u0026rsquo;t you give it a try first?\n8 I haven\u0026rsquo;t started learning Chinese (Mandarin, to be exact). I\u0026rsquo;ve always made an excuse that I need to focus on English first. But I\u0026rsquo;ve just realized that I cannot just wait until my English takes a good shape, coz that day would probably be 10 years later. And it would be a waste when I am surrounded by Mandarin speaking environment and I could not benefit from it. Thus, this is one area of growth that I am going to kick off in the next half.\n\u0026hellip;\nLooking forward\u0026hellip; Well, let the time answer it\n","href":"/misc/looking-back-on-2020h1/","title":"üìù Looking back on 2020H1"},{"content":"·ªû post l·∫ßn tr∆∞·ªõc, m√¨nh c√≥ t·∫£n m·∫°n s∆∞∆°ng s∆∞∆°ng v·ªõi m·ªçi ng∆∞·ªùi v·ªÅ chuy·ªán h·ªçc ti·∫øng Anh. Trong b√†i vi·∫øt l·∫ßn n√†y m√¨nh s·∫Ω n√≥i ch√∫t x√≠u v·ªÅ ti·∫øng Anh s·ª≠ d·ª•ng trong cu·ªôc s·ªëng c·ªßa m√¨nh ·ªü Sing.\n1 L√∫c m√¨nh m·ªõi qua, m√¨nh h∆°i b·ªëi r·ªëi v·ªõi ti·∫øng Anh c·ªßa ng∆∞·ªùi Sing. V√¨ ch∆∞a quen accent b√™n n√†y n√™n ƒë√¥i l√∫c kh√¥ng bi·∫øt ng∆∞·ªùi ta ƒëang n√≥i ti·∫øng Anh hay ti·∫øng Hoa. B·ªüi v·∫≠y nhi·ªÅu l√∫c ban ƒë·∫ßu n√£o ph·∫£i t·ªën th√™m v√†i gi√¢y x·ª≠ l√Ω th√¥ng tin ƒë·ªÉ bi·∫øt c√¥ d√¨ ch√∫ b√°c ƒëang n√≥i th·ª© ti·∫øng g√¨. N·∫øu l√† ti·∫øng Hoa th√¨ m√¨nh s·∫Ω b·∫£o \u0026ldquo;Sorry, I don\u0026rsquo;t speak Chinese\u0026rdquo; k√®m theo m·ªôt n·ª• c∆∞·ªùi ƒë·∫ßy thi·ªán c·∫£m nh∆∞ qu√† h·ªëi l·ªô cho y√™u c·∫ßu \u0026ldquo;c√¥/d√¨/ch√∫/b√°c n√≥i ti·∫øng Anh gi√πm con v·ªõi\u0026rdquo;.\nC√≥ l·∫ßn, l√∫c m·ªõi qua, ƒëi g·ªçi ƒë·ªì ƒÉn ·ªü m·∫•y food court (khu ƒÉn u·ªëng), m√¨nh ƒë·∫øn h√†ng kia g·ªçi m√≥n fish soup (t·∫°m d·ªãch l√† canh c√°, nh∆∞ng h·ªïng gi·ªëng c√°ch ƒÉn canh ·ªü Vi·ªát Nam): - \u0026ldquo;Can I have sliced fish soup, please?\u0026rdquo; - \u0026ldquo;Bee hoon?\u0026rdquo; - \u0026ldquo;Hmmm\u0026hellip; Sorry, I can\u0026rsquo;t speak Chinese\u0026rdquo; √îng b√°c tr∆° ra m·∫•y gi√¢y, xong k√™u th·∫±ng con ra nh·∫≠n order. M√¨nh th·∫•y th·∫ø t∆∞·ªüng l√† l√£o kh√¥ng n√≥i ti·∫øng Anh ƒë∆∞·ª£c thi·ªát. Th·∫±ng con, tr·∫°c ƒë√¢u c≈©ng tu·ªïi m√¨nh ho·∫∑c nh·ªè h∆°n, ra h·ªèi l·∫°i \u0026ldquo;Rice or bee hoon?\u0026rdquo;. M√¨nh trong ƒë·∫ßu th·∫ßm nghƒ© \u0026ldquo;bee hoon l√† c√°i gi·ªëng g√¨ m√† c·ª© n√≥i ho√†i v·∫≠y?\u0026rdquo;, c·ª© \u0026ldquo;Sorry?\u0026rdquo; cho ng∆∞·ªùi ta nh·∫Øc l·∫°i, m√† v·∫´n kh√¥ng hi·ªÉu. C√°i l√†m m√¨nh b·ªëi r·ªëi nh·∫•t l√† kh√¥ng bi·∫øt l√† h·∫Øn ƒëang n√≥i ti·∫øng g√¨. N·∫øu m√† n√≥ n√≥i ƒë·ªß c√¢u ch√∫t, ki·ªÉu \u0026ldquo;Do you want rice or bee hoon?\u0026rdquo; th√¨ m√¨nh c√≤n bi·∫øt l√† n√≥ n√≥i ti·∫øng Anh, xong ch·ªçn \u0026ldquo;rice\u0026rdquo; (c∆°m) cho n√≥ ph·∫ª, kh·ªèi l√†m kh·ªï nhau nh∆∞ v·∫ßy. Cu·ªëi c√πng n√≥ ch·ªâ tay v√†o ch√©n c∆°m, n√≥i \u0026ldquo;rice\u0026rdquo;, xong ch·ªâ qua r·ªï b√∫n n√≥i \u0026ldquo;bee hoon\u0026rdquo;, xong ch·ªët v·ªõi c√¢u h·ªèi \u0026ldquo;which one?\u0026rdquo; nh∆∞ th·ªÉ n√≥ kh√¥ng ch·∫Øc m√¨nh c√≥ hi·ªÉu l√† ph·∫£i ch·ªçn m·ªôt trong hai kh√¥ng. Sau khi m√¨nh ch·ªçn xong, n√≥ quay tr·ªü v√†o b·∫øp m·∫ßn order, 2 cha con h·∫Øn c∆∞·ªùi n√≥i x·∫ßm x√¨ g√¨ ƒë√≥. L·∫ßn n√†y th√¨ m√¨nh ch·∫Øc ch·∫Øn h·ªç n√≥i ti·∫øng Hoa, v√† ƒëang n√≥i v·ªÅ c√°i ng∆∞·ªùi ƒëang ƒë·ª©ng ng√¢y ra, s∆∞·ª£ng s√πng mu·ªën √∫p m·∫∑t xu·ªëng ƒë·∫•t cho ƒë·ª° nh·ª•c, ch√≠nh l√† m√¨nh\u0026hellip; Haiz, m√¨nh h·ªçc ƒë∆∞·ª£c t·ª´ \u0026ldquo;bee hoon\u0026rdquo; qua c√°i tr·∫£i nghi·ªám qu√™ x·ªá v·∫≠y ƒë√≥. √Ä, n√≥i s∆° v·ªÅ \u0026ldquo;bee hoon\u0026rdquo;, c√°i ch·ªØ n√†y xu·∫•t ph√°t t·ª´ ti·∫øng Hokkien (Ph√∫c Ki·∫øn), l√† m·ªôt dialect (ti·∫øng ƒë·ªãa ph∆∞∆°ng) c·ªßa ti·∫øng B√¥ng. C√≤n nhi·ªÅu ch·ªØ kh√°c trong m√≥n ƒÉn c≈©ng xu·∫•t ph√°t t·ª´ ti·∫øng B√¥ng (m√¨nh ghi ti·∫øng B√¥ng n√≥i chung, ch·ª© kh√¥ng bi·∫øt dialect g√¨) nh∆∞ \u0026ldquo;kway teow\u0026rdquo; (ƒë·ªçc l√† \u0026ldquo;quay-teo\u0026rdquo;, ch·ªâ c√°i s·ª£i ph·ªü, s·ª£i m√¨ qu·∫£ng), \u0026ldquo;mee\u0026rdquo; (l√† m√¨ ak), \u0026ldquo;chee cheong fun\u0026rdquo; (ƒë·ªçc l√† \u0026ldquo;chi-chon-ph∆∞n\u0026rdquo;, ch·ªâ c√°i gi·ªëng b√°nh cu·ªën VN).\nN·∫øu b·∫°n ƒëi order c√† ph√™ ·ªü m·∫•y c√°i qu·∫ßy n∆∞·ªõc (drink stall) trong food court, th√¨ c≈©ng ph·∫£i l·∫≠n l∆∞ng th√™m m·∫•y c√¥ng th·ª©c order n·ªØa nh∆∞: - Kopi peng: c√† ph√™ s·ªØa ƒë√° - Kopi peng tabao: c√† ph√™ s·ªØa ƒë√° mang ƒëi - Kopi O kosong peng: c√† ph√™ ƒëen ƒë√°, kh√¥ng ƒë∆∞·ªùng\n2 ·ªû b√™n n√†y, ng∆∞·ªùi ta hay n√≥i ki·ªÉu c·ª•t l·ªßn nh∆∞ √¥ng b√°c kia v·∫≠y ak. Ch·∫≥ng h·∫°n, n·∫øu √¥ng t√†i x·∫ø Grab h·ªèi b·∫°n l√† ch·ªó n√†y qu·∫πo tr√°i ra ƒë∆∞·ª£c kh√¥ng th√¨ thay v√¨ h·ªèi \u0026ldquo;Can we turn left here?\u0026rdquo;, ·ªïng hay n√≥i ki·ªÉu \u0026ldquo;Turn left here\u0026rdquo; xong qu·∫•t ch·ªØ \u0026ldquo;Can?\u0026rdquo; cu·ªëi c√¢u.\nT√†i x·∫ø th·∫•y m√¨nh ƒë·ªÉ t√™n ti·∫øng Vi·ªát, xong h·ªèi m√¨nh t·ª´ ƒë√¢u th√¨ h·ªèi \u0026ldquo;You\u0026rsquo;re from where?\u0026rdquo; thay v√¨ \u0026ldquo;Where are you from?\u0026rdquo;. Nhi·ªÅu l√∫c th·∫•y ng∆∞·ªùi ta n√≥i l∆∞·ª£c b·ªè ch·ªß ng·ªØ, ƒë·ªông t·ª´ to be, l√†m cho c√¢u nh∆∞ sai ng·ªØ ph√°p, vd nh∆∞: - \u0026ldquo;This food, really nice\u0026rdquo; (d·ªãch ra: \u0026ldquo;m√≥n n√†y ghon gh√™\u0026rdquo;) - \u0026ldquo;You go where?\u0026rdquo; (d·ªãch ra: \u0026ldquo;m√†y ƒëi ƒë√¢u ƒë√≥?\u0026rdquo;)\nC√≤n m·ªôt c·ª•m m√¨nh nghe r·∫•t r·∫•t th∆∞·ªùng xuy√™n l√† \u0026ldquo;no need\u0026rdquo; (d·ªãch ra: \u0026ldquo;kh√¥ng c·∫ßn ƒë√¢u\u0026rdquo;). V√≠ d·ª•: \u0026ldquo;Do you need a bag?\u0026rdquo; - \u0026ldquo;No need.\u0026rdquo;. B·∫°n m√¨nh n√≥i l√† c·ª•m n√†y x√†i ph·ªï bi·∫øn kh√¥ng ch·ªâ ·ªü Sing. Nh∆∞ng m√† m√¨nh nghe n√≥ k√¨ k√¨, nghe nh∆∞ th·ªÉ ƒëang n√≥i ti·∫øng b·ªìi, d·ªãch theo th·ª© t·ª± nh∆∞ \u0026ldquo;dog your eat shoe my\u0026rdquo; (t·ª©c l√†: \u0026ldquo;con ch√≥ c·ªßa m√†y c·∫Øn gi√†y c·ªßa tao\u0026rdquo;) ak üòÇ.\nBan ƒë·∫ßu m√¨nh th·∫•y c√°i l·ªëi n√≥i z·∫ßy n√≥ h∆°i s·ªó s√†ng, c·ª•c s√∫c m·ªôt ch√∫t. Nh∆∞ng sau m·ªôt th·ªùi gian th√¨ m√¨nh th·∫•y n√≥ c≈©ng b√¨nh th∆∞·ªùng. V·ªõi nh·ªØng ƒëo·∫°n h·ªôi tho·∫°i ph·ª•c v·ª• m·ª•c ƒë√≠ch mua b√°n nh∆∞ tr√™n th√¨ ng∆∞·ªùi ta ch·ªâ quan t√¢m ƒë·∫øn vi·ªác truy·ªÅn ƒë·∫°t ƒë·ªß th√¥ng tin trong th·ªùi gian cho ph√©p. Nh∆∞ng m√† h·ªïng bi·∫øt n·∫øu m√† m√¨nh d√πng ki·ªÉu n√≥i v·∫≠y d√πng ·ªü m·∫•y n∆∞·ªõc kh√°c th√¨ c√≥ b·ªã cho l√† b·∫•t nh√£ kh√¥ng :).\n3 M·∫∑c d√π ti·∫øng Anh l√† ng√¥n ng·ªØ ph·ªï bi·∫øn ·ªü Sing, c≈©ng c√≥ nhi·ªÅu ng∆∞·ªùi kh√¥ng n√≥i ƒë∆∞·ª£c ti·∫øng Anh, ch·ªß y·∫øu l√† nh·ªØng ng∆∞·ªùi l·ªõn tu·ªïi. M·ªõi h√¥m b·ªØa m√¨nh ƒëi si√™u th·ªã ph√≠a b√™n kia ƒë∆∞·ªùng ƒë·ªÉ mua ƒë·ªì n·∫•u ƒÉn cho c·∫£ tu·∫ßn (giai ƒëo·∫°n n√†y th√¨ m√¨nh ch·ªâ ƒëi ch·ª£ 1 l·∫ßn/tu·∫ßn, v√† ƒë√≥ c≈©ng l√† l·∫ßn duy nh·∫•t m√¨nh b∆∞·ªõc ch√¢n ra kh·ªèi nh√†). M√¨nh b∆∞·ªõc v√†o thang m√°y, m·ªôt tay c·∫ßm b·ªãch n√†o l√† th·ªãt g√†, c√°, s∆∞·ªùn heo, tay kia th√¨ rau r√°c, c·ªß qu·∫£, n∆∞·ªõc n√¥i. B√† c·ª• th·∫•y m√¨nh 2 tay l·ªânh k·ªânh ƒë·ªì ƒÉn, nh√¨n v·ªõi √°nh m·∫Øt d√≤ x√©t r·ªìi h·ªèi g√¨ ƒë√≥ b·∫±ng ti·∫øng Hoa. M√¨nh b·∫£o \u0026ldquo;Sorry, I cannot speak Chinese\u0026rdquo;, b·ª•ng ƒëo√°n ch·∫Øc b√† c·ª• h·ªèi \u0026ldquo;m√†y ƒëi ch·ª£ cho bao nhi√™u ng√†y th·∫ø\u0026rdquo;. Th∆∞·ªùng sau khi m√¨nh tung ra c√¢u th·∫ßn ch√∫ tr√™n l√† ng∆∞·ªùi ta chuy·ªÉn sang ti·∫øng Anh li·ªÅn. Nh∆∞ng b√† c·ª• l·∫°i n√≥i hay h·ªèi th√™m c√¢u g√¨ ƒë√≥, c≈©ng b·∫±ng ti·∫øng Hoa. L·∫ßn n√†y th√¨ m√¨nh ƒëo√°n ch·∫Øc r·∫±ng b√† h·ªèi m√¨nh ƒë·∫øn t·ª´ ƒë√¢u, ng∆∞·ªùi n∆∞·ªõc n√†o, nh∆∞ng kh√¥ng bi·∫øt tr·∫£ l·ªùi sao n√™n ch·ªâ bi·∫øt c∆∞·ªùi tr·ª´. Th·∫•y m√¨nh c∆∞·ªùi tr·ª´, b√† l√£o l·∫ßm b·∫ßm g√¨ ƒë√≥. M√¨nh l·∫°i c∆∞·ªùi tr·ª´ v√† mong c√°i thang m√°y tƒÉng t·ªëc l√™n cho m√¨nh ƒë·ª° x·∫•u h·ªï. M√¨nh x√°ch 3 b·ªãch ny lon m√† c·ª© t∆∞·ªüng x√°ch c·∫£ t·∫° c·ª•c qu√™.\n4 V·ªÅ ch·ªßng t·ªôc, ·ªü Sing ph·∫ßn ƒë√¥ng l√† ng∆∞·ªùi g·ªëc Hoa, sau ƒë√≥ l√† g·ªëc ·∫§n. Ti·∫øng Anh c·ªßa m·∫•y b·∫°n ·∫§n th√¨ cho ƒë·∫øn gi·ªù m√¨nh v·∫´n c·∫£m th·∫•y kh√≥ nghe v√¨ m·∫•y b·∫°n ƒë√° l∆∞·ª°i nhi·ªÅu qu√°. Dƒ© nhi√™n kh√¥ng ph·∫£i m√¨nh ch√™ bai m·∫•y b·∫£n g√¨ ƒë√¢u, v√¨ d√π g√¨ accent c≈©ng ch·ªâ l√† m·ªôt ph·∫ßn c·ªßa ng√¥n ng·ªØ, ng√¥n ng·ªØ c≈©ng ch·ªâ l√† m·ªôt ph·∫ßn c·ªßa giao ti·∫øp, giao ti·∫øp c≈©ng ch·ªâ l√† m·ªôt ph·∫ßn cu·∫£ c√¥ng vi·ªác v√† cu·ªôc s·ªëng. C√≤n v·ªÅ ng∆∞·ªùi Sing g·ªëc Hoa, m√¨nh c·∫£m th·∫•y m·∫•y b·∫£n n√≥i nhanh h∆°n so v·ªõi c√°c b·∫°n T√¢y. M·ªôt th·ªùi gian d√†i ban ƒë·∫ßu, m√¨nh th·∫•y m·ªói l·∫ßn nghe Singlish l√† ng·ªôp li·ªÅn, v√¨ m·∫•y b·∫£n, ƒë·∫∑c bi·ªát l√† l·ª©a thanh ni√™n, n√≥i h∆°i nhanh :D. C√≥ l·∫ßn ƒëi ƒÉn beef steak ·ªü Star Vista, v√†o order m√† thanh ni√™n b·∫Øn nguy√™n tr√†ng nghe kh√¥ng ra (ƒë·∫°i lo·∫°i n√≥ h·ªèi m·ª©c ƒë·ªì n∆∞·ªõng ch√≠n l√† g√¨? rare, medium rare, medium hay medium-well). M·∫•y l·∫ßn sau t·ªõi ƒÉn c≈©ng cƒÉng tai ra nghe v·∫≠y ak, ƒë∆∞·ª£c v√†i v√†i l·∫ßn th√¨ h·ªÖ nghe ch·ªØ \u0026ldquo;sauce\u0026rdquo; l√† tr·∫£ l·ªùi li·ªÅn \u0026ldquo;pepper sauce\u0026rdquo;, ki·ªÉu v·∫´y. Chi√™u cao tay h∆°n n·ªØa l√† kh√¥ng cho n√≥ c√≥ c∆° h·ªôi h·ªèi lu√¥n, h√≠t h∆°i th·∫≠t s√¢u, order nguy√™n tr√†ng ki·ªÉu \u0026ldquo;Can I have Australian rib eye, 200 gram, medium rare, with french fries \u0026amp; onion rings, using with pepper sauce\u0026hellip; and one lime juice, please?\u0026rdquo;. V√† ƒë·ª´ng qu√™n n·ªü m·ªôt n·ª• c∆∞·ªùi ƒë·∫ßy ·∫©n √Ω r·∫±ng \u0026ldquo;xin m√†y ƒë·ª´ng h·ªèi l·∫°i, tao ƒë·ªçc c√°i c√¢u kia mu·ªën h·ª•t h∆°i r·ªìi\u0026rdquo;.\n5 V·ªÅ l·ªëi n√≥i v√† c√°ch ph√°t √¢m c·ªßa ng∆∞·ªùi Sing, ngo√†i c√°ch n√≥i \u0026ldquo;l∆∞·ªùi\u0026rdquo; ƒë√£ k·ªÉ tr√™n, m√¨nh nh·∫≠n th·∫•y c√≥ m·ªôt s·ªë ƒëi·ªÉm kh√°c bi·ªát (m·ªôt c√°ch ri√™ng bi·ªát) so v·ªõi US/UK:\n Th∆∞·ªùng m·∫•y t·ª´ c√≥ ƒëu√¥i \u0026ldquo;-al\u0026rdquo; (ƒë·ªçc l√† \u0026ldquo;√¥\u0026rdquo;), th√¨ h·ªç ƒë·ªçc tr·∫°i th√†nh gi·ªëng nh∆∞ ƒëu√¥i \u0026ldquo;-er\u0026rdquo; (ƒë·ªçc l√† \u0026ldquo;∆°\u0026rdquo;). V√≠ d·ª•: \u0026ldquo;physical\u0026rdquo; ƒë·ªçc l√† \u0026ldquo;ph√≠-z√≠t-k∆°\u0026rdquo;, \u0026ldquo;cancel\u0026rdquo; ƒë·ªçc l√† \u0026ldquo;k√©n-x∆°\u0026rdquo; (nh∆∞ cancer). M·∫•y ch·ªØ c√≥ ph·ª• √¢m \u0026ldquo;t\u0026rdquo; ng∆∞·ªùi ta hay ƒë·ªçc r·∫•t √≠t √¢m gi√≥, gi·ªëng nh∆∞ √¢m \u0026ldquo;t\u0026rdquo; trong ti·∫øng Vi·ªát. V√≠ d·ª•, \u0026ldquo;tell\u0026rdquo; ƒë·ªçc th√†nh \u0026ldquo;teo\u0026rdquo; lu√¥n üòÇ. Ng∆∞·ªùi ta hay ch√®n m·∫•y ch·ªØ lah/leh/lor/meh v√†o c√¢u ƒë·ªÉ bi·ªÉu ƒë·∫°t c·∫£m x√∫c\u0026hellip; Chi ti·∫øt t·ª´ng ch·ªØ th√¨ m√¨nh ch·∫≥ng bi·∫øt ƒë√¢u :). Ng∆∞·ªùi ta hay d√πng ch·ªØ \u0026ldquo;already\u0026rdquo; cu·ªëi c√¢u, vd. \u0026ldquo;I did it already\u0026rdquo; (m√¨nh √≠t khi nghe ki·ªÉu \u0026ldquo;I already did it\u0026rdquo;).  C√≤n nh·ªØng c√°i kh√°c, b·∫°n th·ª≠ xem m·∫•y video tr√™n youtube ƒë·ªÉ bi·∫øt nh√©, nh∆∞ c√°i n√†y ch·∫≥ng h·∫°n:\n √Ä, m√¨nh kh√¥ng ph√¢n bi·ªát ƒë∆∞·ª£c accent c·ªßa ng∆∞·ªùi Sing v√† Malay. Trong tech family c√≥ c·∫≠u QA kia ng∆∞·ªùi Malay, ban ƒë·∫ßu m√¨nh t∆∞·ªüng l√† ng∆∞·ªùi Sing c∆°. Ch·∫Øc l√† do Sing v√† Malay chung g·ªëc g√°c.\nM·ªôt s·ªë b·∫°n c·ª±c ƒëoan trong vi·ªác ph·∫£i c√≥ accent chu·∫©n, cho r·∫±ng l√† accent c·ªßa ng∆∞·ªùi Sing kh√¥ng chu·∫©n. ·ªú, kh√¥ng chu·∫©n th√¨ c√≥ sao ƒë√¢u. V√≠ nh∆∞ ti·∫øng Vi·ªát c≈©ng c√≥ nhi·ªÅu gi·ªçng, m√¨nh n√≥i gi·ªçng Qu·∫£ng th√¨ c≈©ng c√≥ l√†m sao ƒë√¢u, ƒë·ªô cute c≈©ng ƒë√¢u c√≥ b·ªõt ƒëi, ph·∫£i h∆°m\u0026hellip; Sau m·ªôt th·ªùi gian, m√¨nh th·∫•y kh√° th√≠ch gi·ªçng Sing, nghe kh√° l√† d·ªÖ th∆∞∆°ng üòÑ.\n\u0026hellip;\nTh√¥i c≈©ng d√†i r·ªìi, h·∫πn ph·∫ßn kh√°c t√°m ti·∫øp üòâ\n","href":"/misc/tan-man-chuyen-tieng-anh-p2/","title":"T·∫£n m·∫°n: Chuy·ªán Ti·∫øng Anh (p2)"},{"content":"M·ªôt ng√†y ƒë·∫πp tr·ªùi (th·∫≠t ra tr·ªùi kh√¥ng ƒë·∫πp cho l·∫Øm, m√† ƒë·∫πp c≈©ng kh√¥ng ai ng·∫Øm), l∆∞·ªõt FB, coi youtube th·∫•y tr√†n ng·∫≠p nh·ªØng chia s·∫ª, b√¨nh lu·∫≠n v·ªÅ m·ªôt v·ª• vi·ªác l√†m d·∫≠y s√≥ng c·ªông ƒë·ªìng IELTS. S·ª± vi·ªác, tuy ƒë·ªçc v√†o th·∫•y k√¨ kh√¥i thi·ªát, nh∆∞ng c≈©ng ch·∫≥ng ·∫£nh h∆∞·ªüng nhi·ªÅu t·ªõi m√¨nh\u0026hellip; Duy c√≥ ƒëi·ªÅu l√†, t·ª± d∆∞ng th·∫•y ng∆∞·ªùi ta quan t√¢m nhi·ªÅu, k·∫ø t·ª± ng·∫´m nghƒ© v·ªÅ c√°i s·ª± h·ªçc ti·∫øng Anh c·ªßa b·∫£n th√¢n, k·∫ø th·∫•y h∆°i ch·ªôt d·∫° ch√∫t x√≠u. Ch·ªôt d·∫° l√† thi·ªát, ch·ª© kh√¥ng ph·∫£i khoe ng·∫ßm nha. Nh√¢n chuy·ªán ng∆∞·ªùi ta b√†n chuy·ªán IELTS, m√¨nh xin t·∫£n m·∫°n x√≠u v·ªÅ chuy·ªán ti·∫øng Anh x√≠u, nh∆∞ng kh√¥ng li√™n quan l·∫Øm t·ªõi ch·ªß ƒë·ªÅ hot hot kia. N√™n ai mu·ªën ƒë·ªçc tin v·ªÅ trend kia, th√¨ b·∫°n c√≥ th·ªÉ d·ª´ng l·∫°i ·ªü ƒë√¢y.\n\u0026hellip;\n1 V·ªõi t√¢m tr·∫°ng ph·∫•n kh·ªüi c·ªßa m·ªôt ƒë·ª©a h·ªçc sinh m·ªõi v·ª´a ƒë·∫≠u tr∆∞·ªùng chuy√™n, m√¨nh c·ª© m√£i h·ªçc To√°n trong h·ªçc k·ª≥ ƒë·∫ßu, v·ªõi hy v·ªçng tho√°t kh·ªèi ƒë√°y l·ªõp, v∆∞∆°n t·∫ßm b·∫£n th√¢n. M·∫•y m√¥n kh√°c th√¨ m√¨nh c·ª© theo c√°ch h·ªçc h·ªìi c·∫•p 2 m√† tri·ªÉn, t·ª©c l√† L√Ω \u0026amp; Ho√° th√¨ c≈©ng h·ªçc s∆° s∆°, c√≤n l·∫°i th√¨ c·ª© \u0026ldquo;h√†nh s·ª± t·∫°i thi√™n\u0026rdquo;. M√¨nh theo l·ªëi h·ªçc ·∫•y, cho t·ªõi khi thi h·ªçc k·ª≥ m·ªôt xong. ƒê√≥ l√† l·∫ßn ƒë·∫ßu ti√™n trong ƒë·ªùi m√¨nh c√≥ m√¥n b·ªã ƒëi·ªÉm ki·ªÉm tra d∆∞·ªõi trung b√¨nh: Anh vƒÉn. N·∫øu m√¨nh nh·ªõ kh√¥ng nh·∫ßm th√¨ ƒëi·ªÉm c·ªßa m√¨nh l√∫c ·∫•y l√† 3.1 / 10 (hay l√† t·∫ßm ƒë√¢u ƒë√≥, nh∆∞ng kh√¥ng c√≥ tr√™n 3.5). Sau ƒë·ª£t ƒë√≥, m√¨nh d·∫πp h·∫øt m·∫•y c√°i √Ω t∆∞·ªüng li√™n quan ƒë·∫øn thi h·ªçc sinh gi·ªèi v√† h·ªçc ƒë·ªôi tuy·ªÉn n√†y n·ªç. Ch·ªâ c·∫ßu tr·ªùi v√°i ph·∫≠t cho s·ªëng s√≥t qua 3 nƒÉm c·∫•p ba ·ªü tr∆∞·ªùng v√† thi ƒë·∫≠u ƒë·∫°i h·ªçc. Sang ƒë·∫øn h·ªçc k·ª≥ 2 th√¨ m√¨nh b·∫Øt ƒë·∫ßu c√†y l·∫•y l·∫°i g·ªëc g√°c ti·∫øng Anh\u0026hellip; Nh∆∞ng th·∫≠t bu·ªìn l√† ƒë·∫øn m·∫•y nƒÉm sau n·ªØa th√¨ v·ªën li·∫øng ti·∫øng Anh c·ªßa m√¨nh c≈©ng kh√¥ng kh√°c g√¨ nhi·ªÅu so v·ªõi th·ªùi gian c√†y b·ª´a n√†y.\nN√≥i ra c√≥ l·∫Ω v√†i ng∆∞·ªùi b·∫£o m√¨nh x√†o x·∫°o, ra v·∫ª, nh∆∞ng th·ª±c s·ª± l√† m√¨nh c·∫£m th·∫•y h∆°i x·∫•u h·ªï ch√∫t x√≠u v√¨ b·∫°n b√® c·∫•p 3 c·ªßa m√¨nh to√†n si√™u sao. ƒê·ª©a th√¨ ti·∫øng Anh qu·∫•t b·ª•p b·ª•p, ƒë·ª©a th√¨ m·ªü trung t√¢m Anh ng·ªØ, ƒë·ª©a th√¨ d·∫°y Nh·∫≠t ng·ªØ\u0026hellip; B·ªüi c√≥ nhi·ªÅu ng∆∞·ªùi nh√¨n v√†o PTNK th·∫•y c√≥ qu√° tr·ªùi ng∆∞·ªùi gi·ªèi, xong ng·∫ßm m·∫∑c ƒë·ªãnh m√¨nh c≈©ng gi·ªèi. ƒêi·ªÅu n√†y khi·∫øn m√¨nh c·∫£m th·∫•y r·∫•t kh√≥ ch·ªãu. Trong n·ªìi l·∫©u c√≥ mi·∫øng th·ªãt th√¨ c≈©ng c√≥ c·ªông rau ch·ªõ.\n2 Kho·∫£ng th·ªùi gian ƒë·∫°i h·ªçc l√† th·ªùi gian m√† m√¨nh c·∫£m th·∫•y ph√≠ ph·∫°m nh·∫•t. Ph·∫£i c·∫Øt nghƒ©a m·ªôt ch√∫t cho c√°c b·∫°n kh√¥ng hi·ªÉu l·∫ßm. Ph√≠ ph·∫°m ·ªü ƒë√¢y kh√¥ng ph·∫£i l√† th·∫≠t ph√≠ khi h·ªçc ƒë·∫°i h·ªçc, m√† c√≥ nghƒ©a l√† m√¨nh ƒë√£ kh√¥ng t·∫≠n d·ª•ng th·ªùi gian ƒë·ªÉ h·ªçc v√† trau d·ªìi b·∫£n th√¢n m√† ƒë·ªÉ n√≥ tr√¥i qua qu√° nhanh. N·∫øu c√≥ b·∫°n n√†o ƒëang h·ªçc ƒë·∫°i h·ªçc m√† t√¨nh c·ªù ƒë·ªçc ƒë∆∞·ª£c post n√†y th√¨ m√¨nh khuy√™n l√†:\n ·ªû ƒë·∫°i h·ªçc, b·∫°n ch∆°i tho·∫£i m√°i, tr·∫£i nghi·ªám tho·∫£i m√°i, t√°n g√°i cua trai tho·∫£i m√°i\u0026hellip; nh∆∞ng ƒë·ª´ng qu√™n h·ªçc. H·ªçc ·ªü ƒë√¢y l√† l√†m sao sau khi ra tr∆∞·ªùng b·∫°n t√≠ch lu·ªπ ƒë∆∞·ª£c th·ª© g√¨ ƒë√≥.  M√¨nh th√¨ c·ª© ti·∫øc n√πi n·ª•i l√† h·ªìi ƒë·∫°i h·ªçc kh√¥ng lo trau d·ªìi ngo·∫°i ng·ªØ. ƒê√°ng nh·∫Ω ra b√¢y gi·ªù, khi g·∫ßn 30 tu·ªïi üòû ng∆∞·ªùi ta ph·∫£i d√†nh th·ªùi gian cho nh·ªØng th·ª© tr√™n m·ª©c \u0026ldquo;ti√™u chu·∫©n th√¥ng th∆∞·ªùng\u0026rdquo;, th√¨ m√¨nh l·∫°i ph·∫£i l·ªç m·ªç ƒë·ªÉ \u0026ldquo;ƒë·∫°t ti√™u chu·∫©n\u0026rdquo;.\n3 M√¨nh qua Sing l√†m ƒë∆∞·ª£c 2 nƒÉm r·ªìi. Ti·∫øng Anh c√≥ ph·∫ßn kh·∫•m kh√° h∆°n, nh∆∞ng kh√¥ng ƒë√°ng k·ªÉ. N·∫øu b·∫°n n√†o ti·∫øng Anh m·ª©c trung b√¨nh kh√° v√† nghƒ© r·∫±ng \u0026ldquo;qua ƒë√¢y l√†m ƒë·ªÉ n√¢ng cao ti·∫øng Anh\u0026rdquo; (t·ª©c l√† ph√≥ m·∫∑c ho√†n to√†n cho m√¥i tr∆∞·ªùng s·ªëng) th√¨ m√¨nh nghƒ© b·∫°n n√™n suy nghƒ© l·∫°i m·ªôt ch√∫t. Khi ƒëi l√†m m·ªõi th·∫•y c√≥ ƒë·ªß th·ª© ph·∫£i h·ªçc, c√≥ m·ªõ th·ª© ph·∫£i quan t√¢m, t·ªõi m·ª©c m√¨nh th·∫•y 24h m·ªôt ng√†y l√† h∆°i √≠t. M√¨nh c√≤n mu·ªën h·ªçc ti·∫øng Hoa n·ªØa, ƒë·ªÉ giao ti·∫øp d·ªÖ d√†ng v·ªõi ng∆∞·ªùi b·∫£n ƒë·ªãa. Nh∆∞ng ti·∫øng Anh v·∫´n ch∆∞a ra ng√¥ ra khoai, c√≤n c√¥ng vi·ªác th√¨ c·ª© ch·ªìng ch·∫•t üòû. L√† k·ªπ s∆∞, ngo√†i Anh ng·ªØ, m√¨nh c√≤n ph·∫£i h·ªçc X√† ng·ªØ (Python), Ng·ªçc ng·ªØ (Ruby) n·ªØa\u0026hellip; (Python, Ruby l√† c√°c ng√¥n ng·ªØ l·∫≠p tr√¨nh - programming languages). V√† khi l√†m nhi·ªÅu, th·∫•y stressed, b·∫°n b·∫Øt ƒë·∫ßu nh·∫≠n ra b·∫°n ph·∫£i d√†nh m·ªôt ch√∫t √≠t th·ªùi gian trong ng√†y/tu·∫ßn ƒë·ªÉ relax, ƒë·ªÉ kh√¥ng b·ªã burned out. Cho n√™n qu·ªπ th·ªùi gian (t·ª±) h·ªçc c·ªßa b·∫°n s·∫Ω gi·∫£m b·ªõt ch√∫t n·ªØa. V√¨ v·∫≠y cho n√™n, n·∫øu b·∫°n trang b·ªã ƒë∆∞·ª£c c√°i g√¨ tr∆∞·ªõc th√¨ h√£y trang b·ªã ƒëi\u0026hellip;\n4 Trong m·ªôt ng√†y l√†m vi·ªác c·ªßa m√¨nh th√¨ th·ªùi gian n√≥i ti·∫øng Anh trong team k·ªÉ ra ch∆∞a t·ªõi 1 ti·∫øng ƒë·ªìng h·ªì n·ªØa. M√† ti·∫øng Anh c·ªßa t·ª•i developers th√¨ c≈©ng xoay quanh nhi√™u ƒë√≥ th·ª©.\nL√† m·ªôt developer, m√¨nh r·∫•t ƒë·ªìng t√¨nh v·ªõi √Ω ki·∫øn \u0026ldquo;ti·∫øng Anh ch·ªâ l√† c√¥ng c·ª•\u0026rdquo;. Nh∆∞ng vi·ªác c√≥ m·ªôt c√¥ng c·ª• t·ªët, hi·ªáu qu·∫£ l√† c·ª±c k·ª≥ quan tr·ªçng. Kh√¥ng gi·ªèi ti·∫øng Anh th√¨ c≈©ng kh√¥ng sao, nh∆∞ng gi·ªèi ti·∫øng Anh th√¨ b·∫°n s·∫Ω th√†nh \u0026ldquo;sao\u0026rdquo;. H∆°n n·ªØa, m√¨nh cho r·∫≥ng suy nghƒ© \u0026ldquo;v·ª´a ƒë·ªß l√† ok r·ªìi\u0026rdquo; c√≥ ph·∫ßn n√†o h∆°i thi·ªÉn c·∫≠n. ƒê·ªìng √Ω l√† b·∫°n c√≤n nhi·ªÅu m·ªëi b·∫≠n t√¢m kh√°c, nh∆∞ng m√¨nh nghƒ© n√™n nh·∫≠n th·ª©c r√µ l√† v·ª´a ƒë·ªß ·ªü hi·ªán t·∫°i hay v·ª´a ƒë·ªß cho t∆∞∆°ng lai. V√≠ d·ª• nh∆∞ v·ªõi c√¥ng vi·ªác th∆∞·ªùng ng√†y c·ªßa m√¨nh, th√¨ ti·∫øng Anh c≈©ng t·∫°m ƒë·ªß x√†i ƒë√≥. ƒêi h·ªçp (meeting) c≈©ng bi·∫øt ng∆∞·ªùi ta n√≥i g√¨, c≈©ng n√≥i cho ng∆∞·ªùi ta bi·∫øt √Ω c·ªßa m√¨nh. Nh∆∞ng b·∫£o m√¨nh ƒëi thuy·∫øt tr√¨nh, sharing n√†y n·ªç th√¨ th·∫≠t l√† t·ªôi cho ng∆∞·ªùi nghe.\n5 Nhi·ªÅu l·∫ßn coi youtube, th·∫•y anh n·ªç ch·ªã kia n√≥i ti·∫øng Anh l∆∞u lo√°t qu√°. Xem ph·∫ßn t·ª± b·∫°ch th√¨ th·∫•y ng∆∞·ªùi t·ª´ng h·ªçc NUS, ng∆∞·ªùi t·ª´ng l√†m ·ªü Sing, ch·∫≥ng h·∫°n. Xong m√¨nh nghƒ©, ·ªßa m√¨nh c≈©ng ƒëang l√†m ·ªü Sing n√®, m√† ti·∫øng Anh sao nh∆∞ h·∫°ch v·∫´y. So s√°nh v·∫≠y ƒë·ªÉ th·∫•y c√°i suy nghƒ© r·∫±ng ti·∫øng Anh c·ªßa ng∆∞·ªùi ta gi·ªèi v√¨ ng∆∞·ªùi ta l√†m ·ªü n∆∞·ªõc ngo√†i l√† kh√¥ng ch√≠nh x√°c l·∫Øm. D√π m√¥i tr∆∞·ªùng t·ªët sao ƒëi n·ªØa th√¨ c√°i c·ªët l√µi v·∫´n l√†, m√¨nh ph·∫£i h·ªçc.\n\u0026hellip;\n·ªú, th√¨ m√¨nh ƒëang than tr·ªùi than ƒë·∫•t ƒë√≥. Than cho m·∫•y ng∆∞·ªùi v√¥ t∆∞ l·ª± nghe ƒë·ªÉ t·ªânh l·∫°i ch√∫t. Than cho b·∫°n b√® m√† ti·∫øng Anh d·ªü nh∆∞ m√¨nh (ho·∫∑c d·ªü h∆°n) nghe ƒë·ªÉ take action.\n","href":"/misc/tan-man-chuyen-tieng-anh-p1/","title":"T·∫£n m·∫°n: Chuy·ªán Ti·∫øng Anh (p1)"},{"content":"","href":"/categories/tech/","title":"Tech"},{"content":" Whether you are a fan of Github, Gitlab, BitBucket, or any git-based repo hosting platform, I am sure you must be farmiliar with project labels.\nCategorizing (messy) project issues A common use case of project labels is to categorize project issues of a repo. For engineering discussion, we use Slack (or any alternative for instant messaging platform) only for quick discussions. Those usually end shortly. If such a discussion become lengthy, probably you used the wrong communication channel üòÄ? The rest (usually long discussions) which involve more effort to explain one\u0026rsquo;s points, we prefer to communicate via project issues.\nSo, project issues are used not only for bug reporting but also for any kinds of discussions within our team. One can just create an issue to point out a code smell in the project and propose an idea to refactor it. Or, if you are a maintainer of an open source project, you probably received more than one issue submitted to request for certain supports.\nNow, as you see, project issues become a bit messy with various types of issues floating around. To organize them, engineers usually use labels to indicate:\n The issue category (is it issue is a bug fix, or a feature request, or just a general discussion\u0026hellip;?) The related topics of an issue The status of an issue (is it in review, or being implemented/fixed?) The priority of an issue \u0026hellip;  Fig. 1. An issue reported in Fastlane repo with 3 labels tool:scan, tool:snapshot and type:feature\nLabels on merge requests For merge requests (MRs), we also use labels pretty much the same way we do with project issues. In our project, apart from the use cases above, labels also serve some CI/CD purposes.\nLabel-based configuration This is the main use case for our CI/CD. For example, a merge request to fix a regression issue should be prioritized in order to unblock the release that is going to be live. With the label regression set on the MR, we expedite the CI pipelines running against that change by allocating more CI resources (5 UI test jobs, instead of 3).\nAnother use case is the cherry-pick workflow in trunk based development when fixing regression issues. We sometimes face the problem in which an engineer raised an MR to fix a bug, got it merged and then realized that the change was not cherry-pickable due to conflicts. In this case, he/she had waited for CI pipelines to finish in around 40 minutes\u0026hellip; It was quite late to spot the cherry-pick issue (not to mention the time to address code review comments). To mitigate this, we added a job to detect cherry-pick conflicts on MRs that\u0026rsquo;s labelled either regression or need cherry-pick.\n\u0026hellip;\nLet me tell you a story about why we need label-based configuration. Sometime ago, we were migrating our project from Xcode 10 to Xcode 11. Due to many dependencies in the project, it is not something we could get done overnight. Migrating bit by bit seemed to be the right choice for us (and for other large-scale projects as well, I believe). We add extra jobs for Xcode 11 to bring visibility to the migration progress and spot issues as early as possible. The jobs we added are enabled to all pipelines running on protected branches and on merge requests. Engineers working on the migration could just check Xcode 11 related jobs to verify the compatibility in the pre-merge flow. Of course those jobs are allowed to fail (ie. whether they fail or not does not affect the pipeline status).\nProblems arised when engineers started to realized some newly added manual jobs. They, by instinct, triggered them. This wasted our CI resources and the jobs would fail eventually. Even worse, seeing those failures somehow triggered their \u0026ldquo;panic mode\u0026rdquo;. They asked us about the failures and it costed us more communication to explain that it was expected and everything was fine. We realized that the jobs we added for MRs only served dedicated engineers for the migration, but it caused more problems in the working process. This was like a bad UX.\nTherefore, we decided to slightly change the configuration:\n On protected branches: always enabled. On merge requests: disabled by default. They are only enabled when the label xcode11 is set.  This way, it saved our CI resources and communication.\nA/B testing in CI/CD Another example is when it comes to A/B testing in our CI/CD. There are some CI/CD features we enable by default, under certain conditions, to optimize our system. When there is any issue because of a CI/CD optimization, one can just force-disable it by labelling his/her merge request with a dedicated label - something like ci-\u0026lt;feature-name\u0026gt;::disabled.\nConclusion In this post, we\u0026rsquo;ve gone through the most common use case of project labels which is to categorize issues, discussions, merge requests, etc.. We also know some use cases in which project labels play an interesting roles in our CI/CD setup, to manipulate certain actions. Hope you could make good use of them.\n","href":"/tech/when-project-labels-are-not-just-to-categorize-things/","title":"When project labels are not just to categorize things"},{"content":"","href":"/tags/ci/","title":"ci"},{"content":" A while ago, when I heard the term \u0026ldquo;CI/CD\u0026rdquo;, I always thought of a dashboard to drag and drop, upload certificates and input the scheme\u0026hellip; blah blah. That\u0026rsquo;s all! And I was kinda believe that a good CI/CD platform must be like that: convenient, as few setups as possible. Now, I have a different viewpoint. What I very much expect in a CI/CD platform is the ability to customize workflow. This does not mean those drag-and-drop platforms are inadequate. It depends on the scale of your project and the problems you want to solve.\nIn this post, I will talk about those problems on a general level. Details about how to tackle each will be discussed later in the upcoming posts.\nA large code base In my project, there are many engineers contributing to a fairly large code base. How large is it? - you may wonder. Well, let\u0026rsquo;s imagine there are a lot of product features in the project. Each feature has its A/B testing logic, making our code base even bigger. Apart from product features, we also have engineering work. Some of them need A/B testing as well, in order to safely roll out to users. And of course, we do cover unit tests and UI tests for both features and engineering work. In addition to A/B testing, we have features toggles (as part of trunk-based development) which means more code than needed is added per feature.\nTherefore, our code base has been growing over time. With our project, it takes:\n $10_m$ for a clean build üòû $7_m$ to run all unit tests üòê $40_m$ to run all UI tests (using 3 simulators in parallel) üò±  Those are the required steps to run on CI against a change in a merge request. Doing a simple math and you will realize that a developer has to wait for nearly an hour to land his/her change on master (assume other checks such as approvals and code linting are already satisfied).\nWith such an increasingly large code base, CI/CD configuration is not just to make things work, but to make things work efficiently.\nBuild time iOS build time improvement is a classic problem of large code base projects. There are some tips to improve the project build time including:\n Changing some build settings Enabling/disabling some optimization flags Spotting code snippets that takes a long time to compile Modularizing code base to utilize build parallelism \u0026hellip;  Those approaches are not much related to CI/CD configuration. Some tips are suitable for local runs but not for CI/CD runs. For example, changing some optimization flags would reduce build time but it screws up code coverage generation. We have to alternate build settings for CI/CD in such cases.\nA tale of UI tests We are pretty proud of our UI tests. Not only do they cover a lot of features in the app but also they are very useful for feature development/bug fixes (especially when we want to simulate complicated workflows without Staging backend). However, the more tests we write, the longer time it takes to execute all test suites. Reducing the overall test execution time is definitely a CI/CD work that drag-and-drop is not capable of.\nA simple idea is to split UI tests and run them in parallel jobs. Then you need to answer the following questions:\n How to merge code coverage of those parallel jobs? How to split tests in a good way? You cannot split them in a way that one job takes $30_m$ to finish while the other takes only $10_m$. How to split build and test to 2 different jobs? This seems trivial but in iOS, it\u0026rsquo;s a bit troublesome. First, you need to know what in DerivedData that are needed to run tests, and pass them via job artifacts. With a large code base project, the build artifacts needed is really big (up to 2GB) and exceeds the artifacts limits set by your CI/CD platform. We will talk about how to tackle this problem in upcoming posts.  Another problem with UI tests is that they seem to be more unstable than unit tests. Dealing with unstable tests is not just iOS work, but also a CI/CD work. For example, you need to design your CI/CD pipelines so that it\u0026rsquo;s less vulnerable to unstable tests and the time it takes to retry (tests or jobs) is as fast as possible. And you need to track those unstable tests (not manually) so that you could revisit to investigate them.\nCI resources Making good use of CI resources is also a key to make our CI/CD system work at its best. When there are more available runners, try to use them. However, determining CI resources status is not always easy. It usually involves sending api requests to the CI/CD platform (for ex. Gitlab).\nAlso, when we allocate resources differently, the number of CI jobs are dynamic. How to configure that?\nA/B testing for CI/CD In our project, we not only have AB testing for features in the app, but also for CI/CD features. Changes related to CI/CD usually affects other engineers. I need to emphasize again that there are many engineers contributing to the project, not just 3-4 engineers. To avoid blocking others, we always think of a safe rollout for important CI/CD changes. If there is any unexpected issue that block others, we can just roll back the change at ease.\nA rollout config is just simply a yaml file (hosted somewhere), like this:\nname:\u0026#39;A feature\u0026#39;description:\u0026#39;Description of the feature\u0026#39;rollout:-if:\u0026#39;XCODE_VERSION\u0026#39;match:\u0026#39;11\u0026#39;then:2-if:\u0026#39;CI_COMMIT_REF_NAME\u0026#39;match:\u0026#39;(master|release)\u0026#39;then:4-default:3# üëà use this value in CI/CD code Automation In our project, we try to automate tasks/chores as much as possible. Those automated tasks are usually non-standard problems and, of course, are something we need to code on our own.\nConclusion With some use cases mentioned above, you can imagine that CI/CD work for iOS is not just integrating to CI/CD platform so that we can build and test our project. It\u0026rsquo;s not that simple, or your project is not complicated enough ü§î. It\u0026rsquo;s not just about a config dashboard or a config file\u0026hellip; To me, it requires more implementation code to get things done in an appropriate way. The advantage of building them instead of relying on a 3rd party platform support is that you have more control and can customize them based on your needs. And it\u0026rsquo;s sometimes fun.\n\u0026hellip;\nI know this post is a bit general, and lacks details (which you expect more). But I think it would be better if you have an overview first, and then we can dive into details later. So, for those who are interested in, stay tuned for the upcoming posts üòâ.\n","href":"/tech/when-cicd-config-is-not-just-a-file-or-a-dashboard/","title":"When iOS CI/CD config is not just a file or a dashboard"},{"content":"N·∫øu b·∫°n t∆∞·ªüng m√¨nh vi·∫øt nh·ªØng d√≤ng n√†y v√¨ m√¨nh l√† tay ch·∫°y b·ªô c·ª± ph√°ch, ho·∫∑c ch·ªâ ƒë∆°n gi·∫£n l√† m·ªôt tay chuy√™n ch·∫°y b·ªô, th√¨ b·∫°n nh·∫ßm r·ªìi. N·∫øu b·∫°n c·∫ßn kinh nghi·ªám ch·∫°y b·ªô th√¨ c√≥ th·ªÉ ping m√¨nh, m√¨nh s·∫Ω ch·ªâ cho b·∫°n\u0026hellip; c·∫ßn ph·∫£i ping ai üòÇ.\n1 M√¨nh x√°ch gi√†y ch·∫°y l·∫ßn ƒë·∫ßu ti√™n l√† nƒÉm 4 ƒë·∫°i h·ªçc. L√∫c ·∫•y ki·ªÉu nh∆∞ quy·∫øt t√¢m l·∫Øm, ƒë·ªãnh b·ª•ng s√°ng s·ªõm ng√†y h√¥m sau s·∫Ω d·∫≠y ch·∫°y. S√°ng ng√†y h√¥m sau ng·ªß d·∫≠y, tr·ªùi ƒë√£ l√™n cao. Nh∆∞ng v√¨ t·ª± h·ª©a v·ªõi l√≤ng ph·∫£i ch·∫°y n√™n m√¨nh ph·∫£i l·∫øt x√°c ra tr∆∞·ªùng ƒëua Ph√∫ Th·ªç, l√∫c ·∫•y ƒë√£ 11h. M√¨nh ch·∫°y gi·ªØa tr∆∞a n√≥ng, v·ª´a t·ª± tr√°ch b·∫£n th√¢n v√¨ c√°i √Ω t∆∞·ªüng ngu si n√†y. M·ªôt v√≤ng s√¢n Ph√∫ Th·ªç ƒë√≥ ch·ªâ c√≥ ~ 1.1km m√† nh∆∞ th·ªÉ con m·∫Øt m√¨nh b·ªã ƒë√°nh l·ª´a, ch·∫°y n√£y gi·ªù m√† c√≥ nhi√™u ƒë√¢y th√¥i ƒë√≥ h·∫£.\nƒê·∫øn 1\u0026frasl;3 s√¢n, m√¨nh nghe c√≥ ti·∫øng h√∫ xen l·∫´n ti·∫øng c∆∞·ªùi c·ªßa ƒë√°m h·ªçc sinh b√™n kia h√†ng r√†o. T·ª•i n√≥ ƒëang h·ªçc th·ªÉ d·ª•c b√™n nh√† thi ƒë·∫•u Ph√∫ Th·ªç. T∆∞·ªüng ƒë√¢u n√≥ c∆∞·ªùi ch·ªçc ai trong ƒë√°m t·ª•i n√≥, ai d√® nh√¨n m·∫•y c√°nh tay ch·ªâ qua m·∫•y song h√†ng r√†o m√¨nh m·ªõi bi·∫øt l√†\u0026hellip; t·ª•i n√≥ ƒëang c∆∞·ªùi m√¨nh. M√¨nh qu√™ qu√°, r√°ng ch·∫°y cho nhanh nh∆∞ng ch√¢n m·ªèi nh·ª´, b·ª•ng th·∫ßm r·ªßa \u0026ldquo;c√°i ƒë√°m kh√πng!\u0026rdquo;.\nSau n√†y m√¨nh c≈©ng lai rai ch·∫°y ·ªü ƒë√≥, nh∆∞ng bu·ªïi chi·ªÅu m√°t. V√† m∆∞·ªùi b·ªØa y m·ªôt, ƒë·ªÅu th·∫•y m·ªát qu√° tr·ªùi m·ªát. R·ªìi d·∫ßn d·∫ßn h·∫øt lai rai lu√¥n\u0026hellip; B·ªè ch·∫°y! Sau n√†y qua Sing m√¨nh m·ªõi \u0026ldquo;lai rai\u0026rdquo; ch·∫°y l·∫°i üòÇ. Ui chu choa, 4-5 nƒÉm ch·ª© ph·∫£i √≠t.\n2 X∆∞a kh√¥ng qu√° x∆∞a, m·ªói l·∫ßn ch·∫°y xong m√¨nh ƒë·ªÅu s·ªëng ·∫£o, upload l√™n Strava. Nh∆∞ng sau n√†y follow b·∫°n b√®, th·∫•y ng∆∞·ªùi ta ch·∫°y d·ªØ qu√° k·∫ø th·∫•y nh·ª•t ch√≠. Ng√≥ ng∆∞·ªùi ta th·∫•y t·ªëc ƒë·ªô ch·∫°y (pace) to√†n 5-6 ph√∫t/km, c√≤n m√¨nh\u0026hellip; b·ªì ch·∫°y b·ªì ƒëi, con s·ªë ra \u0026hellip; (th√¥i kh√¥ng share). Xong gi·ªù xo√° lu√¥n c√°i app ƒë√≥ r·ªìi. B·ªõt s√¢n si, b·ªõt kh·ªï!\n3 M√¨nh th·∫•y r·∫•t n·ªÉ m·∫•y b·∫°n enjoy ch·∫°y b·ªô. Ri√™ng b·∫£n th√¢n m√¨nh, tr∆∞·ªõc khi ch·∫°y th√¨ th·∫•y l∆∞·ªùi, khi ch·∫°y th√¨ th·∫•y m·ªát, sau khi ch·∫°y th√¨ m·ªõi th·∫•y n·ªói th·ªëng kh·ªï qua ƒëi. √Ä th·∫≠t ra m√¨nh c≈©ng h∆°i n√≥i qu√° ch√∫t x√≠u, nh∆∞ng ph·∫£i th·ª´a nh·∫≠n l√† m√¨nh kh√¥ng th√≠ch ch·∫°y. N·∫øu ƒë∆∞·ª£c ch·ªçn ch·∫°y b·ªô v√† m·ªôt m√¥n th·ªÉ thao kh√°c th√¨ kh·∫£ nƒÉng cao l√† m√¨nh s·∫Ω ch·ªçn m√¥n th·ªÉ thao kia.\n4 Ph·∫£i c√¥ng nh·∫≠n b√™n Sing n√†y si√™ng th·ªÉ d·ª•c th·ªÉ dao. M√¨nh ch·∫°y ch·ªó c√°i ƒë∆∞·ªùng b·ªù k√® kia, th·∫•y gi√† tr·∫ª, con n√≠t con n√¥i c≈©ng ch·∫°y nhi·ªÅu l·∫Øm. Gi·ªù n√†o c≈©ng th·∫•y c√≥ ng∆∞·ªùi ch·∫°y. Con n√≠t th√¨ ch·ªß y·∫øu l√† con trai, m√† kh√¥ng ph·∫£i nh∆∞ ch·∫°y n√¥ ƒë√πa trong c√¥ng vi√™n m√† ch·∫°y thi·ªát. Nhi·ªÅu √¥ng gi√† ch·∫°y kho·∫ª th√¥i r·ªìi. Ng∆∞·ªùi ta ch·∫°y nh√¨n r·∫•t l√† th·∫ßn th√°i, c√≤n m√¨nh ch·∫°y th√¨ nh√¨n r·∫•t l√† ƒëau kh·ªï. B·ªüi m·ªõi th·∫•y b√™n n√†y th·∫•y ng∆∞·ªùi ta body r·∫•t l√† fit (c·∫£ thanh ni√™n, trung ni√™n l·∫´n l√£o ni√™n), √≠t th·∫•y tr∆∞·ªùng h·ª£p b√©o ph√¨.\n5 L√†m gi√†u kh√¥ng kh√≥. ·ª™m, qu·∫£ th·∫≠t v·∫≠y, b·∫°n ch·ªâ c·∫ßn l√†m b·∫°n v·ªõi nh·ªØng ng∆∞·ªùi v·ª´a gi√†u v·ª´a th√≠ch th·ª≠ th√°ch (challenges) üòÜ. M√¨nh c√≥ √¥ng anh n·ªç m·∫ßn k·ªπ s∆∞ c≈©ng b√™n Sing, l∆∞∆°ng th√°ng nghe ƒë√¢u c≈©ng ƒë∆∞·ª£c l·∫Øm. M·ªôt ng√†y ƒë·∫πp tr·ªùi, sau khi ch√©m gi√≥ ƒë·ªß th·ª© v√† c√≥ topic g√¨ ƒë√≥ li√™n quan ƒë·∫øn ch·∫°y b·ªô, xong ·ªïng ra th·ª≠ th√°ch ch·∫°y m·ªói ng√†y √≠t nh·∫•t 3 c√¢y s·ªë (tr·ª´ ch·ªß nh·∫≠t), n·∫øu b·ªè l·ª° bu·ªïi n√†o th√¨ ƒë√≥ng X ƒë√¥ la (xin gi·∫•u gi√° tr·ªã c·ªßa X). Sao m√† ch·∫°y n·ªïi m·ªói ng√†y ü§î, l√∫c ·∫•y Sing hay m∆∞a bu·ªïi chi·ªÅu n·ªØa - m√¨nh nghƒ©. Nh∆∞ng v√¨ X ƒë√¥ la m·ªói l·∫ßn, m√¨nh th·ª≠ tr·∫£ gi√° v√† ch·ªët k√®o l√† tu·∫ßn 3 bu·ªïi, m·ªói bu·ªïi b·ªè th√¨ ƒë√≥ng 2X ƒë√¥, th·ªùi h·∫°n 2 tu·∫ßn\u0026hellip;\nChuy·ªán nh·ªè, kh√¥ng th√†nh v·∫•n ƒë·ªÅ. Th·∫≠t ra kh√¥ng v·∫•n ƒë·ªÅ nh∆∞ng v·∫•n ƒë·ªÅ kh√¥ng ƒë√≥ :)). L√∫c ch·∫•p nh·∫≠n th√°ch th·ª©c m√¨nh qu√™n xem l·∫°i c√°i th·ªÉ ch·∫•t y·∫øu ·ªõt c·ªßa m√¨nh üòÖ. V·ªõi l·∫°i n·∫øu s·∫Øp x·∫øp l·ªãch ch·∫°y gi√£n c√°ch trong tu·∫ßn th√¨ 1 ng√†y ch·∫°y r∆°i v√†o cu·ªëi tu·∫ßn, 2 ng√†y ch·∫°y r∆°i v√†o ng√†y l√†m vi·ªác. 7g m·∫ßn xong, ch·∫°y v·ªõi c√°i b·ª•ng ƒë√≥i th√¨ kh√¥ng ·ªïn. Ch·∫°y v·ªÅ ƒÉn th√¨ tr·ªÖ qu√°. Th·∫ø l√† m√¨nh quy·∫øt ƒë·ªãnh ƒÉn xong r·ªìi ch·∫°y. M√† ch·∫°y v·ªõi c√°i b·ª•ng no th√¨ c≈©ng kh√¥ng ·ªïn. Th√¥i th√¨ m√¨nh ƒë·ªïi gi·ªù ƒÉn sang 6g. ƒÇn xong ngh·ªâ ti·∫øng ƒë·ªìng h·ªì r·ªìi ch·∫°y. √Äh hok, ƒÉn xong m·∫ßn vi·ªác ti·∫øng ƒë·ªìng h·ªì r·ªìi ch·∫°y.\nHai tu·∫ßn ƒë·∫ßu xong tr√≥t l·ªçt. C·∫£ hai ƒë·ªÅu kh√¥ng m·∫•t ƒë·ªìng b·∫°c n√†o. M√¨nh ch·∫°y c≈©ng hƒÉng l·∫Øm, th√≠ch l√†m h∆°n m·ª©c minimum n√™n tu·∫ßn x√°ch gi√†y ch·∫°y c≈©ng 4-5 l·∫ßn c∆°, m·ªói l·∫ßn ƒë·ªÅu r√°ng 4-5km, l√¢u l√¢u th√¨ 3km ƒë·ªÉ d∆∞·ª°ng s·ª©c.\nXong 2 th·∫±ng ch∆°i th√™m k√®o n·ªØa l√† trong 2 tu·∫ßn k·∫ø ti·∫øp, ch·∫°y tu·∫ßn 4 l·∫ßn, m·ªói l·∫ßn b·ªè n·ªôp 4X ƒë√¥ la. Cu·ªëi c√πng m√¨nh c≈©ng c√≥ ti·ªÅn üí∞. C√¥ng vi·ªác ng·ªìi kh√¥ng ƒë·∫øm ti·ªÅn l√† c√≥ th·∫≠t c√°c b·∫°n ·∫° - l√∫c ƒë·∫•y m√¨nh nghƒ© v·∫≠y. M√† gi·ªù ng·∫´m l·∫°i th√¨ m√¨nh c≈©ng ph·∫£i ch·∫°y h·ªôc x√¨ d·∫ßu m·ªõi c√≥. Ai ƒë·ªçc kh√∫c tr√™n m√† t∆∞·ªüng b·ªü nh∆∞ m√¨nh v·ªÅ c√°i √Ω t∆∞·ªüng ki·∫øm ti·ªÅn z·∫≠y th√¨ d·∫πp ƒëi hen. Mu·ªën ƒÉn th√¨ lƒÉn v√†o b·∫øp nh√°!\nNg∆∞·ªùi ta b·∫£o c·∫ßn 21 ng√†y th·ª±c hi·ªán li√™n ti·∫øp ƒë·ªÉ t·∫°o th√≥i quen. Nh∆∞ tr∆∞·ªùng h·ª£p n√†y h·ªïng l·∫Ω m√¨nh x√°ch gi√†y ch·∫°y 21 ng√†y li√™n t·ª•c n√™ ta. N·∫øu 21 ng√†y t·ªïng c·ªông, ng√†y c√°ch ng√†y th√¨ c√≥ ƒë∆∞·ª£c t√≠nh h√¥ng nh·ªâ. Nay 4 tu·∫ßn, t√≠nh ra ng√≥t ngh√©t 16 b·ªØa r·ªìi.\n6 Nh∆∞ m·∫•y b√†i vi·∫øt t·∫£n m·∫°n tr∆∞·ªõc, m·ª•c cu·ªëi c√πng d√†nh ri√™ng cho \u0026ldquo;c√¥ Vy\u0026rdquo; (nCov). Th·∫≠t l√† kh√¥ng ngoa khi n√≥i r·∫±ng c√¥ l√† ng∆∞·ªùi ƒë√†n b√† quy·ªÅn l·ª±c nh·∫•t. Ch·ªâ trong c√≥ 1-2 th√°ng m√† c√¥ x√°o tr·ªôn cu·ªôc s·ªëng c·ªßa kh√¥ng bi·∫øt bao nhi√™u ng∆∞·ªùi. C≈©ng v√¨ m√¨nh ng·∫°i c√¥ n√™n m·∫ßn ·ªü nh√†, nguy√™n ng√†y m·ªçc r·ªÖ ·ªü nh√† c·∫£m th·∫•y kh√≥ ch·ªãu n√™n t·ªëi ph·∫£i mang gi√†y l√™n v√† ƒëich·∫°y. √Ä m√† ai tr·ªÅ m√¥i b·∫£o \u0026ldquo;th·∫±ng n√†y c√≥ d·ªãch m·ªõi lo ch·∫°y\u0026rdquo; th√¨ t·ªôi cho m√¨nh qu√°, m√πng 1 t·∫øt d∆∞∆°ng m√¨nh ƒë√£ x√°ch gi√†y ch·∫°y, ƒë·ªãnh b·ª•ng l√† nƒÉm m·ªõi th·∫≠t nhi·ªÅu s·ª©c kho·∫ª. Ai d√® b·ªã ph·∫£n dame, b·ªã c√¥ Vy ph√°. ·ªú m√† c≈©ng nh·ªù c√¥ m√† m√¨nh m·ªõi r·∫£nh vi·∫øt b√†i n√†y ƒë·ªÉ gi·∫øt th·ªùi gian ƒë√¢y.\n\u0026hellip;\nChi·ªÅu nay tr·ªùi m∆∞a dai d·∫≥ng qu√°, nay m√† m√¨nh kh√¥ng ch·∫°y l√† m·∫•t ti·ªÅn ƒë√¢y ü§¶‚Äç‚ôÇ. Ch·∫πp!\n","href":"/misc/random-thoughts-on-running/","title":"T·∫£n m·∫°n: Chuy·ªán ch·∫°y b·ªô"},{"content":"0 Ngo√†i l·ªÅ. ƒê√°ng nh·∫Ω ra b·∫°n ƒëang xem 1 c√°i vlog, ho·∫∑c nghe ƒëo·∫°n audio podcast thay v√¨ ph·∫£i ƒë·ªçc b√†i vi·∫øt n√†y. M√¨nh c√≥ th·ª≠ record audio ƒëo·∫°n intro b√†i vi·∫øt r·ªìi nghe th·ª≠ v√† th·∫•y n√≥ fail to√†n t·∫≠p. Ch·ªâ c√≥ thu c√¢u \u0026ldquo;Hiii\u0026hellip; Ch√†o m·ª´ng c√°c b·∫°n ƒë√£ ƒë·∫øn v·ªõi Thuy√™n\u0026rsquo;s corner\u0026rdquo;, r·ªìi \u0026ldquo;Welcome to Chris\u0026rsquo;s corner\u0026rdquo; th√¥i m√† l·∫ßn n√†o nghe c≈©ng ch·∫≥ng ∆∞ng tai. Xong k·∫ø m√¨nh v√≤ng l√™n youtube coi ng∆∞·ªùi ta m·∫ßn sao. Coi th·∫•y content hay qu√°, √¢m thanh √°nh s√°ng lunh linh qu√°, k·∫ø d·∫πp b√† √Ω ƒë·ªãnh m·∫ßn podcast/vlog üòê.\n1 Ng∆∞·ªùi ta b·∫£o \u0026ldquo;h√£y l·∫•y trai du h·ªçc sinh, v√¨ t·ª•i n√≥ bi·∫øt n·∫•u ƒÉn\u0026rdquo;. C√¢u n√†y n√≥i ph·∫ßn n√†o ƒë√∫ng. √Ä m√† qu√™n, m√¨nh h·ªïng ph·∫£i du h·ªçc sinh ü§∑‚Äç‚ôÇ, ai s·ª≠a gi√πm c√¢u n√†y ƒë·ªÉ bao g·ªìm c·∫£ m√¨nh coi\u0026hellip; M√¨nh nghƒ© r·∫±ng d√π l√† du h·ªçc sinh hay ng∆∞·ªùi ƒëi l√†m, bi·∫øt n·∫•u m·ªôt v√†i m√≥n c≈©ng l√† ƒëi·ªÅu c·∫ßn thi·∫øt. M·∫•y b·∫°n du h·ªçc sinh (ƒë·∫∑c bi·ªát l√† ·ªü c√°c n∆∞·ªõc √Çu - √öc - M·ªπ) th√¨ c√≥ l·∫Ω n·∫•u nhi·ªÅu h∆°n. C√≤n ng∆∞·ªùi ƒëi l√†m nh∆∞ m√¨nh th√¨ ch·∫Øc h·ªèk m·∫•y khi n·∫•u ƒë√¢u, ƒëi m·∫ßn h·∫øt th·ªùi gian r·ªìi. Ch·ªâ c√≥ r·∫£nh r·ªói n·∫•u cu·ªëi tu·∫ßn th√¥i. √Çu n·∫•u l√† ƒë·ªÉ relax üòá, v√† m·ªôt ph·∫ßn l√† v√¨ ng√°n ƒë·ªì ƒÉn ng∆∞·ªùi ta b√°n ·ªü food court th√¥i ch·ª© m√¨nh th·∫•y n·∫•u c≈©ng h·ªèk ti·∫øt ki·ªám h∆°n bao nhi√™u.\n2 M√¨nh c√≥ subscribe k√™nh youtube Yes Ryan c·ªßa m·ªôt anh du h·ªçc sinh √öc. (G·ªçi ƒë·∫°i l√† anh v·∫≠y ch·ª© m√¨nh c≈©ng ch·∫≥ng bi·∫øt ai l·ªõn tu·ªïi h∆°n ai, c≈©ng kh√¥ng quan tr·ªçng l·∫Øm). C√≥ l·∫ßn m√¨nh xem 1 vlog c·ªßa ·∫£nh v·ªÅ vi·ªác v√†o b·∫øp l√†m c√°nh g√† chi√™n n∆∞·ªõc m·∫Øm. Coi xong th·∫•y sao ·∫£nh n·∫•u c√≥ v·∫ª ƒë∆°n gi·∫£n v·∫≠y ta. C√≤n m√¨nh n·∫•u th√¨ c·∫ßu k·ª≥ qu√° cha lu√¥n. V√≠ nh∆∞ chuy·ªán n·∫•u c∆°m, x∆∞a gi·ªù m√¨nh ƒë·ªÅu vo g·∫°o 2 l·∫ßn, r·ªìi ƒë·ªï n∆∞·ªõc v√†o n·∫•u (t·ªïng c·ªông l√† 3 l·∫ßn ƒë·ªï n∆∞·ªõc). H·ªìi nh·ªè c√≤n hay ƒëong n∆∞·ªõc b·∫±ng l√≥ng tay n·ªØa, canh sao m·∫∑t m∆∞·ªõc c√°ch l·ªõp g·∫°o kho·∫£ng 1 l√≥ng tay l√† ok. Nay coi clip kia, th·∫•y ·∫£nh ƒë·ªï n∆∞·ªõc v√†o 1 l·∫ßn duy nh·∫•t r·ªìi b·∫Øt l√™n, l√†m m√¨nh c≈©ng h∆°i b·∫•t ng·ªù v√¨ ƒë√≥ l√† l·∫ßn ƒë·∫ßu ti√™n m√¨nh th·∫•y c√≥ ng∆∞·ªùi kh√¥ng vo g·∫°o khi n·∫•u. K·∫ø b·∫°n bi·∫øt sao h√¥ng, gi·ªù m√¨nh c≈©ng n·∫•u y nh∆∞ v·∫≠y ƒë√≥, cho n√≥ l·∫π, kh·ªèi m·∫Øc c√¥ng vo üòÅ.\n3 H·ªìi x∆∞a ·ªü chung ph√≤ng v·ªõi th·∫±ng b·∫°n (gi·ªù n√≥ qua Canada r·ªìi), cu·ªëi tu·∫ßn hay n·∫•u n∆∞·ªõng. Th∆∞·ªùng th√¨ 2 th·∫±ng ƒëi ch·ª£ chung (·ªü c√°i ch·ª£ ∆∞·ªõt - wet market - ngay d∆∞·ªõi nh√†). M√¨nh th∆∞·ªùng n·∫•u m√≥n ch√≠nh, h·∫Øn n·∫•u m√≥n canh, xong m·ªôt ƒë·ª©a n·ªØa chung nh√† th√¨ r·ª≠a ch√©n üòÖ. M·ªói l·∫ßn ƒëi ch·ª£ ho·∫∑c n·∫•u l√† m√¨nh hay c√†m r√†m h·∫Øn khi h·∫Øn ƒë·ªÅ xu·∫•t nh·ªØng √Ω t∆∞·ªüng ki·ªÉu nh∆∞ mix A v·ªõi B, C v·ªõi D. N√≥ b·∫£o \u0026ldquo;nh√† tui c√°i g√¨ c≈©ng n·∫•u ƒë∆∞·ª£c v·ªõi nhau\u0026rdquo;. C√≤n m√¨nh th√¨ r·∫•t nguy√™n t·∫Øc \u0026ldquo;A ph·∫£i n·∫•u v·ªõi Z\u0026rdquo;, \u0026ldquo;m√πi c·ªßa C v√† D kh√¥ng c√≥ ƒëi chung ƒë∆∞·ª£c\u0026rdquo;. M·ªói l·∫ßn n√≥ c√£i l√† m√¨nh c·ª© l·∫•y c√°i c√¢u b√≠ truy·ªÅn c·ªßa √¥ng b√† ra m√† gi√°ng xu·ªëng n√≥ \u0026ldquo;ƒë√∫ng l√† Qu·∫£ng Nam hay c√£i!\u0026rdquo; (c√¢u g·ªëc: \u0026ldquo;Qu·∫£ng Nam hay c√£i, Qu·∫£ng Ng√£i hay lo\u0026rdquo;)\u0026hellip; Thi·ªát t√¨nh, g√¨ ch·ª© n·∫•u ƒÉn th√¨ m√¨nh r·∫•t b·∫£o th·ªß, kh√¥ng c√≥ s√°ng t·∫°o.\n4 Th·∫≠t ra h·ªïng ph·∫£i m√¨nh mu·ªën b·∫£o th·ªß z·∫≠y ƒë√¢u. Ch·∫≥ng qua m√¨nh ch·ªâ mu·ªën n·∫•u cho ƒë√∫ng v·ªã hay ƒÉn ·ªü qu√™ nh√† th√¥i. N·∫øu ai t·ª´ng ƒë·ªçc \u0026ldquo;Ng∆∞·ªùi Qu·∫£ng ƒëi ƒÉn m√¨ Qu·∫£ng\u0026rdquo; c·ªßa Nguy·ªÖn Nh·∫≠t √Ånh th√¨ s·∫Ω bi·∫øt. Ng∆∞·ªùi ta ƒëi ƒÉn m√¨ Qu·∫£ng kh√¥ng ph·∫£i ƒë∆°n thu·∫ßn l√† ƒÉn cho ngon mi·ªáng, m√† c√≤n l√† ƒëi t√¨m m·ªôt ch√∫t d∆∞ v·ªã c·ªßa qu√™ h∆∞∆°ng. Ph·∫£i c√≥ dƒ©a rau s·ªëng, ph·∫£i c√≥ mi·∫øng b√°nh tr√°ng, ch√©n ·ªõt t·ªèi, th√¨ ng∆∞·ªùi ta ƒÉn m·ªõi th·∫•y c√°i ch·∫•t Qu·∫£ng trong t·ª´ng c·ªông m√¨, s·ªõ th·ªãt.\nM√¨nh n·∫•u ƒÉn c≈©ng v·∫≠y. ƒÇn th√¨ h·ªïng bao nhi√™u, nh∆∞ng c≈©ng r√°ng n·∫•u cho n√≥ c√¥ng phu, ƒë·ªÉ c·∫£m nh·∫≠n c√°i v·ªã c·ªßa qu√™ h∆∞∆°ng ƒëang ch·∫£y trong th·ª±c qu·∫£n, ƒë·ªÉ nh∆∞ th·ªÉ m√¨nh ƒëang ·ªü qu√™. B·ªüi v·∫≠y, n·∫•u n∆∞·ªõc b√∫n gi√≤ ph·∫£i d·∫≠y m√πi s·∫£, n·∫•u canh b√≠ ƒëao ph·∫£i c√≥ c·ªông h√†nh ho·∫∑c ng√≤ r√≠, lu·ªôc dƒ©a rau th√¨ ph·∫£i c√≥ n∆∞·ªõc m·∫Øm ·ªõt t·ªèi ƒë·ªÉ ch·∫•m.\n(√Ä th·∫≠t ra m·ªôt ph·∫ßn n·∫•u c√¥ng phu l√† ƒë·ªÉ up h√¨nh instagram cho n√≥ ƒë·∫πp üòÖ).\n5 N·∫•u th√¨ th√≠ch, c√≤n d·ªçn d·∫πp sau khi n·∫•u/ƒÉn th√¨ m·ªát. C·ª° 3 th√°ng tr∆∞·ªõc m√¨nh c√≥ n·∫•u b·ªØa tr∆∞a mang l√™n c√¥ng ty. Th∆∞·ªùng th√¨ m√¨nh th·ª©c d·∫≠y bu·ªïi s√°ng, n·∫•u xong th√¨ ƒë√≥ng g√≥i v√†o c√†-m√®n. ƒÇn s√°ng xong th·∫•y ƒë·ªëng n·ªìi ni√™u son ch·∫£o k·∫ø mu·ªën ch·ªçi th√πng r√°c ƒë·ªÉ kh·ªèi r·ª≠a\u0026hellip; M√¨nh ƒëang ·ªü chung v·ªõi m·ªôt gia ƒë√¨nh kia. V√¨ m√¨nh l√∫c n√†o c≈©ng v·ªÅ cu·ªëi c√πng n√™n m·ªói bu·ªïi s√°ng sau khi n·∫•u xong l√† m√¨nh ƒë·ªÅu d·ªçn d·∫πp, ch·ª© kh√¥ng b√†y ra ƒë·ªÉ t·ªëi r·ª≠a ƒë∆∞·ª£c. D·∫´u cho ng∆∞·ªùi kh√°c ch·∫•p nh·∫≠n th√¨ m√¨nh c≈©ng kh√¥ng ch·ªãu ƒë∆∞·ª£c. ƒêang code m√† nghƒ© t·ªõi m·∫•y c√°i ch·∫£o d√≠nh d·∫ßu m·ª° ·ªü nh√†, sao code ƒë∆∞·ª£c! B·ªüi c·ª±c qu√° n√™n m√¨nh d·∫πp c√°i √Ω t∆∞·ªüng ƒë√≥, ƒë·ªÉ d√†nh th·ªùi gian\u0026hellip; ng·ªß üò¥.\n6 D·∫°o n√†y v√¨ d·ªãch c√¥-v√≠ch (COVID-19) n√™n m√¨nh to√†n m·∫ßn t·ª´ xa (·ªü nh√†). M√¨nh c≈©ng ch·∫≥ng t·ªõi lui m·∫•y c√°i food court ƒë·ªÉ ƒÉn n·ªØa n√™n c≈©ng ng√†y 3 b·ªØa t·ª± n·∫•u. M·ªôt hai tu·∫ßn ƒë·∫ßu m√¨nh th·∫•y th·∫≠t l√† yomost v√¨ m√¨nh t·ª± n·∫•u, thi tri·ªÉn bi·∫øt bao nhi√™u c√¥ng th·ª©c. Sang tu·∫ßn th·ª© ba th√¨ m√¨nh b·∫Øt ƒë·∫ßu\u0026hellip; l√†m bi·∫øng. C·ª© dƒÉm ba ng√†y th√¨ n·∫•u ƒë√†ng ho√†ng m·ªôt b·ªØa, m·∫•y b·ªØa c√≤n l·∫°i c·ª© phƒÉng ƒë·∫°i\u0026hellip; Nh∆∞ bu·ªïi tr∆∞a m·∫•y ng√†y trong tu·∫ßn th√¨ c≈©ng r√°ng canh sao cho n·∫•u, xong ƒÉn, xong d·ªçn d·∫πp trong kho·∫£ng m·ªôt ti·∫øng ƒë·ªìng h·ªì, ƒë·ªÉ c√≤n m·∫ßn vi·ªác n·ªØa ch·ªõ\u0026hellip; H√¥m b·ªØa ng·ª±a b√†, bu·ªïi tr∆∞a m√¨nh chi√™n ram (t·ª©c ch·∫£ gi√≤) ƒÉn. Ai d√¢n Qu·∫£ng Ng√£i th√¨ s·∫Ω bi·∫øt th∆∞·ªùng ng∆∞·ªùi ta g√≥i ram r·ªìi chi√™n, ho·∫∑c m·ªôt ng∆∞·ªùi g√≥i m·ªôt ng∆∞·ªùi chi√™n. M√¨nh b·∫≠t mode si√™u t·ªëc - ƒëa nhi·ªám v·ª•, m·∫Øt canh ch·ª´ng m·∫•y cu·ªën ƒëang chi√™n, tay v·ª´a tr·ªü qua tr·ªü l·∫°i v·ª´a g√≥i cu·ªën m·ªõi. Ho√†n th√†nh ƒë√¢u trong 10 ph√∫t ƒë·ªìng h·ªì üòÇ. Tuy ƒë·ªô th·∫©m m·ªπ kh√¥ng ƒë∆∞·ª£c nh∆∞ mong ƒë·ª£i, nh∆∞ng ch·∫•t l∆∞·ª£ng th√¨ v·∫´n ok\u0026hellip;\nPh·∫£i m√† h·ªìi t·∫øt ·ªü nh√† lu√¥n th√¨ c·ª© t·ªõi b·ªØa c√≥ m√≥n ngon ƒÉn r·ªìi\u0026hellip; M√¨nh ch·∫≥ng mong g√¨ h∆°n, ch·ªâ mong con c√¥-r·ªë-n√† n√≥ b·ªã xo√° s·ªï, ƒë·ªÉ cu·ªôc s·ªëng ƒë√¢u l·∫°i v√†o ƒë√≥.\n","href":"/misc/random-thoughts-on-cooking/","title":"T·∫£n m·∫°n: Chuy·ªán n·∫•u ƒÉn"},{"content":"L√† m·ªôt k·ªπ s∆∞ c√¥ng ngh·ªá (software engineer), ·∫Øt h·∫≥n ai c≈©ng ƒë√£ t·ª´ng üòí, ƒëang üòê, v√† s·∫Ω üòü ph·∫£i vi·∫øt nh·ªØng t√†i li·ªáu k·ªπ thu·∫≠t (technical docs) ph·ª•c v·ª• cho c√¥ng vi·ªác. Trong b√†i vi·∫øt n√†y, m√¨nh s·∫Ω t√¢m t√¨nh c√πng b·∫°n nh·ªØng suy nghƒ© c√° nh√¢n v·ªÅ vi·ªác vi·∫øt l√°ch li√™n quan ƒë·∫øn c√¥ng vi·ªác c·ªßa m·ªôt k·ªπ s∆∞.\n1 Th·ª© nh·∫•t, t·∫°i sao k·ªπ s∆∞ c·∫ßn ph·∫£i vi·∫øt l√°ch?\n\u0026ldquo;M√¨nh th√≠ch th√¨ m√¨nh vi·∫øt th√¥i!\u0026rdquo;. Ai n√≥i ƒë∆∞·ª£c c√¢u n√†y cho 10 ƒëi·ªÉm v·ªÅ ch·ªó li·ªÅn. N·∫øu b·∫°n n√≥i \u0026ldquo;th√≠ch vi·∫øt blog\u0026rdquo; th√¨ m√¨nh s·∫Ω g·∫≠t ƒë·∫ßu t·∫•m t·∫Øc khen, c√≤n n·∫øu b·∫°n n√≥i l√† th√≠ch vi·∫øt technical docs th√¨ h·∫≥n b·∫°n ƒë√£ ·ªü m·ªôt ƒë·∫≥ng c·∫•p n√†o ƒë√≥ kh√°c (m√¨nh) r·ªìi.\nVi·∫øt, n√≥i chung, l√† m·ªôt h√¨nh th·ª©c giao ti·∫øp, truy·ªÅn ƒë·∫°t th√¥ng tin. Vi·∫øt technical docs l√† ƒë·ªÉ truy·ªÅn ƒë·∫°t th√¥ng tin v·ªÅ m·ªôt ch·ªß ƒë·ªÅ k·ªπ thu·∫≠t n√†o ƒë√≥. Dƒ© nhi√™n c√≤n nhi·ªÅu h√¨nh th·ª©c truy·ªÅn ƒë·∫°t th√¥ng tin kh√°c nh∆∞ thuy·∫øt tr√¨nh, ƒë·ªì ho·∫° th√¥ng tin (infographic), m·∫ßn Vlog\u0026hellip; Nh∆∞ng h√¨nh th·ª©c vi·∫øt (t·ª©c, d∆∞·ªõi d·∫°ng vƒÉn b·∫£n) t·ªè ra r·∫•t th√¥ng d·ª•ng trong c√¥ng vi·ªác c·ªßa k·ªπ s∆∞, b·ªüi:\n C√≥ t√≠nh t√°i s·ª≠ d·ª•ng cao. C√≥ th·ªÉ d·ªÖ d√†ng reference ƒë·∫øn (c√≤n l·ªùi n√≥i th√¨ gi√≥ bay m√†). Th·∫≠t ra ƒë√¢y l√† h·ªá qu·∫£ c·ªßa t√≠nh t√°i s·ª≠ d·ª•ng. C√≥ th·ªÉ ch·ªânh s·ª≠a theo th·ªùi gian (n·∫øu c·∫ßn thi·∫øt). So v·ªõi thuy·∫øt tr√¨nh v√† Vlog, th√¨ ƒë√¢y qu·∫£ l√† m·ªôt l·ª£i th·∫ø l·ªõn. \u0026hellip;  2 Khi m√¨nh n√≥i v·ªõi s·∫øp v√† ƒë·ªìng nghi·ªáp r·∫±ng m√¨nh th√≠ch vi·∫øt, c√¢u n√†y c·∫Øt nghƒ©a ra nh∆∞ sau:\n M√¨nh th√≠ch chia s·∫ª √Ω t∆∞·ªüng, th√¥ng tin, v√† suy nghƒ© v·ªõi ng∆∞·ªùi kh√°c. V√†\u0026hellip; M√¨nh c·∫£m th·∫•y tho·∫£i m√°i nh·∫•t khi chia s·∫ª nh·ªØng √Ω t∆∞·ªüng, th√¥ng tin, v√† suy nghƒ© n√†y b·∫±ng h√¨nh th·ª©c vi·∫øt.  Thi·ªát, vi·∫øt x√†m x√†m, t·∫£n m·∫°n ki·ªÉu v·∫ßy th√¨ m√¨nh th·∫•y c√≤n d·ªÖ ch·ªãu. C√≤n vi·∫øt nh·ªØng t√†i li·ªáu k·ªπ thu·∫≠t th√¨ m√¨nh ch·ªâ th·∫•y c·ª±c th√¥i üòÇ\u0026hellip; ƒê√¥i khi m√¨nh th·∫•y vi·∫øt t·∫£n m·∫°n v·∫ßy th√¥i m√† ƒë√£ ph·∫£i v√≤ ƒë·∫ßu b·ª©t tai r·ªìi. Ph·∫£i chi m√† m√¨nh ƒë·∫πp trai h∆°n m·ªôt ch√∫t, n√≥i chuy·ªán l∆∞u lo√°t h∆°n m·ªôt ch√∫t th√¨ m√¨nh ƒë√£ m·∫ßn Vlog n√≥i nhƒÉng n√≥i cu·ªôi cho r·ªìi, ƒë√¢u ph·∫£i ng·ªìi ƒë√¢y g√µ m·ªôt ch·ªØ r·ªìi xo√° hai ch·ªØ nh∆∞ b√¢y gi·ªù.\n3 Vi·∫øt t√†i li·ªáu k·ªπ thu·∫≠t\u0026hellip; c≈©ng ch·∫≥ng qua l√† m·ªôt d·∫°ng vi·∫øt l√°ch. Cho n√™n n√≥ c≈©ng theo m·ªôt v√†i m√¥ tu√Ωp chung v√† ƒë√≤i h·ªèi m·ªôt s·ªë k·ªπ nƒÉng vi·∫øt n√≥i chung. V√≠ d·ª•, c·∫ßn x√°c ƒë·ªãnh vi·∫øt v·ªÅ ch·ªß ƒë·ªÅ g√¨, ƒë·ªôc gi·∫£ l√† ai\u0026hellip; T·ª´ ƒë√≥ m·ªõi c√≥ b·ªë c·ª•c v√† c√°ch vi·∫øt ph√π h·ª£p.\nTrong qu√° tr√¨nh l√†m vi·ªác, sau nhi·ªÅu l·∫ßn vi·∫øt docs n√†y docs n·ªç, m√¨nh ƒë√∫c k·∫øt m·ªôt ƒëi·ªÅu t√¢m ƒë·∫Øc. ƒê√≥ l√†, ngo√†i vi·ªác x√°c ƒë·ªãnh ch·ªß ƒë·ªÅ, ƒë·ªôc gi·∫£, b∆∞·ªõc ti·∫øp theo l√† x√°c ƒë·ªãnh th·ªÉ lo·∫°i t√†i li·ªáu. C√°c th·ªÉ lo·∫°i t√†i li·ªáu th√¥ng d·ª•ng m√† m√¨nh hay g·∫∑p ph·∫£i l√†:\n Documentation Project plans/roadmaps Instructions \u0026amp; procedures (th∆∞·ªùng l√† how-to articles) Style guides Reports (b√°o c√°o) Proposals (ƒë·ªÅ xu·∫•t) Announcements (th√¥ng b√°o) \u0026hellip;  Vi·ªác x√°c ƒë·ªãnh th·ªÉ lo·∫°i t√†i li·ªáu gi√∫p ch√∫ng ta ƒë·ªãnh h∆∞·ªõng b·ªë c·ª•c b√†i vi·∫øt r·∫•t nhi·ªÅu. Ch·∫≥ng h·∫°n:\n ƒê·ªëi v·ªõi nh·ªØng th√¥ng b√°o c·ªßa team ƒë·∫øn c√°c k·ªπ s∆∞ t·ª´ c√°c tech families kh√°c v·ªÅ m·ªôt thay ƒë·ªïi n√†o ƒë√≥, sau khi ƒë·ªçc n·ªôi dung thay ƒë·ªïi, ng∆∞·ªùi ta th∆∞·ªùng quan t√¢m l√† \u0026ldquo;tui c√≥ c·∫ßn ph·∫£i m·∫ßn g√¨ h√¥ng?\u0026rdquo;. Cho n√™n, n·∫øu th√¥ng b√°o ƒë√≥ ƒë∆∞·ª£c vi·∫øt b·ªüi m√¨nh th√¨ s·∫Ω lu√¥n c√≥ m·ªôt m·ª•c l√† \u0026ldquo;Action Required\u0026rdquo;. Khi m√¨nh ƒë·ªçc th√¥ng b√°o c·ªßa ng∆∞·ªùi ta m√¨nh c≈©ng th∆∞·ªùng ki·∫øm c√°i m·ª•c n√†y m√† ƒë·ªçc. ƒê·ªëi v·ªõi proposals (ƒë·ªÅ xu·∫•t), th∆∞·ªùng th√¨ m√¨nh s·∫Ω vi·∫øt theo c·∫•u tr√∫c problems \u0026amp; solutions. C√≤n documentation th√¨ ch·ªâ thu·∫ßn tu√Ω l√† ghi ch√∫ l·∫°i m·ªôt quy tr√¨nh ho·∫∑c m·ªôt ch·ª©c nƒÉng n√†o ƒë√≥, n√™n kh√¥ng b·ªë c·ª•c theo ki·ªÉu problems \u0026amp; solutions. ƒê·ªëi v·ªõi how-to articles, m√¨nh th∆∞·ªùng c·ªë g·∫Øng vi·∫øt ki·ªÉu ch·ªâ d·∫´n t·ª´ng b∆∞·ªõc (step-by-step instructions). Ki·ªÉu nh∆∞: \u0026ldquo;B∆∞·ªõc 1: mu·ªën luy·ªán b·ªô ki·∫øm ph√°p n√†y, kh·ªï ch·ªß ph·∫£i t·ª± cung üëª\u0026rdquo;.  4 Vi·∫øt t√†i li·ªáu k·ªπ thu·∫≠t kh√¥ng c√≥ gi·ªëng IELTS writing. ƒê·ª´ng c√≥ l·∫•y mindset IELTS ra m√† vi·∫øt nh√©. ƒê√¢y kh√¥ng ph·∫£i l√† d·ªãp ƒë·ªÉ b·∫°n ph√¥ tr∆∞∆°ng v·ªën t·ª´ v·ª±ng h·ªçc thu·∫≠t v√† thi tri·ªÉn c√°c c·∫•u tr√∫c ng·ªØ ph√°p ph·ª©c t·∫°p. ƒê·ªëi v·ªõi m√¨nh, m·ªôt t√†i li·ªáu k·ªπ thu·∫≠t t·ªët l√† m·ªôt t√†i li·ªáu ƒë∆∞·ª£c tr√¨nh b√†y m·ªôt c√°ch khoa h·ªçc v√† d·ªÖ hi·ªÉu. Vi·∫øt c√†ng d·ªÖ hi·ªÉu, d·ªÖ ƒë·ªçc c√†ng t·ªët. M√¨nh nh·ªõ c√≥ v√†i l·∫ßn vi·∫øt documentation, ƒë∆∞·ª£c Technical Writer review, ch·ªânh s·ª≠a. Sau h·ªìi th·∫•y b·∫£n s·ª≠a m·∫•y c√°i c√¢u k√©p d√†i d√†i c·ªßa m√¨nh vi·∫øt th√†nh 2 c√¢u ƒë∆°n h·∫øt. M√† c√¥ng nh·∫≠n l√† sau khi s·ª≠a ƒë·ªçc d·ªÖ h∆°n nhi·ªÅu üòÑ. Lesson learned!\n5 Vi·∫øt gi√†, vi·∫øt ri·∫øt r·ªìi quen th√¥i. Nh∆∞ m√¨nh kh√¥ng c√≥ khi·∫øu vi·∫øt l√°ch th√¨ t·ªën nhi·ªÅu th·ªùi gian v√† c√¥ng s·ª©c h∆°n th√¥i (ch·ª© c√≥ khi·∫øu th√¨ ƒë√£ th√≠ch cmn r·ªìi üòê). C√≥ m·∫•y c√°i tasks n·ªç c·∫ßn ph·∫£i vi·∫øt code v√† vi·∫øt documentation. M√¨nh vi·∫øt code m·ªôt ng√†y xong, c√≤n vi·∫øt documentation th√¨ m·∫•t\u0026hellip; 2-3 ng√†y üòû.\n·∫§y m·ªõi th·∫•y vi·ªác di·ªÖn gi·∫£i suy nghƒ© c·ªßa m√¨nh (m·ªôt c√°ch logic) ra ch·ªØ vi·∫øt n√≥ kh√≥ nh∆∞·ªùng n√†o. C∆° m√† \u0026ldquo;what doesn\u0026rsquo;t kill you makes you stronger\u0026rdquo;. B·∫±ng vi·ªác vi·∫øt ra, suy nghƒ© c·ªßa b·∫°n s·∫Ω tr·ªü n√™n logic h∆°n, hi·ªÉu bi·∫øt c·ªßa b·∫°n s·∫Ω ƒë∆∞·ª£c c·ªßng c·ªë h∆°n. (M√¨nh ƒëang t·ª± an ·ªßi v·∫≠y, ƒë·ªÉ mai m·ªët c√≤n ch·ªãu kh√≥ vi·∫øt. Ai c√≥ b·∫±ng ch·ª©ng ph·ªß nh·∫≠n lu·∫≠n ƒëi·ªÉm tr√™n th√¨ c·ª© l√†m thinh nha üòÇ)\n\u0026hellip;\nT·∫£n m·∫°n ƒë√™m khuya ƒë·∫øn ƒë√¢y th√¥i. Bye!\n","href":"/misc/random-thoughts-on-eng-and-writing-1/","title":"T·∫£n m·∫°n: K·ªπ s∆∞ v√† vi·∫øt l√°ch (1)"},{"content":"","href":"/tags/writing/","title":"writing"},{"content":"1 Khi m√¨nh join team, c√¥ng ty m√¨nh host c√°c projects tr√™n Github. M·ªôt dev m·ªõi v√†o c√¥ng ty s·∫Ω ƒë∆∞·ª£c add t√†i kho·∫£n Github c√° nh√¢n m√¨nh v√†o t√†i kho·∫£n organization c·ªßa c√¥ng ty. L√∫c ·∫•y, tr√™n Github profile c·ªßa b·∫°n s·∫Ω hi·ªÉn th·ªã membership v·ªõi c√¥ng ty (b·∫°n ph·∫£i public c√°i membership th√¨ ng∆∞·ªùi kh√°c m·ªõi th·∫•y ƒë∆∞·ª£c nha). N·∫øu b·∫°n l√†m cho c√¥ng ty n√†o ok, ho·∫∑c thu·ªôc d·∫°ng top-notch trong n∆∞·ªõc/khu v·ª±c, th√¨ Github profile c·ªßa b·∫°n s·∫Ω c√≥-v·∫ª ƒë·∫πp h∆°n m·ªôt t√≠.\nNgo√†i ra, c√°i bi·ªÉu ƒë·ªì contribution tr√™n Github c√° nh√¢n c·ªßa b·∫°n nh√¨n s·∫Ω xanh xanh, ƒë·∫πp h∆°n ch√∫t. Nh·ªõ v√†o contribution settings ch·ªânh ƒë·ªÉ t√≠nh lu√¥n c·∫£ private contributions (t·ª©c l√† contribution v√†o c√°c private repo) nha. D∆∞·ªõi ƒë√¢y l√† contribution c·ªßa m√¨nh trong nƒÉm 2018: Nh∆∞ b·∫°n th·∫•y ƒë·∫•y, th·ª© 7 c≈©ng c√≥ m√†u xanh xanh nha, th·∫•y l√†m vi·ªác c·∫ßn m·∫´n ch∆∞a üòÜ!? M√¨nh join c√¥ng ty l√† cu·ªëi th√°ng 2, ƒë·∫øn cu·ªëi th√°ng 8 l√† h·∫øt probation (·ª´m, probation c√≥ 6 th√°ng ch·ªõ m·∫•y üòú). Xong t·ªõi cu·ªëi th√°ng 9 th√¨ m·∫•y √¥ xanh v∆°i h·∫øt. H·ªïng ph·∫£i do pass probation r·ªìi n√™n m√¨nh ph√® ph·ª°n ƒë√¢u m·ªçi ng∆∞·ªùi. L√∫c n√†y l√† th·ªùi ƒëi·ªÉm migrate sang Gitlab xong. Team v·∫´n mi·ªát m√†i push code v√† ƒëi review code\u0026hellip; nh∆∞ng tr√™n Gitlab. V√¨ Gitlab c√¥ng ty x√†i l√† self-hosted domain, c·∫ßn VPN ƒë·ªÉ truy c·∫≠p, v√† m·ªói ng∆∞·ªùi x√†i theo email account c·ªßa c√¥ng ty; n√™n ai c≈©ng mong l√† \u0026ldquo;con ong l√†m m·∫≠t y√™u hoa\u0026rdquo;, ch·ª© kh√¥ng k·ª≥ v·ªçng s·∫Ω ƒë·ªÉ l·∫°i d·∫•u ·∫•n tr√™n public profile. Sau khi migrate sang Gitlab th√¨ contributions c·ªßa m√¨nh trong nƒÉm 2019 nh∆∞ th·∫ø n√†y ƒë√¢y üòÇ: 2 L√† m·ªôt Github user, m·ªõi ƒë·∫ßu chuy·ªÉn sang d√πng Gitlab m√¨nh th·∫•y r·∫•t kh√≥ ch·ªãu v√¨ c√°i UI/UX c·ªßa n√≥. Cho ƒë·∫øn th·ªùi ƒëi·ªÉm hi·ªán t·∫°i, m√¨nh ƒë√£ b·ªõt kh√≥ ch·ªãu h∆°n. Tuy nhi√™n, c√° nh√¢n m√¨nh nghƒ© l√† n√≥ c√≥ th·ªÉ l√†m t·ªët h∆°n. L·∫•y v√≠ d·ª• v·ªÅ call to action (CTA) gi·ªØa Github v√† Gitlab:\n ƒê·ªëi v·ªõi m√¨nh, thi·∫øt k·∫ø c·ªßa Github c√≥ call to action r·∫•t r√µ r√†ng. V√≠ d·ª•, khi b·∫°n review 1 c√°i pull request (PR) c·ªßa ng∆∞·ªùi kh√°c, ngo√†i vi·ªác ƒë·ªÉ l·∫°i comment tr√™n code c·ªßa ng∆∞·ªùi ta, h√†nh ƒë·ªông sau ch√≥t th∆∞·ªùng l√† approve PR ho·∫∑c request changes. C√°i n√∫t \u0026ldquo;Review changes\u0026rdquo; m√†u xanh l√® n·∫±m ·ªü g√≥c ph·∫£i, v·∫´n c·ªë ƒë·ªãnh (sticky) ·ªü ƒë√≥ khi scroll xu·ªëng, r·∫•t ti·ªán l·ª£i cho c·∫£ 2 ch·ª©c nƒÉng tr√™n v√¨ c√≥ ƒë·ªô ch√∫ √Ω cao.  Khi m·ªõi ƒë·∫ßu chuy·ªÉn sang Gitlab, m√¨nh g·∫∑p 3 kh√≥ khƒÉn ch√≠nh:  Kh√¥ng ki·∫øm ra c√°i n√∫t ƒë·ªÉ approve merge request (MR): nhi·ªÅu th√¥ng tin qu√° üòû. M√† m·∫•y c√°i n√∫t n√†y n√≥ kh√¥ng c√≥ c·ªë ƒë·ªãnh (sticky) khi scroll n√™n k√©o l√™n k√©o xu·ªëng m·ªôt h·ªìi l√† ph·∫£i ƒëi ki·∫øm l·∫°i c√°i n√∫t. C√°i n√∫t ƒë·ªÉ approve 1 c√°i merge request n√≥ thay ƒë·ªïi tr·∫°ng th√°i ho√†i: L√∫c ch∆∞a c√≥ ai approve th√¨ n√≥ c√≥ m√†u n·ªÅn xanh d∆∞∆°ng; c√≤n l√∫c c√≥ ng∆∞·ªùi kh√°c approve r·ªìi th√¨ n√≥ n·ªÅn tr·∫Øng, vi·ªÅn xanh d∆∞∆°ng, ghi ch·ªØ \u0026ldquo;approve additionally\u0026rdquo;. ƒê·ª©ng d∆∞·ªõi g√≥c nh√¨n ng∆∞·ªùi d√πng, m√¨nh m√©o quan t√¢m l√† \u0026ldquo;additionally\u0026rdquo; hay kh√¥ng. M√¨nh ch·ªâ mu·ªën approve c√°i merge request v√† mu·ªën ƒë·∫£m b·∫£o l√† m√¨nh ƒë√£ b·∫•m ƒë√∫ng n√∫t.  Nh·∫•n nh·∫ßm n√∫t: khi ƒë√£ c√≥ ng∆∞·ªùi approve MR r·ªìi, c√°i n√∫t approve n√≥ chuy·ªÉn sang n·ªÅn tr·∫Øng vi·ªÅn xanh, c√≤n c√°i n√∫t merge l√∫c ƒë√≥ c√≥ n·ªÅn xanh l√° c√¢y. L∆∞·ªõt qua xung quanh th√¨ c√°i n√∫t merge ƒë√≥ l√† c√≥ CTA m·∫°nh nh·∫•t. M√¨nh theo th√≥i quen, c·ª© ƒëinh ninh c√°i n√∫t xanh xanh l√† c√°i n√∫t approve. Nh·∫•n c√°i ph·∫≠p, th·∫ø l√† merge c√°i MR c·ªßa ng∆∞·ªùi ta lu√¥n üòÇ. C√°i n√†y m√¨nh b·ªã 1-2 l·∫ßn m·ªõi quen ak\u0026hellip;\n\u0026ldquo;Ba c√°i ƒë·ªì c·∫©u th·∫£\u0026rdquo; - ·ª™m, m·∫•y ng∆∞·ªùi c·ª© ph√°n x√©t tui ƒëi üëä. Nh∆∞ng l√†m theo qu√°n t√≠nh m√† b·ªã sai nh∆∞ th·∫ø n√†y ng·ª• √Ω r·∫±ng c√°i UX ch∆∞a ƒë∆∞·ª£c t·ª± nhi√™n cho l·∫Øm.   3 ƒêi·ªÅu m√¨nh kh√° h√†i l√≤ng v·ªÅ Gitlab ch√≠nh l√† CI/CD support. B·∫£n th√¢n m√¨nh th·∫•y Gitlab CI/CD kh√° l√† x·ªãn x√≤. H·ªìi tr∆∞·ªõc khi project ƒë∆∞·ª£c host tr√™n Github th√¨ team x√†i Jenkins. Khi chuy·ªÉn qua Gitlab th√¨ th·∫•y kh·∫£ nƒÉng customization cao h∆°n h·∫≥n. M√¨nh c≈©ng s·∫Ω cho feedback t∆∞∆°ng t·ª± khi so s√°nh gi·ªØa m·ªôt b√™n th·ª© 3 nh∆∞ Bitrise v√† Gitlab. M·∫∑c d√π ch∆∞a d√πng h·∫øt nh·ªØng t√≠nh nƒÉng c·ªßa Gitlab CI/CD m√¨nh th·∫•y c≈©ng ƒë√£ l√†m ƒë∆∞·ª£c ƒë·ªß th·ª© r·ªìi. ƒê·∫•y l√† ch∆∞a k·ªÉ do ƒë·∫∑c th√π platform (iOS) n√™n m√¨nh ch∆∞a khai th√°c nhi·ªÅu t√≠nh nƒÉng \u0026ldquo;th√¥ng d·ª•ng\u0026rdquo; (vd. h·ªïng x√†i ƒë∆∞·ª£c Docker flow cho m·∫•y jobs li√™n quan ƒë·∫øn iOS v√¨ c√°c t√°c v·ª• n√†y ch·∫°y tr√™n darwin kernel c√≤n Docker th√¨ y√™u c·∫ßu linux kernel). V√¨ kh·∫£ nƒÉng h·ªó tr·ª£ cao c·ªßa Gitlab CI/CD n√™n m√¨nh r·∫•t hay ngh√≠a m·∫•y trang documentation c·ªßa m·∫•y b·∫£n. Trang m√† m√¨nh hay t·ªõi lui nh·∫•t l√† https://docs.gitlab.com/ee/ci/yaml/. L√¢u l√¢u coi xem b·∫£n release m·ªõi c·ªßa Gitlab c√≥ c√°i n√†o hay.\n4 N√≥i v·ªÅ preferences v·ªÅ CI/CD setup th√¨ c≈©ng c√≥ 2 tr∆∞·ªùng ph√°i ch√≠nh:\n Tr∆∞·ªùng ph√°i th·ª© nh·∫•t th√≠ch nh·ªØng setup d·∫°ng k√©o th·∫£ (drag-and-drop). Th∆∞·ªùng s·∫Ω c√≥ 1 c√°i web interface ƒë·ªÉ config workflow. V√≠ d·ª• ƒë·ªëi v·ªõi iOS th√¨ nh·∫≠p upload c√°i certificate v√† provisioning profiles l√™n c√°i web ƒë√≥,r·ªìi nh·∫≠p c√°i build configuration v√†o l√† Debug hay Release\u0026hellip; Tr∆∞·ªùng ph√°i th·ª© nh√¨ th√≠ch nh·ªØng setup ƒë√≤i h·ªèi m√¨nh ph·∫£i ƒë·ªãnh nghƒ©a workflow b·∫±ng code m√† kh√¥ng c√≥ web interface k√©o th·∫£ nh∆∞ tr√™n. Th∆∞·ªùng v·ªõi nh·ªØng tr∆∞·ªùng h·ª£p n√†y c·∫ßn vi·∫øt th√™m t√≠ x√≠u code.  C√°i n√†y c≈©ng t∆∞∆°ng t·ª± nh∆∞ 2 tr∆∞·ªùng ph√°i m·∫ßn UI trong iOS: b·∫±ng code thu·∫ßn hay b·∫±ng interface builder (t·ª©c storyboard/xib). V·∫•n ƒë·ªÅ t∆∞∆°ng t·ª± n√™n c√¢u tr·∫£ l·ªùi cho c√¢u h·ªèi \u0026ldquo;ch·ªçn c√°i n√†o b√¢y gi·ªù?\u0026rdquo; c≈©ng t∆∞∆°ng t·ª±: tu·ª≥ quy m√¥ d·ª± √°n, quy m√¥ team, y√™u c·∫ßu ph·∫ßn m·ªÅm\u0026hellip;. Ri√™ng m√¨nh, m·∫∑c d√π kh√¥ng ch√™ bai hay ph√°n x√©t tr∆∞·ªùng ph√°i n√†o nh∆∞ng m√¨nh c√≥ xu h∆∞·ªõng theo tr∆∞·ªùng ph√°i th·ª© nh√¨. V√¨ sao? V√¨ code nh∆∞ v·∫≠y ƒëem l·∫°i cho m√¨nh c·∫£m gi√°c l√† m√¨nh ƒëang ch∆°i v·ªõi n√≥ h∆°n\u0026hellip; V√† v·ªõi code th√¨ d·ªÖ customize h∆°n, d·ªÖ cheathack h∆°n.\n\u0026hellip;\nTh√¥i t·∫£n m·∫°n ƒë·∫øn ƒë√¢y th√¥i\u0026hellip; V·ªÅ CI/CD (cho iOS) th√¨ s·∫Ω c√≥ nh·ªØng b√†i vi·∫øt kh√°c.\n","href":"/tech/random-thoughts-on-gitlab/","title":"T·∫£n m·∫°n: chuy·ªán Gitlab"},{"content":" NƒÉm h·∫øt, T·∫øt ƒë·∫øn\u0026hellip; Th·∫≠t ra ban ƒë·∫ßu m√¨nh t√≠nh nh·∫Øm m·∫Øt ng√≥ l∆°, kh√¥ng t√≠nh t·ªïng k·∫øt g√¨ c·∫£. Nh∆∞ng nghƒ© l·∫°i, n·∫øu ai ƒë√≥ ƒëang r·∫ßu rƒ© ƒë·ªçc b√†i n√†y xong th·∫•y ph·∫•n ch·∫•n h∆°n v√¨ c√≥ th·∫•y c√≥ th·∫±ng nƒÉm nay c√≤n nh√†m ch√°n h∆°n. √Çu c≈©ng l√† gi√∫p √≠ch cho ƒë·ªùi.\nC√¥ng vi·ªác N·∫øu b·∫°n ƒë√£ t·ª´ng ƒë·ªçc t·ªïng k·∫øt nƒÉm ngo√°i, m√¨nh c√≥ t√≥m t·∫Øt r·∫±ng \u0026ldquo;2018 ƒë·ªëi v·ªõi m√¨nh l√† nƒÉm c·ªßa c√¥ng vi·ªác\u0026rdquo;. ·ª™, 2019 ƒë·ªëi v·ªõi m√¨nh c≈©ng l√† nƒÉm c·ªßa c√¥ng vi·ªác, v√¨ ngo√†i l√†m vi·ªác, l√†m thinh v√† l√†m bi·∫øng ra, th√¨ m√¨nh ch·∫≥ng bi·∫øt l√†m g√¨ kh√°c c·∫£. Dƒ© nhi√™n m√¨nh l√†m bi·∫øng nhi·ªÅu h∆°n, nh∆∞ng ghi \u0026ldquo;nƒÉm c·ªßa s·ª± l∆∞·ªùi bi·∫øng\u0026rdquo; th√¨ nghe n√≥ b·∫ßn qu√°, kh√¥ng c√≥ sang.\nM√¨nh l√†m ·ªü Sing ƒë·∫øn nay c≈©ng ƒë∆∞·ª£c g·∫ßn 2 nƒÉm r·ªìi. 2 nƒÉm l√†m vi·ªác ·ªü c√¥ng ty hi·ªán t·∫°i, m√¨nh c·∫£m th·∫•y kh√° ok. Ph·∫£i th√∫ th·∫≠t l√† m√¨nh th·∫•y r·∫•t may m·∫Øn khi ƒë∆∞·ª£c l√†m ·ªü team hi·ªán t·∫°i. S·∫øp t·ªët, ƒë·ªìng nghi·ªáp gi·ªèi, culture fit, c√¥ng vi·ªác nhi·ªÅu, √≠ nh·∫ßm,th·ª≠ th√°ch.\nN√≥i v·ªÅ t√≠nh ch·∫•t c√¥ng vi·ªác 2019, ∆∞·ªõc ch·ª´ng th·ªùi gian cho m·ªói lo·∫°i nh∆∞ sau:\n 50%: CI/CD work 25%: engineering work (iOS) 10%: features work (iOS) 7%: review code ng∆∞·ªùi kh√°c 5%: ƒëi meeting 3%: linh tinh  ƒê·ªçc ƒë·∫øn ƒë√¢y ch·∫Øc kh√¥ng √≠t ng∆∞·ªùi th·∫Øc m·∫Øc: b·ªô CI/CD work nhi·ªÅu v·∫≠y sao? ü§î, hay c√≥ nhi·ªÅu d·ªãch v·ª• h·ªó tr·ª£ s·∫µn h·∫øt r·ªìi m√†?. ·ªû b√†i vi·∫øt l·∫ßn tr∆∞·ªõc, m√¨nh c√≥ t·∫£n m·∫°n s∆∞∆°ng s∆∞∆°ng v·ªÅ c√¥ng vi·ªác CI/CD m√† m√¨nh ƒë√£ l√†m. M√¨nh d√°m ch·∫Øc nhi·ªÅu ng∆∞·ªùi c≈©ng ƒë√£ ƒë·∫∑t ra c√¢u h·ªèi t∆∞∆°ng t·ª±. Th·∫≠t ra c√°i n√†y tu·ª≥ thu·ªôc v√†o quy m√¥ c·ªßa project v√† ƒë·∫∑c th√π c·ªßa t·ª´ng platform n·ªØa.\n L√†m CI/CD work kh√¥ng ƒë∆°n gi·∫£n ch·ªâ l√† setup project cho n√≥ build/test/deploy tr√™n CI, hay setup m·∫•y c√°i linters. N·∫øu b·∫°n code m·∫•y ng√¥n ng·ªØ scripting th√¨ s·∫Ω th·∫•y m·ªçi th·ª© d·ªÖ d√†ng h∆°n nhi·ªÅu. Ch·∫°y nguy√™n n√πi code v√† test ch·ªâ trong 1-2 n·ªët nh·∫°c. M·∫•y c√°i packages, dependencies setup th√¨ c·ª© b·ªè h·∫øt v√†o docker. Project (iOS) m√¨nh l√†m c√≥ codebase kh√° b·ª±. Trong l√∫c ƒë·ª£i CI build xong project (~ 10-15m) th√¨ b·∫°n c√≥ th·ªÉ l√†m ƒë∆∞·ª£c kh·ªëi chuy·ªán r·ªìi. Ch∆∞a k·ªÉ th·ªùi gian ch·∫°y tests, bao g·ªìm c·∫£ unit tests v√† UI tests. M·ªôt c√°i UI test th√¥i ch·∫°y c≈©ng kho·∫£ng 15-20s r·ªìi. B·ªüi b√† con vi·∫øt th√™m UI tests m√† m√¨nh ƒë√¢u c√≥ ƒë∆∞·ª£c ph√©p qu·ªü tr√°ch l√† \u0026ldquo;vi·∫øt nhi·ªÅu chi cho tests ch·∫°y l√¢u\u0026rdquo; üòí. C√°i pipeline n√≥ ch·∫°y h∆°n c·∫£ ti·∫øng ƒë·ªìng h·ªì th√¨ ƒë√¢u c√≥ ng√≥ l∆° ƒë∆∞·ª£c. C√¥ng vi·ªác c·ª• th·ªÉ th√¨ ch·∫Øc m√¨nh s·∫Ω c√≥ m·ªôt (v√†i) b√†i vi·∫øt kh√°c ƒë√†m ƒë·∫°o sau.  B·∫°n th·∫•y ƒë·∫•y, m√¨nh l√† iOS engineer nh∆∞ng kho·∫£ng 50% th·ªùi gian nƒÉm r·ªìi m√¨nh l√†m CI/CD work. N√™n c√≥ th·ªùi gian m√¨nh c·∫£m th·∫•y m·∫•t d·∫ßn h·ª©ng th√∫ v·ªõi iOS v√† r∆°i v√†o tr·∫°ng th√°i c·∫£m th·∫•y b·ªã c√¥ l·∫≠p.\nNƒÉm nay m√¨nh √≠t l√†m features work h∆°n so v·ªõi nƒÉm ngo√°i n√™n th·ªùi gian ƒëi c√£i l·ªôntranh lu·∫≠n v·ªõi backend/QA/PM c≈©ng √≠t l·∫°i. Ri√™ng ƒë·ªëi v·ªõi m√¨nh, nh·ªØng tasks m√† c·∫ßn tranh lu·∫≠n, ph·∫£n bi·ªán, v√† giao ti·∫øp nhi·ªÅu r·∫•t d·ªÖ l√†m m√¨nh tr·ªü n√™n cƒÉng th·∫≥ng (stress). M√† m√¨nh khi cƒÉng th·∫≥ng th√¨\u0026hellip; √† m√† th√¥i. Nhi·ªÅu l·∫ßn m√¨nh m·∫•t b√¨nh tƒ©nh, khi·∫øn b·∫ßu kh√¥ng kh√≠ tr·ªü n√™n n·∫∑ng n·ªÅ. ƒêi·ªÉm n√†y th√¨ s·∫øp c≈©ng g√≥p √Ω ho√†i m√† ch∆∞a s·ª≠a ƒë∆∞·ª£c üòÖ, ch·ªâ bi·∫øt c√°ch x√°ch m√°y ra ch·ªó kh√°c ng·ªìi ƒë·ªÉ h·∫° ho·∫£ d·∫ßn.\nM·ªôt s·ªë b·∫°n ƒë·ªìng nghi·ªáp b·∫£o r·∫±ng m√¨nh thu·ªôc ki·ªÉu ƒë√≤i h·ªèi ti√™u chu·∫©n cao (high standards). Th·∫≠t ra m√¨nh ch·ªâ h∆°i kh·∫Øt khe h∆°n ƒë·ªëi v·ªõi nh·ªØng c√°i work m√† m√¨nh quan t√¢m th√¥i. V√≠ d·ª•, nh·ªØng c√°i merge requests (hay pull requests) li√™n quan ƒë·∫øn scripting th√¨ m√¨nh s·∫Ω review k·ªπ h∆°n b√¨nh th∆∞·ªùng. Code Python üêç th√¨ ph·∫£i code cho n√≥ pythonic ch·ª© kh√¥ng c√≥ vi·∫øt ki·ªÉu \u0026ldquo;Swift in disguise\u0026rdquo; (dƒ© nhi√™n m√¨nh c√≥ d√†nh th·ªùi gian nghi√™n c·ª©u xem ·ªü ngo√†i industry ng∆∞·ªùi ta vi·∫øt nh∆∞ th·∫ø n√†o)\u0026hellip;\nNgo√†i ra, c√≤n m·ªôt th·ªÉ lo·∫°i merge requests m√† √≠t khi b·ªè qua l√† \u0026ldquo;documentation\u0026rdquo;. Team m√¨nh duy tr√¨ m·ªôt c√°i \u0026ldquo;knowledge base\u0026rdquo; (kh√¥ng bi·∫øt d·ªãch sao üòì, ƒë·∫°i kh√°i l√† m·ªôt c√°i website), t·ªïng h·ª£p nh·ªØng t√†i li·ªáu k·ªπ thu·∫≠t c·∫ßn thi·∫øt ƒë·ªÉ c√°c k·ªπ s∆∞ c√≥ th·ªÉ align v·ªõi nhau, ƒë·ªìng th·ªùi c≈©ng ƒë·ªÉ c√°c k·ªπ s∆∞ m·ªõi c√≥ th·ªÉ onboard d·ªÖ d√†ng. V√¨ n·ªôi dung v√† h√¨nh th·ª©c c·ªßa t·ª´ng b√†i vi·∫øt ƒë·ªÅu ph·∫£n √°nh b·ªô m·∫∑t c·ªßa team n√™n m√¨nh ƒë√†nh ƒë√≥ng vai ph·∫£n di·ªán m√† ƒëi gieo nghi·ªáp. Ban ƒë·∫ßu, m√¨nh x√©t n√©t t·ª´ng chi ti·∫øt, t·ª´ b·ªë c·ª•c, wording, l·ªói ng·ªØ ph√°p, cho ƒë·∫øn d·∫•u ch·∫•m cu·ªëi c√¢u. Sau m·ªôt th·ªùi gian, nh·∫≠n th·∫•y r·∫±ng c·∫£ reviewer v√† reviewee ƒë·ªÅu kh·ªï, m√¨nh quy·∫øt ƒë·ªãnh h·∫° ti√™u chu·∫©n xu·ªëng, kh√¥ng x√©t n√©t n·ªØa. L√∫c n√†y, reviewee h·∫øt kh·ªï, nh∆∞ng reviewer (t·ª©c l√† m√¨nh) th√¨ v·∫´n th·∫•y kh·ªï üòê, v√¨ m·ªói nh√¨n m·∫•y l·ªói nho nh·ªè v·∫≠y l√† th·∫•y nh·ªôt m·∫Øt\u0026hellip; Cu·ªëi c√πng th√¨\u0026hellip; kh√¥ng th·∫•y, kh√¥ng kh·ªï üëª. H·ªïng h·ª©ng th√∫ review m·∫•y c√°i merge requests nh∆∞ v·∫≠y n·ªØa. (Tui bi·∫øt ƒë·ªçc t·ªõi ƒë√¢y c√≥ nhi·ªÅu ng∆∞·ªùi ƒë√°nh gi√° tui th√°i ƒë·ªô n√†y n·ªç, m√† th√¥i k·ªá).\nTeam m√¨nh kh√° tr·∫ª v√† nƒÉng ƒë·ªông. M·ªçi ng∆∞·ªùi ai c≈©ng gi·ªèi v√† c√≥ tinh th·∫ßn tr√°ch nhi·ªám cao\u0026hellip; Ch·ªâ tr·ª´ nh·ªØng ng√†y g·∫∑p ph·∫£i √¢m binh/c√¥ h·ªìn v√£ng lai, th√¨ nh·ªØng ng√†y l√†m vi·ªác ·ªü office, m√¨nh ƒë·ªÅu th·∫•y vui.\nCu·ªôc s·ªëng N·∫øu m√¨nh vi·∫øt ƒë·∫ßy ƒë·ªß ra th√¨ ƒë·ªçc n√≥ ch·∫≥ng kh√°c g√¨ nhi·ªÅu so v·ªõi review nƒÉm ngo√°i.\nAi h·ªèi m√¨nh t∆∞ v·∫•n ƒëi ch∆°i ch·ªó n√†o ·ªü Sing l√† ƒë∆∞·ª£c th√¨ ch·∫Øc h·ªèi nh·∫ßm ng∆∞·ªùi r·ªìi. M√¨nh c√≤n ch∆∞a ƒëi Sentosa, ch∆∞a t·ªõi m·∫•y con s∆∞ t·ª≠ n·ªØa m√†. Anh m√¨nh c·ª© qu·ªü, b·∫£o sao kh√¥ng ƒëi √öc, √Çu n√†y n·ªç ch∆°i, m√† m√¨nh c≈©ng ch·∫≥ng bi·∫øt gi·∫£i th√≠ch th·∫ø n√†o. Ngay t·∫°i l√∫c ƒëang vi·∫øt b√†i n√†y, n∆°i m√† m√¨nh ƒëi nh·∫•t l√† \u0026ldquo;v·ªÅ nh√†\u0026rdquo; üè°.\nC√†ng ng√†y b·∫°n b√® c√†ng √≠t d·∫ßn. L√∫c m·ªõi qua, b·∫°n ƒë·∫°i h·ªçc c·ªßa m√¨nh h∆°i b·ªã nhi·ªÅu. R·ªìi ƒë·ª©a ƒëi ch√¢u n√†y, ƒë·ª©a ƒëi ch√¢u n·ªç, ƒë·ª©a v·ªÅ VN. Ng√≥ qua ng√≥ l·∫°i h·ªïng c√≤n ai. √Çu c≈©ng l√† ƒëi·ªÅu t·∫•t y·∫øu. We all grow apart!\n\u0026hellip;\nTh√¥i, t·∫£n m·∫°n nhi√™u ƒë√¢y th√¥i, ƒë·ªÉ nƒÉm sau c√≤n √Ω m√† x√†m ti·∫øp\u0026hellip;\n","href":"/misc/2019-in-review/","title":"üìù 2019 in review"},{"content":"In this post, I am going to talk about my experiences when working with CI/CD for iOS applications and some valuable lessons I learned.\n1 In the past few months, I have been intensively working on CI/CD features in my team. My teammates sometimes refer to me as \u0026ldquo;the CI guy\u0026rdquo;. Before me, \u0026ldquo;the CI guy\u0026rdquo; was someone else who is humble, and quiet. After he left the company, I became the main PIC for CI/CD-related issues.\n2 When working with CI/CD, most of the time, I code scripting languages (Bash/Shell, Ruby, Python\u0026hellip;), not Swift. The scripting codebase (only accounting code written by our team) in my project consists of:\n 65% of Python code. 25% of Ruby code. 10% of Bash/Shell code.  That means I can explore more technical areas of interests. At least, I can read .py, .rb and .sh files with more ease than before. I am now less reluctant to debug a 3rd party tool (such as Fastlane, CocoaPods, etc.).\nThere were a few times I debugged through a bunch of code to fix an issue and finally realized that I used Python syntax in Ruby code üòÇ. But it was fun.\n3 Since CI/CD affects all developers contributing to the project, I felt like my work was a factor \u001din team productivity.\nLucky me that my project has a large codebase. Engineers from many tech families contribute to the project on a regular basis. The amount of product features code added has been increasing. The same pattern happens to the number of tests (both unit tests and UI tests). Problems arise in terms of build \u0026amp; test time and test stability (mainly UI test stability) as a result\u0026hellip; CI/CD work for the project is no longer as simple as setting up jobs to build and test the project successfully.\n4 Being one of the few in the team to work with scripting languages, I felt a little bit isolated.\nWhile my peers were working on some fancy product features, I was writing a basic python snippet to parse specific files. After a while, I realized that I started to lose my interests in iOS. When my teammates submitted a merge request, I barely mind reviewing his/her change.\nAlso, when I submitted a merge request (for a tooling/scripting work), I noticed that very few people reviewed my work. I guessed it was partly because engineers in my team had different levels of interests in scripting work and different levels of scripting skills.\nApart from that, I sometimes miss some logic in scripting languages because they are not my primary languages, and such code is not covered by tests. Sometimes, I had 1-2 more follow-up fixes after I merged a change. That pattern happened more frequently making me keep questioning my quality of work.\nAlthough I gradually managed to overcome that negative feeling, there are a few times I still needed to escalate to my manager to get proper attention to my work :).\n5 Sometimes, I felt like the misery of one\u0026rsquo;s lifetime is on me when I tried to debug an issue. For example, I didn\u0026rsquo;t get proper code coverage data, who should I blame: Xcode, or CocoaPods, or a misconfiguration in the project. While investigating the issue, I found something abnormal (which could possibly be the cause). When I looked into that unusual behavior, I found another one üòü. Eventually, I ended up with tons of questions that need to be answered üòµ.\nMy rule of thumb: before you investigate something, come up with some hypotheses first. Verify one by one. Before verifying any, bear that in mind (it\u0026rsquo;s good to write it down).\nAbove are some of my random thoughts on CI/CD work. I never call myself \u0026ldquo;the CI guy\u0026rdquo; because I only touch the tip of the iceberg as of now. I always feel like I lack a leap of thinking to become more experienced in this area. But anyway, some of you were/are/will be probably struggling like me. If so, do not hesitate to share your experiences.\n","href":"/tech/random-thoughts-on-being-a-ci-engineer/","title":"Random thoughts on being a CI engineer"},{"content":" Ti·∫øp n·ªëi nh·ªØng so s√°nh vui gi·ªØa Singapore v√† Vi·ªát Nam (du·ªõi g√≥c nh√¨n ch·ªß quan c·ªßa b·∫°n) ·ªü post l·∫ßn tr∆∞·ªõc, b√†i vi·∫øt n√†y s·∫Ω ƒë·ªÅ c·∫≠p m·ªôt s·ªë kh√≠a c·∫°nh v·ªÅ c√¥ng vi·ªác. M√¨nh vi·∫øt ng·∫´u nhi√™n, kh√¥ng theo m·ªôt h·ªá th·ªëng n√†o c·∫£. N√™n n·∫øu b·∫°n th·∫•y √Ω t·ª© l·ªôn x·ªôn th√¨\u0026hellip; √† m√† th√¥i\u0026hellip; c·ª© ƒë·ªçc ƒëi nh√© üòâ.\nGi·ªù l√†m vi·ªác Th∆∞·ªùng th√¨ c√°c c√¥ng ty ·ªü VN, d√π l√† tech hay non-tech, d√π l√† nh√† n∆∞·ªõc hay t∆∞ nh√¢n, ƒë·ªÅu c√≥ gi·ªù ngh·ªâ tr∆∞a. Sau khi ƒÉn xong, b√† kon tranh th·ªß ƒë√°nh m·ªôt gi·∫•c ƒë·ªÉ n·∫°p l·∫°i nƒÉng l∆∞·ª£ng cho bu·ªïi chi·ªÅu. Tu·ª≥ c√¥ng ty m√† th·ªùi gian ng·ªß ngh·ªâ nhi·ªÅu hay √≠t. C√≥ c√¥ng ty kia, nghe ng∆∞·ªùi ta k·ªÉ (t·ª©c ng∆∞·ªùi ·ªü c√¥ng ty ƒë√≥ k·ªÉ), l√† kh√¥ng √≠t ng∆∞·ªùi ng·ªß c≈©ng c·∫£ ti·∫øng r∆∞·ª°i, hai ti·∫øng ƒë·ªìng h·ªì m·ªõi d·∫≠y ƒë√°nh bi l·∫Øc, √≠ nh·∫ßm, l√†m vi·ªác.\nM·∫•y b·∫°n ƒë√≥ m√† qua Sing l√†m th√¨ th·ªùi gian ƒë·∫ßu ch·∫Øc s·∫Ω ng√°p ng·∫Øn ng√°p d√†i, v√¨ b√™n n√†y ng∆∞·ªùi ta kh√¥ng c√≥ th√≥i quen ng·ªß tr∆∞a. L√∫c ƒë·∫ßu m·ªõi qua m√¨nh c≈©ng h∆°i b·∫•t ng·ªù v√¨ sau khi ƒÉn xong th·∫•y thi√™n h·∫° bay v√†o b√†n ng·ªìi code hƒÉng say.\n\u0026hellip;\nTu·ª≥ c√¥ng ty m√† khung gi·ªù l√†m vi·ªác c√≥ th·ªÉ kh√°c nhau, v√† c√≥ linh ho·∫°t hay kh√¥ng. C√¥ng ty m√¨nh l√†m th√¨ gi·ªù gi·∫•c kh√° tho·∫£i m√°i. Gi·ªù c·ªë ƒë·ªãnh l√† 10 gi·ªù s√°ng t·ªõi 7 gi·ªù t·ªëi. Nh∆∞ng t·ªõi tr·ªÖ l√∫c 10:30 hay 11:00 c≈©ng ch·∫≥ng ai qu·ªü tr√°ch. Mi·ªÖn sao l√†m xong vi·ªác l√† ok. Nhi·ªÅu h√¥m m·ªát trong ng∆∞·ªùi th√¨ xin work from home. V·ªÅ ƒëi·ªÉm n√†y th√¨ m√¨nh cho r·∫±ng ·ªü ƒë√¢u c≈©ng v·∫≠y, bi·∫øt l·ª±a tr√∫ng c√¥ng ty l√† ƒë∆∞·ª£c üòÜ.\nB√¨nh th∆∞·ªùng, cu·ªëi tu·∫ßn, sau khi ƒÉn s√°ng ·ªü food court, m√¨nh hay gh√© ch·ªó h√†ng n∆∞·ªõc c·ªßa c√¥ kia mua cafe. C√≥ b·ªØa m√¨nh work from home, th√¨ nh∆∞ th∆∞·ªùng l·ªá, gh√© qua b·ªÉn mua. Th·∫•y h√¥m nay th·ª© 6 m√† m√¨nh ƒÉn v·∫≠n qu·∫ßn ƒë√πi, t√≥c tai b√π x√π, kh√¥ng ƒëeo ba l√¥, li·ªÅn h·ªèi:\n- You\u0026rsquo;re not working today?\n- Today I\u0026rsquo;m working from home - Nho·∫ªn mi·ªáng c∆∞·ªùi, m√¨nh ƒë√°p.\nXong c√¥ l√†m ƒë·ªông t√°c g√µ b√†n ph√≠m m√°y t√≠nh, h·ªèi:\n- Oh. Computer engineer, right?\n- Yes, correct - C·∫£ 2 c√πng c∆∞·ªùi.\nV·∫≠y ƒë√≥, h·ªÖ m√† work from home, l√† ng∆∞·ªùi ta nghƒ© ngay ƒë·∫øn IT =]].\nNgo√†i l·ªÅ:\n BAZINGA!!!\u0026hellip; C√¢u n√≥i \u0026ldquo;mi·ªÖn sao l√†m xong vi·ªác l√† ok\u0026rdquo; l√† c√¢u n√≥i x·∫°o nha, v√¨ n√≥ qu√° chung chung. Xong vi·ªác ng√†y h√¥m nay hay c·ªßa c·∫£ tu·∫ßn? C√≤n m·ªõ vi·ªác trong backlog th√¨ sao g·ªçi l√† xong vi·ªác\u0026hellip; Theo c√° nh√¢n m√¨nh, b·∫°n ƒë·∫£m b·∫£o ti·∫øn ƒë·ªô chung c·ªßa sprint, ho·∫∑c d·ª± √°n l√† ƒë∆∞·ª£c. B·∫°n c·∫£m th·∫•y m√¨nh productive th√¨ ok :).  ƒêa d·∫°ng ch·ªßng t·ªôc C·ªông ƒë·ªìng tech ·ªü VN kh√° m·∫°nh (v√† ƒë√¥ng), m√¨nh s·∫Ω kh√¥ng l·∫•y l√†m l·∫° n·∫øu m·ªôt ng∆∞·ªùi cho r·∫±ng kh·∫£ nƒÉng t·ª± cung ·ª©ng cho nhu c·∫ßu lao ƒë·ªông CNTT trong n∆∞·ªõc l√† ho√†n to√†n c√≥ th·ªÉ. C√°c c√¥ng ty c√¥ng ngh·ªá ·ªü VN, h·∫ßu nh∆∞ ph·∫ßn ƒë√¥ng nh√¢n l·ª±c l√† ng∆∞·ªùi b·∫£n x·ª© (t·ª©c ng∆∞·ªùi Vi·ªát).\n·ªû Sing, ph·∫ßn ƒë√¥ng d√¢n tech l√† ng∆∞·ªùi Vi·ªát, ·∫§n ƒê·ªô, Trung Qu·ªëc, Nga. Kh√¥ng bi·∫øt m·∫•y b·∫°n ng∆∞·ªùi Sing ƒëi ƒë√¢u h·∫øt m√† th·∫•y kh√¥ng nhi·ªÅu ngu·ªùi l√†m v·ªÅ tech. M·ªôt ph·∫ßn v√¨ m·∫•y b·∫£n h·ªçc c√°c kh·ªëi ng√†nh kh√°c (vd. kinh t·∫ø), c√≤n ph·∫ßn √≠t th√¨ ch·∫Øc ƒëi ƒë·∫ßu qu√¢n cho x·ª© t∆∞ b·∫£n tr·ªùi T√¢y r·ªìi chƒÉng ü§î.\nNgo√†i l·ªÅ:\n Gi·ªù ng√†y c√†ng nhi·ªÅu ng∆∞·ªùi Vi·ªát sang Singapore l√†m, v√† h·∫ßu h·∫øt l√† IT. Nhi·ªÅu t√†i x·∫ø Grab, h·ªèi bi·∫øt m√¨nh l√† ng∆∞·ªùi Vi·ªát k·∫ø suy ra m√¨nh l√†m IT.\n- You\u0026rsquo;re from where?\n- I\u0026rsquo;m from Vietnam.\n- IT, huh?\n- Yep. How do you know?\n M√¨nh hay ƒëi ƒÉn ·ªü Little Vietnam, l√¢u l√¢u ng·ªìi ƒÉn nghe m·∫•y ng∆∞·ªùi k·∫ø b√™n n√≥i chuy·ªán nghe c√≥ m·∫•y t·ª´ nh∆∞ QA, r·ªìi outsource, r·ªìi OT (overtime)\u0026hellip; ƒë√≠ch th·ªã l√† ƒë·ªìng m√¥n r·ªìi.\n  Ph·ªèng v·∫•n V·ªõi c√°c v·ªã tr√≠ k·ªπ s∆∞ ph·∫ßn m·ªÅm th√¨ nhi·ªÅu c√¥ng ty c√¥ng ngh·ªá ·ªü Sing ƒë·ªÅu theo m√¥ tu√Ωp: n√≥i chuy·ªán v·ªõi nh√¢n s·ª±, r·ªìi ph·ªèng v·∫•n thu·∫≠t to√°n, r·ªìi v·ªÅ domain knowledge (vd. ios/android/backend), r·ªìi v·ªÅ culture fit. Tu·ª≥ quy m√¥, process c·ªßa c√¥ng ty m√† h·ªç g·ªôp ph·ªèng v·∫•n thu·∫≠t to√°n v·ªõi domain knowledge chung. Nhi·ªÅu khi g·ªôp culture fit chung lu√¥n. V√¨ v·∫≠y, th·ªùi gian t·ªïng d√†nh cho interview process c·ªßa m·ªôt c√¥ng ty ƒë·ªëi v·ªõi m·ªôt ·ª©ng vi√™n c√≥ th·ªÉ k√©o d√†i t·ª´ 2 tu·∫ßn t·ªõi 1 th√°ng. N·∫øu b·∫°n ·ªü VN t√¨m vi·ªác b√™n n√†y th√¨ m√¨nh nghƒ© n√™n apply nhi·ªÅu c√¥ng ty c√πng m·ªôt l√∫c ƒë·ªÉ ƒë·ª° t·ªën th·ªùi gian, v√† s·∫Ω c√≥ l·ª£i th·∫ø deal offer h∆°n (n·∫øu c√≥ nhi·ªÅu offer c√πng l√∫c).\nTh·∫≠t ra ·ªü VN m√¨nh ch·ªâ m·ªõi l√†m ·ªü 2 ch·ªó n√™n c≈©ng kh√¥ng r√µ t√¨nh h√¨nh chung. Nh∆∞ng qua n√≥i chuy·ªán v·ªõi b·∫°n b√® m√¨nh ·ªü nh·ªØng c√¥ng ty kh√°c th√¨ th·∫•y quy tr√¨nh ph·ªèng v·∫•n kh√° nhanh g·ªçn, kh√¥ng nhi·ªÅu v√≤ng nh∆∞ b√™n n√†y.\nKh√°c M·∫∑c d√π nhu c·∫ßu th·ªã tr∆∞·ªùng lao ƒë·ªông ·ªü x·ª© T√¢n Gia Ba n√†y kh√° cao, vi·ªác xin ƒë·ªãnh c∆∞ l·∫°i qu√° ∆∞ kh√≥ khƒÉn. M√¨nh bi·∫øt c√≥ nhi·ªÅu anh ch·ªã ·ªü ƒë√¢y c≈©ng ƒë√£ ng√≥t ngh√©t ch·ª•c nƒÉm, gia ƒë√¨nh nh√† c·ª≠a ƒë·∫ßy ƒë·ªß, nh∆∞ng c≈©ng ch∆∞a xin ƒë∆∞·ª£c PR (permanent resident), t·ª©c th∆∞·ªùng tr√∫ nh√¢n. C√≥ ng∆∞·ªùi c√≤n b·ªè cu·ªôc t·ª´ trong suy nghƒ©, ch·∫≥ng bu·ªìn th·ª≠ n·ªØa l√† üòÖ. C≈©ng ch√≠nh v√¨ l·∫Ω v·∫≠y m√† c√≥ xu th·∫ø l√† c√°c b·∫°n tr·∫ª l√†m ·ªü Sing v√†i nƒÉm ƒë·ªÉ l√†m b√†n ƒë·∫°p ƒëi x·ª© M·ªπ, √Çu üõ´.\n\u0026hellip;\nC√°m ∆°n v√¨ ƒë√£ d√†nh th·ªùi gian scroll ƒë·ªçc ƒë·∫øn cu·ªëi b√†i üôá. ƒê·ª´ng ng·∫ßn ng·∫°i comment n·∫øu b·∫°n c√≥ ƒëi·ªÅu g√¨ th√∫ v·ªã mu·ªën chia s·∫ª.\n","href":"/misc/sg-vs-sg-2/","title":"SG vs. SG (p2)"},{"content":" M√¨nh sang Singapore l√†m vi·ªác k·ªÉ t·ª´ cu·ªëi th√°ng 2\u0026frasl;2018. ƒê·∫øn nay ƒë√£ ng√≥t ngh√©t m·ªôt nƒÉm‚Ä¶ Nhi·ªÅu b·∫°n hay h·ªèi m√¨nh m·∫•y c√¢u h·ªèi nh∆∞ ‚Äús·ªëng b√™n ƒë√≥ ra sao?‚Äù, ‚Äúc√≥ g√¨ kh√°c so v·ªõi VN?‚Äù, ‚Äúc√¥ng vi·ªác b·ªÉn c√≥ g√¨ kh√°c ·ªü VN kh√¥ng?‚Äù. M√¨nh tr·∫£ l·ªùi nh·ªØng c√¢u h·ªèi n√†y c≈©ng nhi·ªÅu l·∫ßn n√™n ch·∫Øc vi·∫øt c√°i post cho m·ªçi ng∆∞·ªùi ƒë·ªçc. M·ªët ai h·ªèi th√¨ quƒÉng link ƒë·ªçc cho l·∫π üòÇ.\nD∆∞·ªõi ƒë√¢y l√† m·ªôt v√†i so s√°nh vui gi·ªØa Singapore v√† Vi·ªát nam (l·∫•y S√†i G√≤n l√†m ƒë·∫°i di·ªán). Dƒ© nhi√™n, nh·ªØng so s√°nh n√†y mang t√≠nh ch·ªß quan l√† ch·ªß y·∫øu, v√† ch·ªâ ƒë√∫ng ·ªü th·ªùi ƒëi·ªÉm hi·ªán t·∫°i.\nüìù SG vs. SG t·ª©c l√† Singapore vs. S√†i G√≤n.\nCu·ªôc s·ªëng Giao th√¥ng  Ph∆∞∆°ng ti·ªán c√¥ng c·ªông ·ªü Singapore ph√°t tri·ªÉn h∆°n nhi·ªÅu. B·∫°n c√≥ th·ªÉ ƒëi t√†u ƒëi·ªán (MRT) ho·∫∑c xe bu√Ωt. T√†u ƒëi·ªán th√¨ c·ª© 2 ph√∫t l√† c√≥ m·ªôt chuy·∫øn, n√™n nh·ª° c√≥ l·ª° chuy·∫øn n√†y c≈©ng kh√¥ng c·∫£m th·∫•y b·ª±c d·ªçc (m√¨nh thu·ªôc tu√Ωp ng∆∞·ªùi s·ªëng thong th·∫£, n√™n √≠t khi m√† h·ªëi h·∫£ cho k·ªãp t√†u). C√≤n xe bu√Ωt th√¨ kho·∫£ng th·ªùi gian c√°ch gi√£n gi·ªØa 2 chuy·∫øn l√¢u h∆°n (th∆∞·ªùng th√¨ ~10 ph√∫t). Nh∆∞ng m√† b√™n n√†y d√πng m·∫•y c√°i apps l√† bi·∫øt ƒë∆∞·ª£c kho·∫£ng bao l√¢u n·ªØa xe bu√Ωt t·ªõi (real-time) n√™n ti·ªán cho vi·ªác s·∫Øp x·∫øp di chuy·ªÉn. N·∫øu nh∆∞ ·ªü VN, m·∫•y c√°i t·∫°p ho√° ·ªü ga b√°n chi·∫øu cho h√†nh kh√°nh l√™n t√†u tr·∫£i n·∫±m cho ph·∫ª, th√¨ ·ªü Singapore, ga t√†u c·∫•m ƒÉn u·ªëng (n·∫øu vi ph·∫°m th√¨ ph·∫°t ti·ªÅn).\n Tr·∫£i nghi·ªám Grab (4 b√°nh) ·ªü Singapore th√≠ch h∆°n. V√¨ ƒë∆∞·ªùng c√°i th√™nh thang, xe ch·∫°y 80-100km/h, v√®o m·ªôt c√°i l√† t·ªõi n∆°i. C√≤n ·ªü VN, do k·∫πt xe, v√† ƒë∆∞·ªùng x√° ch·∫≠t h·∫πp, nhi·ªÅu ·ªï g√†, ·ªï voi\u0026hellip; n√™n nhi·ªÅu l√∫c b·∫Øt GrabBike ƒëi nhanh h∆°n GrabCar :)).\n  ƒêi ch∆°i  M√¨nh √≠t khi ƒëi ch∆°i, n√™n c≈©ng kh√¥ng c√≥ s·ª± so s√°nh ƒë·∫ßy ƒë·ªß h∆°n. Nh∆∞ng m√¨nh ƒë·ªÉ √Ω th·∫•y l√† ·ªü Singapore, t·ª´ ƒê√¥ng sang T√¢y, t·ª´ B·∫Øc xu·ªëng Nam, ƒë·ªÅu m·ªôt v·∫ª: ph·ªë x√° cao sang, s·∫ßm u·∫•t. C√≤n ·ªü S√†i G√≤n th√¨ c√≥ th·∫•y s·ª± kh√°c bi·ªát gi·ªØa c√°c qu·∫≠n. Q1 nh·ªôn nh·ªãp; B√¨nh Ch√°nh, H√≥c M√¥n d√¢n d√£; Q4 x·ªôc x·ªách\u0026hellip;  ƒÇn u·ªëng  C√°i n√†y th√¨ kh·ªèi n√≥i, S√†i G√≤n ƒÉn ƒë·ª©t :v. ·ªû S√†i S√≤n n√≥i ri√™ng v√† VN n√≥i chung, m·ªü m·∫Øt ra, ƒëi v√†i b∆∞·ªõc l√† ƒë√£ c√≥ ƒë·ªì ƒÉn. ƒê·ªì ƒÉn ngon, ƒëa d·∫°ng, l√∫c n√†o c≈©ng c√≥. C√≤n b√™n Singapore th√¨ ƒë·ªì ƒÉn th∆∞·ªùng ƒë∆∞·ª£c b√°n t·∫≠p trung ·ªü nh·ªØng khu ƒÉn u·ªëng (food court/center), v√† c√≥ gi·ªõi h·∫°n khung gi·ªù b√°n. Nh∆∞ c√°i food court ch·ªó m√¨nh th√¨ kho·∫£ng 8 gi·ªù t·ªëi l√† ƒë√≥ng c·ª≠a r·ªìi. C√≥ l·∫ßn m√¨nh v·ªÅ th·∫•y food court ƒë√≥ng c·ª≠a, kh√¥ng c√≥ g√¨ ƒÉn n√™n v√†o si√™u th·ªã mua m√¨ g√≥i v·ªÅ nh√† ch·∫ø ƒÉn. Th·∫•y t·ªßi gh√™ g·ªõm.\n V·ªÅ kh·∫©u v·ªã th√¨ n√≥i chung ƒë·ªì ƒÉn ·ªü Singapore c≈©ng kh√¥ng ƒë·∫øn n·ªói d·ªü. Nh∆∞ng do ·ªü VN ƒÉn ngon quen r·ªìi, n√™n m√¨nh ch·ªâ th√≠ch ƒÉn m√≥n Vi·ªát th√¥i. √Ä, ƒë·ªì ƒÉn Vi·ªát b√™n n√†y b√°n h∆°i b·ªã m·∫Øc üòÑ. May l√† m√¨nh c≈©ng l·∫≠n l∆∞ng ƒë∆∞·ª£c m·∫•y m√≥n Vi·ªát n·∫•u ƒÉn ƒë·ª° th√®m.\n  M√¥i tr∆∞·ªùng s·ªëng  So v·ªõi S√†i G√≤n th√¨ m√¨nh th·∫•y s·ªëng ·ªü Singapore th√≠ch h∆°n. Kh√≠ h·∫≠u ·ªü Singapore c≈©ng na n√° v·ªõi kh√≠ h·∫≠u ·ªü S√†i G√≤n, c≈©ng ‚Äúc√≥ hai m√πa v·∫´n ƒëi v·ªÅ, c√≥ con ƒë∆∞·ªùng n·∫±m nghe n·∫Øng m∆∞a‚Äù. Tuy nhi√™n b√™n Singapore nhi·ªÅu c√¢y c·ªëi h∆°n, s·∫°ch s·∫Ω h∆°n. ƒê∆∞·ªùng x√°, l·ªëi ƒëi cho ng∆∞·ªùi ƒëi b·ªô, h·∫ßu h·∫øt c√≥ m√°i che. Nhi·ªÅu l√∫c m√πa m∆∞a kh√¥ng ƒëem d√π/√¥ c≈©ng kh√¥ng ph·∫£i l√† v·∫•n ƒë·ªÅ l·ªõn. C√≤n ·ªü S√†i G√≤n, v√†o m√πa m∆∞a l√† l√∫c n√†o c≈©ng ph·∫£i th·ªß s·∫µn c√°i √°o m∆∞a trong c·ªëp xe.\n M√¨nh th·∫•y Singapore ch·ªâ ƒë√¥ng ƒë√∫c, nh·ªôn nh·ªãp ·ªü m·∫•y khu trung t√¢m mua s·∫Øm, th∆∞∆°ng m·∫°i v√† vƒÉn ph√≤ng l√†m vi·ªác th√¥i. Ch·ª© m·∫•y HDB (chung c∆∞ nh√† n∆∞·ªõc), Condo (chung c∆∞ t∆∞ nh√¢n), th√¨ r·∫•t y√™n tƒ©nh. Nhi·ªÅu l√∫c t·ª± h·ªèi, m·∫•y to√† nh√† cao v·∫ßy m√† ng∆∞·ªùi ta ƒëi ƒë√¢u h·∫øt tr∆°n r·ªìi :)).\n Singapore an to√†n, √≠t ph·ª©c t·∫°p. B√™n n√†y, m√¨nh tho·∫£i m√°i m√≥c ƒëi·ªán tho·∫°i ra x√†i m√† kh√¥ng c·∫ßn ph·∫£i quan ng·∫°i b·ªã c∆∞·ªõp gi·ª±t. Kh√¥ng c·∫ßn ph·∫£i kho√° c·ª≠a m·ªói khi ƒëi ra ngo√†i, c≈©ng nh∆∞ khi ƒëi ng·ªß. C√≥ v√†i ng∆∞·ªùi b·∫°n c·ªßa m√¨nh k·ªÉ l√†, h·ªç ƒëi r√∫t ti·ªÅn m√† qu√™n ti·ªÅn, ho·∫∑c th·∫ª ·ªü tr·ª• ATM, nh∆∞ng m√† kh√¥ng b·ªã m·∫•t m√°t. M·ªôt ph·∫ßn ƒë∆∞·ª£c v·∫≠y l√† do b√™n n√†y ·ªü ƒë√¢u c≈©ng c√≥ camera c√¥ng c·ªông. Ng∆∞·ª£c l·∫°i, ·ªü VN th√¨ l√¢u l√¢u ph·∫£i xem th·ª≠ c√°i b√≥p c√≤n n·∫±m trong t√∫i kh√¥ng. Trong nh√† l√¢u l√¢u ph·∫£i ngh√≠a coi xe c√≤n ƒë√≥ kh√¥ng üòû.\n D√¢n b√™n n√†y ch·ªãu kh√≥ x·∫øp h√†ng gh√™. ·ªû m·∫•y food court, c√≥ m·∫•y h√†ng qu√°n m√† ng∆∞·ªùi ta x·∫øp h√†ng d√†i n∆∞·ªùm n∆∞·ª£p. Nh√¨n c√°i h√†ng r·ªìng r·∫Øn v·∫≠y m√† v·∫´n nhi·ªÅu ng∆∞·ªùi v√†o x·∫øp.\n Gi·ªù sinh ho·∫°t b√™n n√†y tr·ªÖ h∆°n ·ªü VN. B√™n n√†y m√¨nh th∆∞·ªùng d·∫≠y t·∫ßm 8 r∆∞·ª°i ho·∫∑c 9 gi·ªù s√°ng (nhi·ªÅu khi n∆∞·ªõng t·ªõi g·∫ßn 10 gi·ªù). Cho n√™n th·∫•y 2 ng√†y cu·ªëi tu·∫ßn tr√¥i qua nhanh nh∆∞ ch·ªõp m·∫Øt. S√°ng d·∫≠y ƒëi ƒÉn s√°ng, xong 1 v√†i ti·∫øng k·∫ø ƒëi ƒÉn tr∆∞a, lay hoay k·∫ø ƒëi ƒÉn t·ªëi :)). ·ªû VN th√¨ c·∫£m th·∫•y 1 ng√†y tr√¥i qua ch·∫≠m h∆°n. S√°ng 6 r∆∞·ª°i ho·∫∑c 7g s√°ng l√† d·∫≠y r·ªìi, u·ªëng cafe ng·ªìi m·ªôt ƒë·ªói l√¢u, ng√≥ ƒë·ªìng h·ªì th·∫•y m·ªõi c√≥ 10 gi·ªù üòÇ‚Ä¶ C√≥ l·∫Ω b·∫°n ƒëang nghƒ©, c√°i n√†y ho√†n to√†n do b·∫£n th√¢n th√¥i ch·ª© ·ªü Singapore hay ·ªü VN c≈©ng ƒë·ªÅu 24 ti·∫øng m·ªôt ng√†y; mu·ªën d·∫≠y 7g th√¨ d·∫≠y th√¥i‚Ä¶ ·ª™ ƒë√∫ng, nh∆∞ng m√† gi·ªù m·ªü c·ª≠a c·ªßa food court, gi·ªù t√†u ƒëi·ªán b·∫Øt ƒë·∫ßu ch·∫°y c√≥ ·∫£nh h∆∞·ªüng ƒë·∫øn gi·ªù gi·∫•c sinh ho·∫°t c·ªßa b√† con ch·ª© h·ªâ!\nüìù Fun fact: m·∫∑c d√π Singapore l√† GMT+8 (s·ªõm 1g cho v·ªõi VN), nh∆∞ng v·ªÅ v·ªã tr√≠ ƒë·ªãa l√Ω th√¨ b√™n n√†y tr·ªÖ h∆°n VN. Cho n√™n b√™n n√†y 7g t·ªëi m√† nh√¨n s√°ng tr∆∞ng.\n \u0026hellip;\n  C√≤n ti·∫øp\u0026hellip;\n","href":"/misc/sg-vs-sg-1/","title":"SG vs. SG (p1)"},{"content":" T·ªïng quan  Nh√¨n chung, 2018 ƒë·ªëi v·ªõi m√¨nh l√† nƒÉm c·ªßa c√¥ng vi·ªác. ƒê√¢y l√† nƒÉm ƒë·∫ßu ti√™n m√¨nh s·ªëng ·ªü n∆∞·ªõc ngo√†i. V√¨ Sing c≈©ng l√† m·ªôt n∆∞·ªõc √Å ch√¢u n√™n cu·ªôc s·ªëng c≈©ng d·ªÖ th√≠ch nghi.  C√¥ng vi·ªác  Cho ƒë·∫øn th·ªùi ƒëi·ªÉm hi·ªán t·∫°i, m√¨nh th·∫•y h√†i l√≤ng v·ªõi c√¥ng vi·ªác hi·ªán t·∫°i. H√†i l√≤ng ·ªü ƒë√¢y kh√¥ng ph·∫£i l√† an b√†i m√† c√≥ nghƒ©a l√† m√¨nh th·∫•y c√≥ th·ª≠ th√°ch, c√≥ ƒëi·ªÅu ki·ªán ph√°t tri·ªÉn. M√¨nh ƒë∆∞·ª£c g·∫∑p v√† l√†m vi·ªác v·ªõi nhi·ªÅu ng∆∞·ªùi gi·ªèi, m·ªói ng∆∞·ªùi c√≥ nh·ªØng th·∫ø m·∫°nh kh√°c nhau: ng∆∞·ªùi th√¨ gi·ªèi m·∫£ng n√†y, ng∆∞·ªùi th√¨ gi·ªèi m·∫£ng kia. Fun fact: v√¨ c√¥ng ty nhi·ªÅu ng∆∞·ªùi, nhi·ªÅu tech families, n√™n c√≥ c∆° h·ªôi l√†m vi·ªác v·ªõi nhi·ªÅu th·ªÉ lo·∫°i developers/QAs/PMs/Designers trong c√°i danh s√°ch \u0026ldquo;How to Deal with Difficult People on Software Projects\u0026rdquo; n√†y :)). So v·ªõi nh·ªØng c√¥ng ty tr∆∞·ªõc th√¨ ·ªü ch·ªó n√†y c√≥ nh·ªØng ƒëi·ªÉm n√†y n·ªïi b·∫≠t:  Software process chu·∫©n h∆°n. C√≥ sprint planning, daily standup, release process, on-call duty\u0026hellip; Cho n√™n m√¨nh nh√¨n th·∫•y ƒë∆∞·ª£c qu√° tr√¨nh m·ªôt t√≠nh nƒÉng ƒë∆∞·ª£c delivered nh∆∞ th·∫ø n√†o. VƒÉn h√≥a code review. M·ªói ng√†y, m·ªói ng∆∞·ªùi ph·∫£i d√†nh ra m·ªôt kho·∫£ng th·ªùi gian ƒë·ªÉ code review nh·ªØng merge requests c·ªßa ng∆∞·ªùi kh√°c. Th√¥ng qua code review th√¨ c·∫£ ng∆∞·ªùi review l·∫´n ng∆∞·ªùi ƒë∆∞·ª£c review ƒë·ªÅu h·ªçc th√™m nhi·ªÅu th·ª©. H·ªìi x∆∞a m√¨nh hay g·ª≠i t√¢m t∆∞ v√†o trong code, nh∆∞ng gi·ªù th√¨ kh√¥ng d√°m n·ªØa\u0026hellip; V√¨ th·ªÉ n√†o c≈©ng b·ªã review üòÇ. Ch√∫ tr·ªçng ƒë·∫øn code quality. Code review l√† m·ªôt c√°ch ƒë·ªÉ ƒë·∫£m b·∫£o c√≥ ch·∫•t l∆∞·ª£ng t·ªët. Ngo√†i ra, team lu√¥n lu√¥n c√≥ engineering work. M·ªói sprint (k√©o d√†i 2 tu·∫ßn), ngo√†i nh·ªØng t√≠nh nƒÉng (features), ƒë·ªÅu c√≥ engineering tasks\u0026hellip; C≈©ng ph·∫£i th√¥i, v√¨ \u0026ldquo;code quality implies product quality\u0026rdquo; m√† üôÇ.  \u0026ldquo;·ªû ƒë√¢u c≈©ng c√≥ anh h√πng, ·ªü ƒë√¢u c≈©ng c√≥ ng∆∞·ªùi kh√πng ng∆∞·ªùi ƒëi√™n\u0026rdquo;. Dƒ© nhi√™n ·ªü ƒë√¢u c≈©ng c√≥ v·∫•n ƒë·ªÅ, kh√¥ng c√°i n√†y th√¨ c≈©ng c√°i kh√°c. ƒêi k√®m v·ªõi nh·ªØng l·ª£i √≠ch l√† nh·ªØng tr√°ch nhi·ªám v√† √°p l·ª±c. C√≥ nh·ªØng l√∫c m√¨nh c·∫£m th·∫•y kh√° √°p l·ª±c, v√¨ ph·∫£i ƒë·∫£m tr√°ch nh·ªØng v√†i tr√≤ m·ªõi (ko ph·∫£i lead nha, ƒë·ª´ng hi·ªÉu nh·∫ßm), nhi·ªÅu c√¥ng vi·ªác h∆°n, ƒë√≤i h·ªèi nhi·ªÅu k·ªπ nƒÉng h∆°n. Nh∆∞ng d·∫ßn r·ªìi quen üôÇ. Ai c≈©ng th·∫ø! M√¨nh ph·∫£i th·ª´a nh·∫≠n l√† m√¨nh code h∆°i b·ªã ch·∫≠m :(.  Ph√°t tri·ªÉn c√° nh√¢n Th·ªÉ ch·∫•t  ƒê√¢y l√† m·ªôt ƒëi·ªÉm m√¨nh c·∫ßn ph·∫£i c·∫£i thi·ªán trong nƒÉm t·ªõi. Qua Singapore, m·∫∑c d√π ƒëi b·ªô nhi·ªÅu h∆°n, nh∆∞ng m√¨nh c·∫£m th·∫•y r·∫±ng m√¨nh √≠t v·∫≠n ƒë·ªông h∆°n. Th·∫•y ng∆∞·ªùi l√∫c n√†o c≈©ng trong tr·∫°ng th√°i m·ªèi m·ªát. C√≥ 2 v·∫•n ƒë·ªÅ ch√≠nh m√¨nh c·∫ßn ph·∫£i c·∫£i thi·ªán.  Th·ª© nh·∫•t l√† gi·∫•c ng·ªß. T·ª´ ng√†y qua Sing, m√¨nh hay b·ªã m·∫•t ng·ªß (c·∫£ nh·ªØng ng√†y u·ªëng cafe v√† kh√¥ng u·ªëng cafe). Ng·ªß d·∫≠y m·ªát m·ªèi, trong ng∆∞·ªùi kh√≥ ch·ªãu, t√¢m tr·∫°ng c√°u k·ªânh, n√™n c≈©ng ph·∫ßn n√†o ·∫£nh h∆∞·ªüng ƒë·∫øn ch·∫•t l∆∞·ª£ng c√¥ng vi·ªác v√† nƒÉng su·∫•t l√†m vi·ªác. Th·ª© nh√¨ l√† th√≥i quen sinh ho·∫°t. Ng·ªß tr·ªÖ, d·∫≠y tr·ªÖ, ƒÉn tr·ªÖ\u0026hellip; ‚ò†   Tinh th·∫ßn  NƒÉm ni b·ªã ngh√®o n√†n tr·∫£i nghi·ªám. M√¨nh ch·∫≥ng ƒëi ƒë√¢u s·∫•t. To√†n ru r√∫ trong nh√†. C∆° m√†\u0026hellip; D√π g√¨ th√¨ s·ªëng b√™n Sing b·∫£n th√¢n n√≥ c≈©ng l√† m·ªôt tr·∫£i nghi·ªám m·ªõi r·ªìi. C√≥ l·∫Ω m√¨nh d√†nh nhi·ªÅu th·ªùi gian v√† s·ª©c l·ª±c cho c√¥ng vi·ªác n√™n th·∫•y m·∫•t thƒÉng b·∫±ng gi·ªØa cu·ªôc s·ªëng v√† c√¥ng vi·ªác (work-life balance). N√≥i v·ªÅ chuy·∫øn ƒëi th√¨ m√¨nh ch·ªâ ƒëi Bintan (·ªü Indo) v√† Joho Bahru (·ªü Maylay) th√¥i. C√≤n l·∫°i l√†\u0026hellip; ƒëi v·ªÅ VN thƒÉm gia ƒë√¨nh, ti·ªán th·ªÉ ƒÉn b√°nh m√¨ tu·∫•n m·∫≠p, b√∫n b√≤, m√≥n qu·∫£ng\u0026hellip; v√† ƒÉn c∆°m m√° n·∫•u üòç. NƒÉm nay ch·∫≥ng ƒë·ªçc s√°ch chi. M·∫•y cu·ªën s√°ch k·ªπ thu·∫≠t ƒëang ƒë·ªçc c√≤n dang d·ªü\u0026hellip; V√† s·∫Ω c√≤n dang d·ªü ti·∫øp trong 1 th·ªùi gian n·ªØa ü§î.  Quan h·ªá x√£ h·ªôi  Th·∫≠t ng·ªô l√† qua Sing th√¨ th·∫•y m√¨nh k·∫øt b·∫°n v·ªõi nhi·ªÅu ng∆∞·ªùi Vi·ªát h∆°n l√† ·ªü VN. Nhi·ªÅu l√∫c th·∫•y Sing nh·ªè b√©, to√†n quen nhau x√† qu·∫ßn.  Ngo√†i l·ªÅ  Ai m√† ai nghƒ© r·∫±ng \u0026ldquo;th·∫±ng n√≥ s·ªëng ·ªü n∆∞·ªõc ngo√†i n√™n ch·∫Øc ti·∫øng Anh gi·ªèi l·∫Øm\u0026rdquo;, th√¨ sai l·∫ßm r·ªìi nghen üòû. ƒê√¢y c≈©ng l√† m·ªôt ƒëi·ªÅu m√† m√¨nh c·∫£m th·∫•y r·∫•t x·∫•u h·ªï. Mang ti·∫øng l√† ·ªü Sing g·∫ßn ng√≥t ngh√©t m·ªôt nƒÉm, m√† ti·∫øng Anh c·ªßa m√¨nh d·ªü √≤m. M√¨nh v·∫´n c√≤n c·∫£m th·∫•y kh√≥ khƒÉn trong vi·ªác giao ti·∫øp v√† di·ªÖn ƒë·∫°t. C√†ng x·∫•u h·ªï h∆°n khi ƒë·∫ßu nƒÉm 2018, m√¨nh ƒë√£ c√≥ d·ª± ƒë·ªãnh l√† s·∫Ω b·∫Øt ƒë·∫ßu t·ª± h·ªçc ti·∫øng Ph√°p t·ª´ gi·ªØa nƒÉm nay. M·ªôt ƒëi·ªÅu ƒë√°ng ti·∫øc l√† nƒÉm nay m√¨nh kh√¥ng blog th∆∞·ªùng xuy√™n v√¨ c√≥ nh·ªØng m·ªëi b·∫°n t√¢m kh√°c. Kh√¥ng ch·ª´ng c√°i blog ti·∫øp theo s·∫Ω l√† \u0026ldquo;2019 in review\u0026rdquo; üòì.  Ngo√†i l·ªÅ  ƒêi·ªÅu t·ª± h√†o nh·∫•t: N/A. S√°ch t√¢m ƒë·∫Øc nh·∫•t: N/A. Chuy·∫øn ƒëi mong ƒë·ª£i nh·∫•t: home üè°. Talk t√¢m ƒë·∫Øc nh·∫•t: Eugenia Cheng: \u0026ldquo;The Art of Logic: How to Make Sense in a World that Doesn\u0026rsquo;t\u0026rdquo; Subscription t√¢m ƒë·∫Øc nh·∫•t: 3Blue1Brown \u0026hellip;  ","href":"/misc/2018-in-review/","title":"üìù T·ªïng k·∫øt nƒÉm 2018"},{"content":" Continue from the previous post, we will look into a few problems when working with lazy var.\nProblems Problem 1: not working smoothly with structs Since the getter of lazy var is mutating, using it with structs sometimes requires extra work. For example, this code below does not compile:\nstruct Person { private lazy var name = \u0026#34;thuyen\u0026#34; var alias: String { return name } // error: Cannot use mutating getter on immutable } To make this code work, we have to explicitly declare getter of alias as mutating. But personally, I would rather not make an object mutable just in order to access a specific property.\nstruct Person { private lazy var name = \u0026#34;thuyen\u0026#34; var alias: String { mutating get { return name } } } Another approach is to wrap lazy var inside a class LazyBox, like in this article. We will later use this approach as we can handle more issues such as concurrency.\nfinal class LazyBox\u0026lt;T\u0026gt; { private var _value: T? private let compute: () -\u0026gt; T init(_ compute: @escaping () -\u0026gt; T) { self.compute = compute } var value: T { if let _value = _value { return _value } let v = compute() _value = v return v } } struct Person { private let _name = LazyBox\u0026lt;String\u0026gt; { \u0026#34;thuyen\u0026#34; } var alias: String { return _name.value } } Problem 2: concurrency Another problem is that lazy var is not thread-safe which means the closure can get executed multiple times due to accesses from different threads. This is also mentioned in the Apple documentation:\n If a property marked with the lazy modifier is accessed by multiple threads simultaneously and the property has not yet been initialized, there is no guarantee that the property will be initialized only once.\n To prevent race condition, a simple implementation is to lock every read to the value:\nfinal class LazyBox\u0026lt;T\u0026gt; { private let lock: Synchronizing = NSLock() private lazy var _lazyValue: T = compute() ... var value: T { return lock.sync { _lazyValue } } }extension Locking { func lock() func unlock() } protocol Synchronizing { func sync\u0026lt;T\u0026gt;(execute: () throws -\u0026gt; T) rethrows -\u0026gt; T } extension Locking { func sync\u0026lt;T\u0026gt;(execute: () throws -\u0026gt; T) rethrows -\u0026gt; T { defer { unlock() } lock() return try execute() } } // Let\u0026#39;s use NSLock for simplicity. Alternatives: DispatchQueue, pthread_mutex_t, semaphore... extension NSLock: Locking, Synchronizing { } Now, it works as expected. However, the computation should only occur in the first read access. Locking every read will hurt performance a bit. Therefore, a better implementation is to lock the computation instead.\nfinal class LazyBox\u0026lt;T\u0026gt; { ... var value: T { if let _value = _value { return _value } return lock.sync { // Perform computation here ... } } } Note that performing computation more than once is still fine as long as they are synchronous and later computation reuses the result of previous ones. We know for sure that in the next execution inside lock.sync, we definitely have _value computed. Then we can reuse that result, like this:\nfinal class LazyBox\u0026lt;T\u0026gt; { ... var value: T { if let _value = _value { return _value } return lock.sync { // Check again if the value is already computed (from the first one get called) if let _value = _value { return _value } let v = compute() _value = v return v } } } Benchmark I ran a performance test for the two implementations (locking computation only vs. locking every read). The result shows a significant performance gain for the former one (0.002s as compared to 0.065s). The code for the benchmark can be found here.\n","href":"/tech/swift-the-downsides-of-lazy-var-part-2/","title":"Swift: The downsides of lazy var (part 2)"},{"content":"","href":"/tags/ios/","title":"ios"},{"content":"","href":"/tags/swift/","title":"swift"},{"content":"Lazy evaluation is a really powerful technique which enhances app performance by avoiding unecessary computation. In Swift, apart from this advantage, it also brings convenience when it comes to coding style. For instance, I usually place the setup of a UI element in a closure instead of putting a whole bunch of code in viewDidLoad(). And when we need self for that setup, lazy comes to the rescue.\nprivate lazy var nameLabel: UILabel = { let label = UILabel() label.text = self.person.name // ... Further setup return label }() Putting aside the overhead complexity it adds to the compilation process, there are some more cases we need to pay attention.\nConsider this code:\nfinal class ViewController { private lazy var progressView: ProgressView = { let _progressView = ProgressView(delegate: self) // Further setup return _progressView }() ... } extension ViewController: ProgressViewDelegate { func progressViewUpdateProgress() { let value = progressView.value ... } } Everything seems pretty normal. But taking a closer look, we notice that there\u0026rsquo;s a chance that while progressView is being configured, it may be called which ends up executing the closure twice. This introduces some critical issues as the second call will overwrite the value in the first setup.\n// 1. execute closure // --\u0026gt; create, not yet return  // --\u0026gt; still marked progressView as \u0026#34;not yet initialized\u0026#34; let _progressView = ProgressView(delegate: self) // 2. delegate is called progressViewUpdateProgress() // 3. access progressView, but it is marked as \u0026#34;not yet initialized\u0026#34; since we didn\u0026#39;t reach the return // --\u0026gt; execute closure (again) let value = progressView.value  This twice execution can lead to a few issues as follows: - The creation may take forever, then the app crashes. - The second progressView is not set up properly. For example, if we first use progressView in view.addSubview(progressView), the first one is added to view but the second one does not have superview at all üò±. The assumption that progressView has superview is not true anymore.\n\u0026hellip;\nApparently, this should not be a limitation of the language. Rather, we should pay careful attention to such scenarios\u0026hellip; However, by using lazy var, the problem seems to hide quite cleverly.\nIn this example, we use lazy var just for convenience. But as a tradeoff, the app is more vulnerable. So\u0026hellip; Better change it to let to make things less unpredictable\u0026hellip;\nLet\u0026rsquo;s not abuse lazy üòõ.\n","href":"/tech/swift-the-downsides-of-lazy-var-part-1/","title":"Swift: The downsides of lazy var (part 1)"},{"content":"","href":"/categories/reasoning/","title":"Reasoning"},{"content":" C√πng gi·∫£i ƒë·ªÅ thi tuy·ªÉn sinh (v√†o l·ªõp 10 chuy√™n To√°n) Ph·ªï Th√¥ng NƒÉng Khi·∫øu, nƒÉm 2018 n√†o. Trong ƒë·ªÅ c√≥ m·ªôt c√¢u b·∫•t ƒë·∫≥ng th·ª©c nh∆∞ sau:\n B√†i 2 (2ƒë): Cho $a, b$ l√† 2 s·ªë nguy√™n th·ªèa m√£n $a^3 + b^3 \u0026gt; 0$\na) Ch·ª©ng minh r·∫±ng $a^3 + b^3 \\geq a + b \u0026gt; 0$\nb) Ch·ª©ng minh r·∫±ng $a^3 + b^3 \\geq a^2 + b^2$\nc) T√¨m t·∫•t c·∫£ c√°c b·ªô s·ªë nguy√™n $x, y, z, t$ sao cho $x^3 + y^3 = z^2 + t^2$ v√† $z^3 + t^3 = x^2 + y^2$\n L·ªùi gi·∫£i a) ƒêi·ªÅu ki·ªán $a^3 + b^3 \u0026gt; 0 $ t∆∞∆°ng ƒë∆∞∆°ng v·ªõi $a^3 \u0026gt; (-b)^3$ $\\implies a \u0026gt; -b \\implies a + b \u0026gt; 0$\nGi·ªù ta c·∫ßn ch·ª©ng minh $a^3 + b^3 \\geq a + b$, hay $S = a^3 + b^3 - (a + b) \\geq 0$.\nVai tr√≤ c·ªßa $a$ v√† $b$ nh∆∞ nhau n√™n b√†i to√°n kh√¥ng m·∫•t t√≠nh t·ªïng qu√°t khi ta gi·∫£ s·ª≠ $a \\geq b$.\n- TH1: N·∫øu $b \\geq 0$ th√¨ $a^3 \\geq a, b^3 \\geq b$ (v√¨ $a$, $b$ l√† 2 s·ªë nguy√™n kh√¥ng √¢m). Suy ra $a^3 + b^3 \\geq a + b$.\nD·∫•u b·∫±ng x·∫£y ra khi $a, b \\in \\{0, \\pm 1\\}$\n- TH2: N·∫øu $b \u0026lt; 0$. ƒê·∫∑t $c = -b$ v·ªõi $a \\geq c \\geq 1$.\nKhi ƒë√≥ $S = a^3 - c^3 - (a - c) = (a - c)(a^2 + c^2 + ac - 1) = (a - c) P$\nV√¨ $(a - c + 1)^2 \\geq 0$ n√™n $a^2 + c^2 + 1 - 2ac + 2a - 2c \\geq 0$\n$\\implies (a^2 + c^2 + ac - 1) - 3ac + 2a - 2c + 2 \\geq 0$\n$\\implies P \\geq 3ac - 2a + 2c - 2 = ac + 2(a + 1)(c - 1)$\n$\\implies P \u0026gt; 0 \\txt{(v√¨ } a \\geq c \\geq 1 \\txt{)}$\nSuy ra $S \\geq 0$. D·∫•u b·∫±ng x·∫£y ra khi $a = c$. L√∫c n√†y $a^3 = a \\implies a = c = 0, \\pm 1$\nG·ªôp c·∫£ hai ƒëi·ªÅu ki·ªán ta r√∫t ra k·∫øt lu·∫≠n: b·∫•t ƒë·∫±ng th·ª©c ƒë∆∞·ª£c ch·ª©ng minh v√† d·∫•u b·∫±ng x·∫£y ra khi $a, b \\in \\{0, \\pm 1\\}$ $\\quad\\blacksquare$.\n\u0026hellip;\nb) L·∫≠p lu·∫≠n t∆∞∆°ng t·ª± c√¢u a). ƒê·ªëi v·ªõi tr∆∞·ªùng h·ª£p $b \u0026lt; 0$ th√¨ x√©t $(a - c)^2 + (a - c) \\geq 0$.\nD·∫•u ƒë·∫≥ng th·ª©c x·∫£y ra khi $a, b \\in \\{0, 1\\}$.\n\u0026hellip;\nc) S·ª≠ d·ª•ng k·∫øt qu·∫£ c·ªßa c√¢u b), ta c√≥:\n$x^3 + y^3 \\geq x^2 + y^2= z^3 + t^3 \\geq z^2 + t^2$\nD·∫•u b·∫±ng x·∫£y ra khi $x, y \\in \\{0, 1\\}$ v√† $z, t \\in \\{0, 1\\}$. Th·∫ø v√†o ƒë∆∞·ª£c c√°c nghi·ªám:\n$(0, 0, 0, 0), (1, 1, 1, 1), (0, 1, 0, 1), (0, 1, 1, 0), (1, 0, 0, 1), (1, 0, 1, 0)$.\n","href":"/reasoning/toan-tuyen-sinh-ptnk-2018-p1/","title":"To√°n: Tuy·ªÉn sinh PTNK 2018 (p1)"},{"content":"","href":"/tags/maths/","title":"maths"},{"content":" Sometimes, I got frustrated with the fact that my SSH keys were cleared from agents after rebooting. As a result, I had to manually add those keys to agents every time my computer restarted (although it\u0026rsquo;s not occasional)\u0026hellip; It\u0026rsquo;s best to automate such tasks - I thought. So, I asked \u0026ldquo;how to run a shell script on login?\u0026rdquo;. And here are some solutions.\nOption 1: Automator  Open Automator. Choose Application from the templates. Choose Run Shell Script from the action list. Paste your code there (see the figure below). For convenience, I launch another script which I could easily open and edit.  Save the application. Open System Preferences -\u0026gt; Users \u0026amp; Groups -\u0026gt; Login Items. Then, add the application you have just created.  Option 2: Daemons  Create a plist file in ~/Library/LaunchAgents (ex. com.thuyen.loginscript.plist):  \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE plist PUBLIC \u0026#34;-//Apple Computer//DTD PLIST 1.0//EN\u0026#34; \u0026#34;http://www.apple.com/DTDs/PropertyList-1.0.dtd\u0026#34;\u0026gt; \u0026lt;plist version=\u0026#34;1.0\u0026#34;\u0026gt; \u0026lt;dict\u0026gt; \u0026lt;key\u0026gt;Label\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;com.thuyen.loginscript\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;ProgramArguments\u0026lt;/key\u0026gt; \u0026lt;array\u0026gt;\u0026lt;string\u0026gt;/Users/thuyentrinh/scripts/on_login.sh\u0026lt;/string\u0026gt;\u0026lt;/array\u0026gt; \u0026lt;key\u0026gt;RunAtLoad\u0026lt;/key\u0026gt; \u0026lt;true/\u0026gt; \u0026lt;/dict\u0026gt; \u0026lt;/plist\u0026gt; üîñ Note: For some reasons, the plist does not work with the executable path like ~/scripts/on_login.sh (~ for HOME directory). Explicit path /Users/thuyentrinh/scripts/on_login.sh solves the problems\u0026hellip; My MacOS is 10.13; maybe that matters üôÑ. I did not test it in earlier MacOS versions.\n Load the daemon:\nlaunchctl load ~/Library/LaunchAgents/com.thuyen.loginscript.plist You could verify if the daemon is loaded by listing out services\nlaunchctl list | grep loginscript  Reference  Launch shell script silently at login Daemons and Services Programming Guide Stackoverflow thread: Running script upon login mac  ","href":"/tech/config-run-shell-script-on-login/","title":"Config: Run shell script on login"},{"content":"","href":"/tags/command-line/","title":"command-line"},{"content":"","href":"/tags/config/","title":"config"},{"content":"","href":"/categories/reading/","title":"Reading"},{"content":"[5] Flavors of Engineering Management  #software-engineering #management - Benjamin pointed out some different types of engineering management. The three mentioned varies from responsibilities, team size and coverage of expertise. - One key thing I take from the post is the potential risk of the combination of multiple roles in a single person.\n One of the biggest risks is micromanagement because the manager still works as a contributor on the team. Another risk lies in the combination of technical and people leadership in a single role. In most cases the teach lead engineering manager should try to turn someone on their team into a technical leader (without people responsibility), such that the team depends less on a single person\n [4] Leaky abstractions in Swift with DispatchQueue  #ios #multi-threading #dispatch - üò± Such a weird behavior!\n[3] ƒê√°nh gi√° ƒê·∫°i H·ªçc: Theo ti√™u ch√≠ n√†o? \n[2] Teaching Novice Programmers How to Debug Their Code  #advice #debugging #problem-solving - I first read this article last year. Today, I revisited it and, still, it inspired me\u0026hellip; a lot. Indeed, sometimes debugging mode takes way more time than programming mode. To become an experienced developers, we should also invest in debugging skill which is the result of habitual actions such as providing context/info for others, listing and testing (hidden) assumptions.\n[1] Bitcoin: bong b√≥ng hay gi√° tr·ªã th·ª±c?  #bitcoin #cryptocurrency #blockchain - B√†i vi·∫øt r·∫•t hay. T√°c gi·∫£ so s√°ng, ph√¢n t√≠ch r·∫•t thuy·∫øt ph·ª•c v·ªÅ nh·ªØng l·ª£i √≠ch ·ªßa bitcoin n√≥i ri√™ng v√† ti·ªÅn ƒëi·ªán t·ª≠ n√≥i chung v·ªõi lo·∫°i h√¨nh ti·ªÅn t·ªá truy·ªÅn th·ªëng. B√†i vi·∫øt ch·ªâ ra nh·ªØng th√°ch th·ª©c c·ªßa ch√≠nh ph·ªß trong vi·ªác √°p d·ª•ng ti·ªÅn ƒëi·ªán t·ª≠. ƒê·ªìng th·ªùi, m·ªôt d·ª± ƒëo√°n sau ch√≥t c·ªßa t√°c gi·∫£ l√†: m√¥ h√¨nh ti·ªÅn t·ªá n√†y s·∫Ω c√≥ th·ªÉ ƒë∆∞·ª£c s·ª± d·ª•ng ch√≠nh th·ª©c, nh∆∞ng s·∫Ω l√† m·ªôt ƒë·ªìng ti·ªÅn ƒë∆∞·ª£c ƒëi·ªÅu khi·ªÉn v√† qu·∫£n l√Ω b·ªüi ch√≠nh ph·ªß.\n","href":"/reading/reading-week-08-feb-19-feb-25/","title":"Reading: Week 08, Feb 19 - Feb 25"},{"content":" Markov chain is a very important piece of probability and statistics. One application we could name is Markov Decision Process (MDP) used for decision making. Another one is Markov chain Monte Carlo (MCMC), a popular sampling method in statistics. You may also know Google PageRank algorithm, which is part of the ground of Google indexing technology. The algorithm is implemented on top of this concept.\nThis is a part of a series about Markov chain\u0026hellip; In this post, we will look into some of its fundamental concepts.\nDisclaimer: I am no expert in probability and statistics. These I am about to write are based on my understanding when reading the book \u0026ldquo;Introduction to Probability\u0026rdquo; by Joseph K. Blitzstein and Jessica Hwang. Please refer to this amazing book for details.\n\u0026hellip;\nSo, what is a Markov chain? Lets break this term into two pieces: Markov and chain. It\u0026rsquo;s a chain satisfying Markov property.\nWhat is a chain? A chain, in this context, is a sequence of random variables $X_0, X_1, \u0026hellip;, X_n$ taking values in the state space $\\{1, 2, \u0026hellip;, M\\}$. We can understand $X_n$ as states of a system evolving through time (the index $0, 1, \u0026hellip;, n$ is indicative of time).\nFor example, let $X_n$ be the random variable denoting the weather (either sunny (S), or rainy \u0026reg;) of the $n^{th}$ day from a specific day. Then, a chain of weathers is something like this: S ‚Üí S ‚Üí R ‚Üí S ‚Üí R ‚Üí S.\nAnother example: An English sentence is a sequence of characters. For simplicity, let\u0026rsquo;s consider sentences containing only lowercased characters in the English alphabet and spacing character. We can model a sentence using a chain of random variables with the state space is $\\{a, b, \u0026hellip;, z, \\txt{\u0026rdquo; \u0026ldquo;}\\}$. The intuition of time in this example is the order in which a character appears (ie. the index of that character). For instance, the text \u0026ldquo;hello\u0026rdquo; is a chain where $X_1 = \u0026ldquo;h\u0026rdquo;, X_2 = \u0026ldquo;e\u0026rdquo;, X_3 = \u0026ldquo;l\u0026rdquo;, X_4 = \u0026ldquo;l\u0026rdquo;, X_5 = \u0026ldquo;o\u0026rdquo;$.\nMarkov property Markov property states that given the entire past history $X_0, X_1, \u0026hellip;, X_n$ , the prediction of $X_{n+1}$ only depends on the latest term (aka. $X_n$).\n$$P(X_{n+1} = j | X_n = i, \\dim{X_{n-1} = i_{n-1}, \u0026hellip;, X_0 = i_0}) = P(X_{n+1} = j | X_n = i)$$\nConsider $X_n$ as the present, $X_{n+1}$ as the future, and $X_{n-1}, \u0026hellip;, X_0$ as the past, we have some interpretations:\n The future depends solely on the present, no matter how we got here It is the present, not the past that affects the future (sound philosophical üòÇ) The outdated information in the past does not have influence on the future outcomes  The English sentence example above does not practically satisfy Markov property. Let\u0026rsquo;s just ask this question: what is the likelihood that a space character follows letter \u0026ldquo;t\u0026rdquo;?. Intuitively, we know that there\u0026rsquo;s fairly possible that it happens (if \u0026ldquo;t\u0026rdquo; is at the end of the word, for instance). But when \u0026ldquo;t\u0026rdquo; is preceded a space character, there is much less likely that it is followed by a space character.\nSimilarly, the weather chain mentioned earlier may not fit well this property. Domain knowledge could show that the weather of a certain day can be influenced by 2 consecutive days ahead. However, we could adjust the chain to satisfy this property by expanding the state space that one describes the 2-consecutive-day weathers: $\\{SS, SR, RS, RR\\}$.\nDescribe a Markov chain We describe a Markov chain by its state space and how likely is it to move from one state to another.\nTransition matrix Let $q_{ij} = P(X_{n+1} = j | X_n = i)$ be the transition probability of going from state $i$ to state $j$. The $M \\times M$ matrix $Q = (q_{ij})$ is called the transition matrix of the chain.\nFor example, if today is sunny, there is 70% chance that tomorrow is sunny. Otherwise, if today is rainy, there is 50% chance that tomorrow is rainy. Then the transition matrix is given as follows:\n$$ Q = \\begin{pmatrix} 0.7 \u0026amp; 0.3 \\\\ 0.5 \u0026amp; 0.5 \\end{pmatrix} $$\nNote that each row in a transition matrix always sums to 1.\nThis Markov chain can be visualized as this graph:\nn-step transition probability n-step transition probability is the probability of reaching a state from another state after exactly $n$ steps. We denote it by: $q_{ij}^{(n)} = P(X_{n}=j | X_0=i)$.\nNow, consider the 2-step transition probability of a Markov chain. By marginal distribution, we have:\n$$ \\begin{aligned} q_{ij}^{(2)} \u0026amp;= P(X_{2} = j | X_0 = i) \\\\ \u0026amp;= \\sum_{k=1}^M P(X_{2} = j | X_{1} = k, X_0 = i) P(X_{1} = k | X_0 = i) \\\\ \u0026amp;= \\sum_{k=1}^M q_{kj} q_{ik} = \\txt{the} (i, j) \\txt{entry of} Q^2 \\end{aligned} $$\nSimilarly reasoning shows that $q_{ij}^{(n)}$ is the $(i, j)$ entry of $Q^n$.\nWith the weather example above, the matrix representing the 2-step transition probability is given by\n$$ Q^2 = \\begin{pmatrix} 0.64 \u0026amp; 0.36 \\\\ 0.6 \u0026amp; 0.4 \\end{pmatrix} $$\nwhich implies given that today is sunny, there is 36% chance it will rain two days later.\nNote that, in this example, we assume that the transition probability does not change along with time. Such Markov chain is called homogeneous or time-homogeneous.\nMarginal distribution of $X_n$ One may ask \u0026ldquo;What is the probability the system arrives at a specific state at certain time?\u0026rdquo;. Or what is $P(X_n = j)$?\nTo calculate this marginal distribution, we need to know the initial conditions of the system. Let $\\mathbf{t} = (t_1, \u0026hellip;, t_M)$ be the probability vector where $t_i = P(X_0 = i)$, denoting the probability that the system starts at state $i$. Then,\n$$ \\begin{aligned} P(X_{n} = j) \u0026amp;= \\sum_{i=1}^M P(X_0 = i) P(X_{n} = j | X_{0} = i) \\\\ \u0026amp;= \\sum_{i=1}^M t_i q_{ij}^{(n)} = \\txt{the }i^{th} \\txt{entry of} \\mathbf{t}Q^n \\end{aligned} $$\nSo, the marginal distribution of $X_n$ is encoded by $\\mathbf{t}Q^n$.\n\u0026hellip;\nNow, you may wonder what $P(X_n = j)$ looks like in the long run. Does it have any special behavior? We will look at it in the next part of the series.\n","href":"/tech/markov-chain-part-1/","title":"Markov chain: What is a Markov chain?"},{"content":"","href":"/tags/markov-chain/","title":"markov-chain"},{"content":"","href":"/tags/probability/","title":"probability"},{"content":"","href":"/tags/statistics/","title":"statistics"},{"content":"[8] M·ªôt v√†i ghi ch√∫ v·ªÅ CMS GC  #programming #gc - B√†i vi·∫øt r·∫•t hay. Th·∫≠t ra ƒë√¢y l√† m·ªôt concept chung cho c√°c ng√¥n ng·ªØ l·∫≠p tr√¨nh, kh√¥ng ri√™ng g√¨ Java. M·ªói ng√¥n ng·ªØ c√≥ th·ªÉ d√πng c√°c c∆° ch·∫ø d·ªçn r√°c kh√°c nhau\u0026hellip; C√°ch t·ªï ch·ª©c v√πng nh·ªõ ra c√°c v√πng Eden, Survivor, Tenured trong b√†i th√¨ Java-specific. Tuy nhi√™n, c√°ch ph√¢n ho·∫°ch v√† h√†nh vi nh∆∞ v·∫≠y gi·ªëng nh∆∞ h√†nh vi c·ªßa Copying collector (c·ª• th·ªÉ l√† Generational collector) nh·ªâ?? - M√¨nh c≈©ng c√≥ 1 b√†i note v·ªÅ c√°c thu·∫≠t to√°n GC: Garbage Collection (GC) algorithms, ch·ªß y·∫øu ghi v·∫Øn t·∫Øt t·ª´ m·ªôt c√°i b√†i vi·∫øt kh√°c: Visualizing Garbage Collection Algorithms.\n[7] Top mistakes in RxSwift you want to avoid  #ios #rxswift - #3 should be noticed!\n[6] Binary Frameworks in Swift  #ios #swift #ABI #compiler - A knowledge-rich article! The big picture is to achieve Source compatibility, Binary framework \u0026amp; runtime compatibility (including Module format stability and ABI stability)\u0026hellip; ABI stability enables using different libraries with different Swift versions. Once ABI stability is offered, developers will suffer less from Swift migration. Or we could use a pre-built components/libraries to speed up compile time (like what Carthage does). - This feature (ABI stability) was supposed to introduced along with Swift 4. But it was deferred and very much expected in Swift 5. - Read more at Swift ABI Stability Manifesto\n[5] The 3 Laws of TDD: Focus on One Thing at a Time  #ios #testing #tdd - The core principle of these 3 laws is building software incrementally: do a bit of this, then a bit of that. - Doing one thing at a time is a good way to prevent yourself from messing up. The more code you write, the less control you have. P/s: how \u0026ldquo;one\u0026rdquo; in \u0026ldquo;one thing\u0026rdquo; is conveyed really differs.\n[4] Scale or not scale  #scalability\n[3] Nghe nhanh: Overlock ƒë√¥i tai ƒë·∫øn 400%  #productivity #advice #personal-development - Th√∫ th·∫≠t l√† m√¨nh kh√¥ng th∆∞·ªùng xuy√™n nghe s√°ch n√≥i hay podcasts, n√™n c≈©ng √≠t x√†i k·ªπ thu·∫≠t n√†y. Nh∆∞ng khi xem video th√¨ m√¨nh hay tua nhanh, 1.3x - 1.5x tu·ª≥ video (n·∫øu video Ti·∫øng Vi·ªát th√¨ c√≥ th·ªÉ nhanh h∆°n). Nh·ªù c√°ch n√†y m√† m√¨nh th·∫•y b·ªõt ch√°n h∆°n, v√† xem video nhanh h∆°n. Chrome extension c√≥ th·ªÉ h·ªØu √≠ch: Video Speed Controller.\n[2] Ng∆∞·ªùi quan s√°t  - TIL: Actor-observer bias. - This explains why we are so harsh on others when they make mistakes whereas we tolerate ourselves (with the very same mistakes). - This blog post somehow reminds me of a TED-Ed video Why is Herodotus called ‚ÄúThe Father of History‚Äù?\u0026hellip; Prior to Herodotus, history was much biased by story tellers. Most of them tended to be exaggerated. Herodotus approached with a different way - by collecting evidences (from different sources). Although some of them may be biased, this method paved way for a revolutionized form of history which is more comprehensive.\n[1] X√¢y d·ª±ng th∆∞∆°ng hi·ªáu b·∫±ng scandal c√≥ ƒë∆∞·ª£c kh√¥ng?  - B√†i vi·∫øt n√†y h·∫≥n l√† ra ƒë·ªùi d·ª±a tr√™n c√°i v·ª• c·ªßa VietjetAir ƒë√≥n ti·∫øp U23VN. M√¨nh c≈©ng c·ª±c k·ª≥ th·∫•y ph·∫£n c·∫£m v·ªõi h√¨nh th·ª©c ƒë√≥n ti·∫øp h·∫øt s·ª©c v√¥ duy√™n n√†y. Nhi·ªÅu ng∆∞·ªùi l√™n ti·∫øng tr√™n m·∫°ng x√£ h·ªôi r·∫±ng h·ªç s·∫Ω t·∫©y chay h√£ng h√†ng kh√¥ng n√†y v√¨ n√≥ b√¥i nh·ªç h√¨nh t∆∞·ª£ng d√¢n t·ªôc. Tuy nhi√™n, m·ªôt c√°ch th·ª±c t·∫ø m√† n√≥i th√¨ ph·∫ßn l·ªõn nh·ªØng ng∆∞·ªùi ƒë√£ v√† ƒëang ch·ªçn h√£ng n√†y c≈©ng s·∫Ω v·∫´n ch·ªçn l·∫°i n√≥ v√¨ \u0026ldquo;gi√° r·∫ª\u0026rdquo;.\n","href":"/reading/reading-week-05-jan-29-feb-04/","title":"Reading: Week 05, Jan 29 - Feb 04"},{"content":"P/s: English below.\nM·∫∑c d√π kh√¥ng ph·∫£i fan b√≥ng ƒë√°, nh∆∞ng t√¥i ƒë√£ cho m√¨nh m·ªôt c∆° h·ªôi ƒë·ªÉ xem tr·∫≠n ƒë·∫•u ƒë∆∞·ª£c mong ƒë·ª£i n√†y. Ti·∫øc th·∫≠t, b√†n thua ·ªü nh·ªØng gi√¢y ph√∫t cu·ªëi c√πng lu√¥n lu√¥n ƒë·∫Øng nh·∫•t. Nh∆∞ ƒë√£ x√°c ƒë·ªãnh r√µ, b√≥ng ƒë√° kh√¥ng b√† con g√¨ nhi·ªÅu ƒë·∫øn t√¥i. Nh∆∞ng ch·ª©ng ki·∫øn m√†n thua nh∆∞ th·∫ø n√†y qu·∫£ khi·∫øn cho t√¥i th·∫•y c√≥ ch√∫t bu·ªìn. ƒê·ªôi tuy·ªÉn VN ƒë√° r·∫•t hay (nh∆∞ m·ªçi ng∆∞·ªùi nh·∫≠n x√©t), ch·ªâ thi·∫øu m·ªôt ch√∫t may m·∫Øn m√† th√¥i. May m·∫Øn ƒë√£ kh√¥ng m·ªâm c∆∞·ªùi v·ªõi U23 Vi·ªát nam ngay t·ª´ khi tuy·∫øt r∆°i r√¢m r√£. Ch·ªâ c√≥ s·ª± h√¢m m·ªô, y√™u m·∫øn c·ªßa c√°c ng∆∞·ªùi d√¢n VN l√† ƒë·ªìng h√†nh v·ªõi c√°c em \u0026hellip; √Çu c≈©ng l√† m·ªôt b√†i h·ªçc ƒë·ªÉ c√°c em kh√¥ng t·ª± ph·ª•, lu√¥n kh√¥ng ng·ª´ng ph·∫•n ƒë·∫•u\u0026hellip;\nNgo√†i tr·ªùi ƒëang m∆∞a t·∫ßm t√£, ph·ªë x√° h·∫≥n ƒë√£ tr√†n ng·∫≠p n∆∞·ªõc. Kh√¥ng bi·∫øt ngo√†i kia, m·ªçi ng∆∞·ªùi c√≥ ƒëi b√£o kh√¥ng nh·ªâ. Th·∫≠t ra t√¥i c≈©ng kh√¥ng h√¨nh dung n·ªïi \u0026ldquo;b√£o\u0026rdquo; s·∫Ω nh∆∞ th·∫ø n√†o v·ªõi nh·ªØng n·ªói bu·ªìn le l√≥i nh∆∞ v·∫≠y. T√¥i hy v·ªçng ƒë∆∞·ªùng x√°, m·∫∑c d√π tr·ªùi m∆∞a, v·∫´n kh√¥ng tr√†n ƒë·∫ßy s·ª± th·∫•t v·ªçng. T√¥i mong r·∫±ng s·ª± t·ª± h√†o bao tr√πm c·∫£ th√†nh ph·ªë, ch·ª© kh√¥ng ph·∫£i s·ª± th·ªïn th·ª©c c·ªßa nh·ªØng con tim bu·ªìn r·∫ßu\u0026hellip; U23 VN thua ƒë·ªôi tuy·ªÉn Uzbekistan, nh∆∞ng l·∫°i th·∫Øng h√†ng tri·ªáu con tim VN.\n\u0026hellip;\nDespite not being a fan of football, I gave me a chance to watch this very much anticipated match. Unfortunately, a last-minute goal has left millions of Vietnamese people in sadness and disappointment. As I told myself at first, football does not bring me much joy and interest. However, I have to confess that witnessing such bitter moment fairly upsets me\u0026hellip; The team showed off their talents and dedicated a well-played performance. Only a bit of luck is what\u0026rsquo;s missing\u0026hellip; In fact, fortune did not smile upon the whole team when they had to face such serve weather although people\u0026rsquo;s love provided them pretty much mental strength\u0026hellip; Anyway, this is also a lesson in order to keep them from conceit and push them forward.\nIt\u0026rsquo;s raining outside, roads must be full of water. I can\u0026rsquo;t imagine whether people will \u0026ldquo;go storming\u0026rdquo; with this hard-to-expressed feeling. I hope it\u0026rsquo;s pride, not disappointment, that covers every corner of the city. Despite being defeated by Uzbekistan, U23VN did win millions of Vietnamese\u0026rsquo;s hearts.\n","href":"/misc/tan-man-chung-ket-u23-chau-a/","title":"T·∫£n m·∫°n: Chung k·∫øt U23 Ch√¢u √Å"},{"content":"C√≥ nhi·ªÅu l·∫ßn m√¨nh th·∫•y c√≥ ng∆∞·ªùi h·ªèi nh·ªØng c√¢u h·ªèi khi·∫øn m√¨nh ƒë·ªçc v√†o ch·∫≥ng mu·ªën tr·∫£ l·ªùi (n·∫øu c√≥ kh·∫£ nƒÉng tr·∫£ l·ªùi). M·ªôt v√≠ d·ª• ƒëi·ªÉn h√¨nh l√† \u0026ldquo;anh ∆°i, sao c√°i n√†y em build kh√¥ng ƒë∆∞·ª£c?\u0026rdquo;. B·∫£n th√¢n m√¨nh c·∫£m th·∫•y ƒë√¢y l√† m·ªôt c√¢u h·ªèi r·∫•t chung chung v√† thi·∫øu th√¥ng tin. N·∫øu b·∫°n l√† dev th√¨ h·∫≥n l√† b·∫°n ƒë√£ ph·∫£i s·∫•p m·∫∑t v·ªõi nh·ªØng c√°i bugs m√† ta ph·∫£i ch·ª≠i b·ªõi c·∫£ ti·∫øng ƒë·ªìng h·ªì con b·ªç (bugs) m·ªõi nghe ƒëi·∫øc l·ªó tai m√† chui ra ngo√†i. ƒê√≥ l√† khi ta c√≥ ƒë·∫ßy ƒë·ªß th√¥ng tin. C√≤n thi·∫øu th√¥ng tin nh∆∞ tr√™n th√¨\u0026hellip; ta ch·ªâ bi·∫øt c√°ch ra ngo√†i v∆∞·ªùn b·∫Øt con b·ªç m√† tra kh·ªèi xem ƒë·ªìng b·ªçn c·ªßa n√≥ ·ªü ƒë√¢u trong c√°i m·ªõ code c·ªßa m√¨nh.\n[1] Trong gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ, n·∫øu b·∫°n ph√°t bi·ªÉu r√µ v·∫•n ƒë·ªÅ c·ªßa m√¨nh l√† ƒë√£ gi·∫£i ƒë∆∞·ª£c 50% b√†i to√°n r·ªìi. N√≥i v·∫≠y l√† ƒë·ªÉ cho th·∫•y t·∫ßm quan tr·ªçng c·ªßa vi·ªác hi·ªÉu v√† tr√¨nh b√†y v·∫•n ƒë·ªÅ. Gi·ªëng nh∆∞ To√°n h·ªçc, vi·ªác ph√°t bi·ªÉu ph·∫£i n√™u b·∫≠t ƒë∆∞·ª£c 2 ph·∫ßn gi·∫£ thi·∫øt v√† k·∫øt lu·∫≠n.\n K·∫øt lu·∫≠n ch√≠nh l√† m·ª•c ƒë√≠ch c·∫ßn ƒë·∫°t (m√† b·∫°n kh√¥ng ƒë·∫°t ƒë∆∞·ª£c). V√≠ d·ª•, b·∫°n mu·ªën ch∆∞∆°ng tr√¨nh ƒë∆∞·ª£c build th√†nh c√¥ng, nh∆∞ng th·ª±c t·∫ø tr√¨nh bi√™n d·ªãch l·∫°i b√°o l·ªói. Gi·∫£ thi·∫øt l√† nh·ªØng th√¥ng tin cho s·∫µn, l√† ng·ªØ c·∫£nh c·ªßa b√†i to√°n. V√≠ d·ª•, ƒë·ªÉ ch·∫°y ƒë∆∞·ª£c th√†nh c√¥ng b·∫°n ph·∫£i l√†m A -\u0026gt; B -\u0026gt; C, nh∆∞ng tr√™n th·ª±c t·∫ø b·∫°n ch·ªâ l√†m A -\u0026gt; C.  Nh∆∞ v·∫≠y, c√¢u h·ªèi \u0026ldquo;anh ∆°i, sao c√°i n√†y em build kh√¥ng ƒë∆∞·ª£c?\u0026rdquo; ch·ªâ m·ªõi n√™u l√™n ƒë∆∞·ª£c k·∫øt lu·∫≠n, ch·ª© ch∆∞a n√™u ƒë·∫ßy ƒë·ªß gi·∫£ thi·∫øt c·ªßa b√†i to√°n. Dƒ© nhi√™n trong m·ªôt s·ªë tr∆∞·ªùng h·ª£p, ta kh√¥ng c·∫ßn ph·∫£i n√™u ra gi·∫£ thi·∫øt v√¨ n√≥ ƒë∆∞·ª£c ng·∫ßm hi·ªÉu. V√≠ d·ª•, \u0026ldquo;m·ªôt c·ªông m·ªôt b·∫±ng m·∫•y?\u0026rdquo; th√¨ ta ng·∫ßm ƒë·ªãnh r·∫±ng m·ªôt ·ªü ƒë√¢y l√† con s·ªë 1 trong To√°n, ch·ª© kh√¥ng ph·∫£i th·∫±ng n√†o hay con n√†o c√≥ t√™n l√† M·ªôt c·∫£.\n[2] ƒê·∫∑t trong ng·ªØ c·∫£nh b·∫°n ƒëi h·ªèi ƒë·ªÉ t√¨m ki·∫øm s·ª± gi√∫p ƒë·ª° t·ª´ b√™n ngo√†i, th√¨ vi·ªác truy·ªÅn ƒë·∫°t th√¥ng tin ƒë·∫øn ng∆∞·ªùi kh√°c m·ªôt c√°ch ƒë·∫ßy ƒë·ªß l·∫°i c√†ng quan tr·ªçng h∆°n. Nh·ªØng th√¥ng tin ·∫•y c√≥ ƒë·ªÉ ƒë∆∞·ª£c truy·ªÅn ƒë·∫°t th√¥ng qua text (m√¥ t·∫£ xem n√≥ b·ªã g√¨), h√¨nh ·∫£nh (ch·ª•p h√¨nh c√°i m√† b·∫°n cho l√† l·ªói), clip (quay l·∫°i qu√° tr√¨nh reproduce l·ªói)\u0026hellip;\nN√™n nh·ªõ r·∫±ng, trong tr∆∞·ªùng h·ª£p n√†y b·∫°n ƒëang ·ªü v·ªã th·∫ø th·∫•p h∆°n so v·ªõi nh·ªØng ng∆∞·ªùi c√≥ th·ªÉ gi√∫p b·∫°n. Kh√¥ng gi·ªëng nh∆∞ lo·∫°i c√¢u h·ªèi ch·ªâ quan t√¢m ƒë·∫øn k·∫øt lu·∫≠n c·ªßa s·∫øp (v√¨ s·∫øp c√≥ v·ªã th·∫ø cao h∆°n). Vi·ªác h·ªèi nh·ªØng c√¢u nh∆∞ tr√™n ch·ªâ t·ªï khi·∫øn ng∆∞·ªùi ta c√≥ √≠t thi·ªán c·∫£m v·ªõi m√¨nh h∆°n.\n[3] Th√¥ng th∆∞·ªùng, khi nh·ªù ng∆∞·ªùi kh√°c h·ªó tr·ª£, b·∫°n giao ti·∫øp v·ªõi ng∆∞·ªùi ƒë√≥ th√¥ng qua m·ªôt cu·ªôc h·ªôi tho·∫°i face-to-face, ho·∫∑c offline discussion (c√°i comment thread c·ªßa Facebook l√† m·ªôt v√≠ d·ª• ƒëi·ªÉn h√¨nh).\n Face-to-face conversation th√¨ nhanh v√† t·ª©c th·ªùi, n√™n ng∆∞·ªùi ta c√≥ th·ªÉ h·ªèi l·∫°i b·∫°n d·∫ßn d·∫ßn ƒë·ªÉ l√†m r√µ th√¥ng tin. Gi·ªëng nh∆∞ b√°c s·ªπ b·∫Øt m·∫°ch cho b·ªánh nh√¢n; n·∫øu b·ªánh nh√¢n tr·∫£ l·ªùi chung chung ki·ªÉu \u0026ldquo;t√¥i th·∫•y m·ªát trong ng∆∞·ªùi\u0026rdquo; th√¨ ·ªïng s·∫Ω kh√¥ng g·∫±n d·ªçng n√≥i \u0026ldquo;kh√¥ng m·ªát th√¨ ƒëi kh√°m chi!\u0026rdquo;, m√† ·ªïng s·∫Ω h·ªèi th√™m \u0026ldquo;m·ªát ch·ªó n√†o? b·ªã l√¢u ch∆∞a?\u0026rdquo;. Tr√°i l·∫°i, Offline conversation th√¨ ch·∫≠m v√† c√≥ ƒë·ªô tr·ªÖ (v√≠ d·ª• 3 ti·∫øng sau ng∆∞·ªùi ta m·ªõi ph·∫£n h·ªìi). Cho n√™n c·ªë g·∫Øng trong m·ªôt l·∫ßn, b·∫°n truy·ªÅn t·∫£i ƒë·∫ßy ƒë·ªß th√¥ng tin ch√∫t x√≠u.  [4] ·ªû m·ªôt c√¥ng ty n·ªç m√¨nh l√†m, nhi·ªÅu l·∫ßn b·∫°n b√® hay m·∫•y ƒë·ª©a em m√¨nh hay nh·ªù m√¨nh support (v√≠ d·ª•: debug gi√πm), m√¨nh lu√¥n lu√¥n h·ªèi: \u0026ldquo;anh/em/m√†y/√¥ng ƒë√£ ƒëi·ªÅu tra ƒë∆∞·ª£c g√¨ r·ªìi\u0026rdquo; m√† c√¢u tr·∫£ l·ªùi c√≥ th·ªÉ t√≥m t·∫Øt l·∫°i th√†nh \u0026rdquo;(d·∫°) ch∆∞a\u0026rdquo;, th√¨ c·∫£ ngu·ªìn s·ªëng s·∫Ω b·ªóng ch·ªëc thu b√© l·∫°i th√†nh m·ªôt n·∫øp nhƒÉn tr√™n tr√°n m√¨nh (ƒê√πa th√¥i ch·ª© m√¨nh kh√¥ng kh√≥ ∆∞a ƒë·∫øn th·∫ø ƒë√¢u). M·ªôt c√¢u tr·∫£ l·ªùi m√¨nh mu·ªën nghe nh·∫•t s·∫Ω c√≥ d·∫°ng nh∆∞ sau:\n \u0026ldquo;M√¨nh expect l√† [\u0026hellip;] nh∆∞ng th·ª±c t·∫ø th√¨ [\u0026hellip;].\nM√¨nh ƒë√£ th·ª≠ [\u0026hellip;] nh∆∞ng [\u0026hellip;].\nSearch stackoverflow/google th√¨ [\u0026hellip;].\n√Ä, c√≥ m·ªôt ƒëi·ªÉm k·ª≥ l·∫° l√† [\u0026hellip;].\nM√¨nh c√≥ d√πng [\u0026hellip;], kh√¥ng bi·∫øt c√≥ ·∫£nh h∆∞·ªüng ko.\nM·∫∑c d√π ch∆∞a c√≥ cƒÉn c·ª© c·ª• th·ªÉ, nh∆∞ng m√¨nh ph√°n ƒëo√°n r·∫±ng [\u0026hellip;]\u0026rdquo;\n T∆∞∆°ng t·ª±, c√≥ m·ªôt c√°i FB group kia, l√¢u l√¢u m√¨nh th·∫•y c√≥ m·ªôt v√†i thanh ni√™n post l√™n \u0026ldquo;M·ªçi ng∆∞·ªùi gi√∫p v·ªõi, em build c√°i n√†y b·ªã l·ªói ho√†i.\u0026rdquo;. Cho nƒÉm trƒÉm ƒë·ªìng h√¨nh ·∫£nh c√°i l·ªói ƒë√≥ l√† g√¨ c√≥ ph·∫£i h∆°n ko üò§.\n[5] V√¨ sao l·∫°i c√≥ s·ª± h·ªùi h·ª£t n√†y?\n L∆∞·ªùi: C√≥ t√¢m th√¨ ch·ªãu m·∫•t s·ª©c/th·ªùi gian. ƒê∆∞·ª£c nu√¥ng chi·ªÅu: C√≥ th·ªÉ m·ªôt ph·∫ßn do b·∫°n th∆∞·ªùng nh·∫≠n ƒë∆∞·ª£c c√¢u tr·∫£ l·ªùi cho nh·ªØng tr∆∞·ªùng h·ª£p nh∆∞ v·∫≠y n√™n c·ª© th·∫ø m√† h·ªèi. B·ªã \u0026ldquo;l√¢y nhi·ªÖm\u0026rdquo;: B·∫°n th·∫•y ng∆∞·ªùi kh√°c hay h·ªèi v·∫≠y, n√™n b·∫°n c≈©ng l√†m t∆∞∆°ng t·ª±.  ","href":"/reasoning/tan-man-cau-hoi-toi-hay-la-su-hoi-hot/","title":"T·∫£n m·∫°n: C√¢u h·ªèi t·ªìi hay l√† s·ª± h·ªùi h·ª£t"},{"content":"","href":"/tags/problem-solving/","title":"problem-solving"},{"content":"","href":"/tags/questioning/","title":"questioning"},{"content":"[6] December Book ‚Äì Flatland  #reading #books - H·ªìi l√¢u m√¨nh c≈©ng ƒë√£ c√≥ 1 b√†i vi·∫øt v·ªÅ Flatland, nh∆∞ng ƒë√≥ l√† review c·ªßa b·ªô phim ho·∫°t h√¨nh. B·∫°n c√≥ th·ªÉ xem b√†i vi·∫øt ·ªü ƒë√¢y. B·ªô phim khi·∫øn m√¨nh r·∫•t th√≠ch th√∫. - V·ªÅ s√°ch, th√¨ review tr√™n goodreads kh√¥ng ƒë∆∞·ª£c t·ªët nh∆∞ mong ƒë·ª£i (~3.81\u0026frasl;5) so v·ªõi nh·ªØng cu·ªën kh√°c (h·∫ßu h·∫øt ƒë·ªÅu tr√™n 4.0/5). - Review trong blog post tr√™n n√™u b·∫≠t ƒë∆∞·ª£c n·ªôi dung ch√≠nh, v√† khi·∫øn m√¨nh th·∫•y h·∫•p d·∫´n. Ah, c√≥ m·ªôt ƒëi·ªÉm c·∫ßn l∆∞u √Ω ƒë·ªëi v·ªõi ƒë·ªôc gi·∫£ non-native English speaker: cu·ªën n√†y vƒÉn phong ch·∫Øc s·∫Ω kh√≥ nhai ch√∫t x√≠u, v√¨ n√≥ ƒë∆∞·ª£c vi·∫øt kh√° l√¢u r·ªìi (1800s).\n[5] Learning faster as an entrepreneur  #learning #methodology - The mainstream point of the author is that we don\u0026rsquo;t need to fully understand pieces of a field. Instead of step-by-step learning, we could also just acquire 80% of a field (compenent enough) to significantly reduce the time needed.\n(1) Finding. Make use of available solutions.\n(2) Skimming. General idea first, don\u0026rsquo;t dive into details unless you need it.\n(3) Retaining. Recognition is easier than recall. Note taking is necessary to recover the learned material. Use it in combination with spaced repitition. (4) Organizing. It takes time to absore new concepts. Don\u0026rsquo;t try to grasp them all at once.\n[4] Last days in Vietnam  #history #war - This documentary really touched my heart. We all know that history is written by the winners. I would not argue how much it was twisted. The chaos of the evacuation was horrible.\n[3] The Three Levels of Software: Why code that never goes wrong can still be wrong  #software-engineering - The post starts with defining general terms in different levels of conceptualization. The 3 different ways of understanding what it means to be wrong results in different approaches to tackle a problem. If you identify a problem and understand it, you half-way solving it.\n[2] The rise and fall of the Berlin Wall - Konrad H. Jarausch  #history #war\n[1] Overcoming Imposter Syndrome  #advice - I came to know this phenomenon when I took a video lecture on Coursera. In the video, Christine, the course instructor, mentioned Vanessa\u0026rsquo;s case as an example of this syndrome\u0026hellip; Vanessa was the first one in her family made it to college. She was admitted to a really selective university. Not long after starting her first year, she was devastated due to failing a test. She called her mom for consolidation and received a reply like:\n \u0026ldquo;Maybe you just weren‚Äôt meant to be there. Maybe we should have sent you to a junior college first.\u0026rdquo; - ‚Üí This syndrome is not only from your internal feelings but also from external beliefs people impose on you.\n ","href":"/reading/reading-week-04-jan-22-jan-28/","title":"Reading: Week 04, Jan 22 - Jan 28"},{"content":" 1 Su·ªët 2 c·∫•p h·ªçc c∆° s·ªü: ti·ªÉu h·ªçc v√† trung h·ªçc, t√¥i ch∆∞a h·ªÅ c√≥ m·ªôt √Ω ni·ªám n√†o v·ªÅ thu·∫≠t ng·ªØ \u0026ldquo;thuy·∫øt tr√¨nh\u0026rdquo;. H·∫ßu h·∫øt c√°c b√†i gi·∫£ng c·ªßa c√°c th·∫ßy c√¥ mang n·∫∑ng t√≠nh ghi ch√©p. Dƒ© nhi√™n ƒë·ªëi v·ªõi nh·ªØng m√¥n To√°n, L√Ω, H√≥a\u0026hellip; th√¨ ƒëi·ªÅu ƒë√≥ b√¨nh th∆∞·ªùng, th·∫•y v·∫´n kh√¥ng tr·ªü ng·∫°i l·∫Øm. Nh∆∞ng m·∫•y m√¥n S·ª≠, ƒê·ªãa\u0026hellip; th√¨ t√¥i th·∫•y ch√°n ng√°n v√¨ ph·∫£i ch√©p nh·ªØng th·ª© trong SGK ƒë√£ c√≥, theo vƒÉn phong c·ªßa ng∆∞·ªùi kh√°c.\n2 B∆∞·ªõc v√†o c·∫•p 3 l√† l√∫c t√¥i l·∫ßn ƒë·∫ßu ti√™n bi·∫øt ƒë·∫øn h√¨nh th·ª©c d·∫°y-h·ªçc n√†y. C√°c b√†i gi·∫£ng m√¥n Sinh h·ªçc, L·ªãch s·ª≠, ƒê·ªãa l√Ω (n√≥i chung l√† c√°c m√¥n x√£ h·ªôi) ƒë·ªÅu ƒë∆∞·ª£c gi·∫£ng d·∫°y theo h√¨nh th·ª©c chi·∫øu slide. T√¥i r·∫•t th√≠ch ƒëi·ªÅu n√†y, nh∆∞ng ch·ªß y·∫øu l√† v√¨ t·ª•i t√¥i kh√¥ng ph·∫£i ch√©p b√†i. V√† th·∫ßy c√¥ c≈©ng kh√¥ng d√≤ b√†i, m·ªôt c√¥ng c·ª• g√¢y cƒÉng th·∫≥ng ƒë·∫ßu gi·ªù m√† c√°c th·∫ßy c√¥ c·∫•p 2 tr∆∞·ªùng t√¥i r·∫•t ∆∞a chu·ªông.\n3 T·ª•i h·ªçc sinh c≈©ng ƒë∆∞·ª£c giao l√†m b√†i thuy·∫øt tr√¨nh nh√≥m. M·ªói nh√≥m c√≥ kho·∫£ng 4-5 ƒë·ª©a. M·ªôt h·ªçc k·ª≥ s·∫Ω c√≥ 1-2 ƒë·ª£t thuy·∫øt tr√¨nh, t√πy v√†o m·ªói m√¥n. C√≥ m·ªôt ƒëi·ªÅu b·∫•t h·∫°nh l√† t√¥i hay chung nh√≥m v·ªõi m·∫•y ƒë·ª©a l∆∞·ªùi, th√≠ch ch∆°i games. (Gi·ªù th√¨ c√°c b·∫°n ·∫•y c√†y d·ªØ l·∫Øm, c√≤n t√¥i th√¨ chuy·ªÉn sang th√°i c·ª±c l∆∞·ªùi bi·∫øng). Nh∆∞ng th√∫ th·∫≠t l√† vi·ªác ·ªü trong m·ªôt nh√≥m nh∆∞ v·∫≠y c≈©ng khi·∫øn t√¥i th√≠ch th√∫, v√¨ t√¥i c√≥ nhi·ªÅu c∆° h·ªôi h∆°n ƒë·ªÉ \u0026ldquo;to·∫£ s√°ng\u0026rdquo;. T√¥i tha h·ªì thi·∫øt k·∫ø b√†i thuy·∫øt tr√¨nh theo √Ω t√¥i.\n4 Ngo√†i vi·ªác c√≥ d·∫•u rƒÉng c·ªßa t√¥i ·ªü t·ª´ng slide, th√¨ vi·ªác l√†m vi·ªác t·∫≠p th·ªÉ ƒë·∫≠m t√≠nh ch·∫•t c√° nh√¢n n√†y c√≤n khi·∫øn cho ti·∫øn ƒë·ªô nhanh h∆°n. T√¥i ho√†n to√†n ƒë·ªìng √Ω r·∫±ng l√†m vi·ªác nh√≥m th√¨ c√≥ nhi·ªÅu ngu·ªìn l·ª±c h∆°n, nh∆∞ng n·∫øu kh√¥ng bi·∫øt c√°ch khai th√°c th√¨ c√°i chi ph√≠ cho vi·ªác qu·∫£n l√Ω n√≥ c√≤n ƒë·∫Øt ƒë·ªè h∆°n ·∫•y. D√¢n developers t·ª•i t√¥i th∆∞·ªùng hay ƒë√πa kh√°o v·ªõi nhau r·∫±ng: n·∫øu m·ªôt task X ƒë∆∞a cho m·ªôt th·∫±ng dev l√†m 1 gi·ªù ƒë·ªìng h·ªì xong, th√¨ ƒë∆∞a task ƒë√≥ cho m·ªôt nh√≥m 5 ng∆∞·ªùi s·∫Ω m·∫•t 5 ti·∫øng m·ªõi xong. T·∫°m g·ªçi l√† paradox of teamwork :)).\n5 V·ªÅ phong th√°i tr√¨nh b√†y th√¨ t√¥i d·ªü t·ªá, kh√¥ng ƒÉn n√≥i l∆∞u lo√°t, t·ª± tin nh∆∞ l≈© b·∫°n. Nh∆∞ng v·ªÅ k·ªπ nƒÉng so·∫°n slides, n·∫øu t·ª± ch·∫•m ƒëi·ªÉm th√¨ t√¥i s·∫Ω cho t√¥i ·ªü m·ª©c l√¢n c·∫≠n t·ªët. Th·ª±c t·∫ø l√† t√¥i r·∫•t chƒÉm ch√∫t v·ªÅ h√¨nh th·ª©c tr√¨nh b√†y slides. N√≥ kh√¥ng nh·ªØng ph·∫£i hay m√† c√≤n ph·∫£i ƒë·∫πp, ƒë·ªÉ to√°t l√™n v·∫ª chuy√™n nghi·ªáp :)).\nSlides thuy·∫øt tr√¨nh kh√¥ng ƒë∆°n gi·∫£n ch·ªâ l√† ƒë∆∞a m·∫•y n·ªôi dung trong s√°ch l√™n powerpoint. L√†m v·∫≠y ch·∫≥ng c√≥ t√¢m ch√∫t n√†o. ƒê√¥i l√∫c t·ª•i t√¥i nh·∫≠n ƒë∆∞·ª£c m·ªôt ƒë·ªÅ t√†i thuy·∫øt tr√¨nh m√† trong SGK, n√≥ ch·ªâ ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p trong m·ªôt m·ª•c (1-2 ƒëo·∫°n). T·ª•i t√¥i ph·∫£i t√¨m c√°ch m·ªü r·ªông ra, th√™m c√°c ph·∫ßn so s√°nh - ƒë√°nh gi√°, nh∆∞ th·ªÉ n√≥ ph·∫£i x·ª©ng ƒë√°ng c·∫£ ch∆∞∆°ng s√°ch.\nVi·ªác t√¨m t∆∞ li·ªáu cho b√†i thuy·∫øt tr√¨nh r·∫•t quan tr·ªçng. T∆∞ li·ªáu ph·∫£i d·ªìi d√†o v√† g·ªìm nhi·ªÅu lo·∫°i, t·ª´ text t·ªõi h√¨nh ·∫£nh v√† clips\u0026hellip; Tuy nhi√™n, th·ªùi ƒë√≥ nh√† t√¥i ch·ªâ c√≥ c√°i m√°y b√†n, m√† kh√¥ng c√≥ internet. N√™n t√¥i ph·∫£i ra ti·ªám net ƒë·ªÉ t√¨m t∆∞ li·ªáu. Th√¥ng th∆∞·ªùng t√¥i d√†nh kho·∫£ng 1-2 ti·∫øng ngo√†i qu√°n ƒë·ªÉ download h·∫øt t∆∞ li·ªáu c·∫ßn thi·∫øt, r·ªìi m·ªõi v·ªÅ nh√† tr√¨nh b√†y n·ªôi dung, b·ªë c·ª•c b√†i thuy·∫øt tr√¨nh. C√≤n nh·ªõ h·ªìi ƒë√≥ c√≥ c√°i USB v√†i ba GB; m·ªói l·∫ßn ra qu√°n net, vi·ªác ƒë·∫ßu ti√™n l√†m l√† c·∫Øm USB v√†o, r·ªìi c√†i IDM (Internet Download Manager - b·∫£n cracked); ƒë√¥i l√∫c c√≥ c√†i th√™m Opera n·ªØa :))\u0026hellip;\nGi·ªù th·∫•y m·∫•y b·∫°n tr·∫ª c√≥ ƒëi·ªÅu ki·ªán h∆°n r·∫•t nhi·ªÅu. Internet everywhere. T∆∞ li·ªáu c≈©ng d·ªìi d√†o, ti·∫øng Anh c·ªßa c√°c b·∫°n c≈©ng gi·ªèi h∆°n, n√™n ·∫Øt h·∫≥n ph·∫£i ki·∫øm ƒë∆∞·ª£c nhi·ªÅu t∆∞ li·ªáu hay h∆°n. Dƒ© nhi√™n, ƒëi·ªÅu ƒë√≥ c≈©ng ƒëi ƒë√¥i v·ªõi m·ªôt s·ªë t√°c d·ª•ng ph·ª• nh∆∞: g√¢y xao nh√£ng, m·∫Øc c√¥ng ch·ªçn l·ª±a\u0026hellip;\n\u0026hellip;\nPh·ª• l·ª•c: V√†i nguy√™n t·∫Øc thi·∫øt k·∫ø slides c·ªßa b·∫£n th√¢n, tr√¨nh b√†y d∆∞·ªõi d·∫°ng n√™n v√† kh√¥ng n√™n.  ‚ùå X√†i font Times New Roman: ƒê√¢y l√† font ch·ªØ m·∫∑c ƒë·ªãnh, r·∫•t ph·ªï bi·∫øn. N√≥i chung nh·ªØng font ch·ªØ c√≥ ch√¢n nh∆∞ th·∫ø n√†y gi√∫p vi·ªác ƒë·ªçc d·ªÖ d√†ng h∆°n. Tuy nhi√™n x√©t v·ªÅ t√≠nh ch·∫•t th·∫©m m·ªπ th√¨ t√¥i th·∫•y n√≥ kh√¥ng ph√π h·ª£p v·ªõi slide thuy·∫øt tr√¨nh. (S·ª± kh√≥ ch·ªãu t∆∞∆°ng t·ª± ƒë·∫øn v·ªõi t√¥i khi t√¥i xem 1 trang web v·ªõi font ch·ªØ n√†y :D). C√° nh√¢n t√¥i nghƒ© n√≥ ph√π h·ª£p h∆°n cho c√°c ·∫•n ph·∫©m gi·∫•y h∆°n.\n ‚ùå Text qu√° d√†i (\u0026gt;= 3 d√≤ng cho m·ªôt g·∫°ch ƒë·∫ßu d√≤ng): t√¥i s·∫Ω c·ªë g·∫Øng t√°ch 1 ƒëo·∫°n ƒë√≥ ra th√†nh nhi·ªÅu √Ω, m·ªói √Ω l√† m·ªôt g·∫°ch ƒë·∫ßu d√≤ng. Nh∆∞ v·∫≠y th√¨ ng∆∞·ªùi nghe s·∫Ω d·ªÖ theo d√µi h∆°n. H·ªç l√† ng∆∞·ªùi nghe, ch·ª© kh√¥ng ph·∫£i ng∆∞·ªùi ƒë·ªçc! Tr∆∞·ªùng h·ª£p m√† t√¥i ƒë√£ c·ªë g·∫Øng r·ªìi m√† text v·∫´n d√†i, th√¨ b·∫°n c√≥ th·ªÉ gi√∫p ng∆∞·ªùi nghe ƒë·ª° m·ªát h∆°n b·∫±ng c√°ch highlight c√°c keywords.\n ‚úÖ S·ª≠ d·ª•ng h√¨nh ·∫£nh minh h·ªça. L√† m·ªôt visual learner, t√¥i lu√¥n c·ªë g·∫Øng minh h·ªça m·ªôt keyword hay m·ªôt √Ω n√†o ƒë√≥ b·∫±ng h√¨nh ·∫£nh. ƒê·ªÉ nh·∫•t qu√°n phong c√°ch th·∫©m m·ªπ c·ªßa slides, t√¥i c·ªë g·∫Øng ch·ªâ d√πng ho·∫∑c l√† h√¨nh clipart ho·∫∑c l√† h√¨nh ch·ª•p. C√° nh√¢n t√¥i b·ªã ·∫£nh h∆∞·ªüng nhi·ªÅu b·ªüi phong c√°ch c·ªßa c√°c video TED-Ed, n√™n t√¥i ch·ªß y·∫øu d√πng h√¨nh clipart, m·ªôt ph·∫ßn v√¨ nh√¨n n√≥ vui nh·ªôn, m·ªôt ph·∫ßn v√¨ nh√¨n n√≥ c√≥ v·∫ª s√°ng t·∫°o :D.\n ‚úÖ S·ª≠ d·ª•ng c√¢u h·ªèi. ƒêi·ªÅu n√†y ƒëem l·∫°i hi·ªáu qu·∫£ kh√° t·ªët trong vi·ªác d·∫´n d·∫Øt √Ω, khi·∫øn cho b√†i thuy·∫øt tr√¨nh tr·ªü n√™n m·∫°ch l·∫°c h∆°n. T√¥i g·ªçi nh·ªØng slides c√≥ ch·ª©a c√¢u h·ªèi nh∆∞ th·∫ø n√†y l√† c√°c pha chuy·ªÉn √Ω. V√≠ d·ª•, n·∫øu b·∫°n thuy·∫øt tr√¨nh v·ªÅ ch·ªß ƒë·ªÅ n√≥ng l√™n to√†n c·∫ßu (global warming); b·∫°n ƒëang n√≥i v·ªÅ c√°c d·∫•u hi·ªáu c·ªßa hi·ªán t∆∞·ª£ng n√†y tr√™n kh·∫Øp c√°c ch√¢u l·ª•c v√† s·∫Øp s·ª≠a chuy·ªÉn sang ·∫£nh h∆∞·ªüng c·ªßa n√≥; th√¨ b·∫°n c√≥ th·ªÉ d√†nh m·ªôt slide cho c√¢u h·ªèi ki·ªÉu nh∆∞ th·∫ø n√†y: \u0026ldquo;I see\u0026hellip; But what\u0026rsquo;s the big deal?\u0026rdquo;.\n ‚úÖ Highlight keywords. C√≥ nhi·ªÅu c√°ch ƒë·ªÉ l√†m n·ªïi b·∫≠t t·ª´ kh√≥a. C√≥ th·ªÉ d√πng m√†u s·∫Øc, c≈©ng c√≥ th·ªÉ d√πng c·ª° ch·ªØ (font size), ho·∫∑c ƒë·ªô ƒë·∫≠m c·ªßa ch·ªØ (bold/semibold/thin\u0026hellip;).\n  ","href":"/misc/tan-man-chuyen-thuyet-trinh/","title":"T·∫£n m·∫°n: Chuy·ªán thuy·∫øt tr√¨nh"},{"content":"[5] Spaced repitition in learning theory  #learning #methodology - Without revision, we tend to forget things not long after we have just learned it. The forgetting curve is set to drop dramatically then. So it\u0026rsquo;s better to review when we start forgetting. Normally, the interval since the last revision extends. For example, 3 days after learning something new, review it. Then take the next review 5 days later, then 7 days later\u0026hellip; - A difficulty of applying this technique is to determine when to review. We continuously acquire new knowledge (each at different time, and could be more farmiliar as compared to others), not to mention the influence of being driven by sentiments. An approach to deal with this difficulty which is mentioned in the video is sorting info based on answers to questions. This, in part, reminds me of the app Duolingo. It evaluates how well we memorize the words based on questions/answers. However, the vocabs are still lession-structured and hence not making use of this technique at its best.\n[4] Quora: \u0026ldquo;When Google or Facebook rejects a candidate, why don‚Äôt they give him/her a simple explanation for the rejection to help the candidate work on the gaps in their knowledge?\u0026rdquo;  #career #advice\n[3] Huy Tran @ NASA  #biography - Really into this biography. Profoundly inspired by her story, partly because she was a Vietnamese who left the country for freedom, for a better education, a better future. - One particular point I really enjoyed is what her mentor consoled her (quoted at the end of the text).\n One day, after months of doing research in a set of material compositions, I ran the tests and the samples failed miserably. I was frustrated that I had wasted so much time and funding. My mentor sat me down and told me, ‚ÄúThis is research. Sometimes things work and sometimes they don‚Äôt. And you just need to understand what your results tell you and then you move on. If you get it right the first time, then we would have to call it ‚Äòsearch‚Äô rather than ‚Äòre-search‚Äô!‚Äù\n [2] On being an Engineering Manager  #manager #retrospective - Fascinating! From the perspective of a reader, this reflection provides me a clear sense of what it is like to be an engineering manager, or a team lead. - Interpersonal skills matter as most of the problems a team lead deals with are about humans (who are unpredictable by nature). - A reality of taking this role is that you have less time to get involved in coding tasks no matter how much you want it.\n[1] Practical story about Trie and Prefix Search  #tech-solution #data-structure #trie - B√†i vi·∫øt ƒë·ªÅ c·∫≠p ƒë·∫øn b√†i to√°n prefix matching, x∆∞∆°ng s·ªëng c·ªßa gi·∫£i ph√°p cho t√≠nh nƒÉng autocompletion. B√†i n√†y t√°c gi·∫£ vi·∫øt kh√° d·ªÖ hi·ªÉu. M√¨nh r·∫•t th√≠ch. Tuy nhi√™n, c√≥ m·ªôt v√†i ƒëi·ªÉm m√¨nh h∆°i th·∫Øc m·∫Øc, ch·ªó ∆∞·ªõc l∆∞·ª£ng memory usage cho Trie. - Th·ª© nh·∫•t, v·ªõi th√¥ng s·ªë ƒë·ªÅ c·∫≠p trong b√†i vi·∫øt (265132 nodes, ~71MB), th√¨ kh√¥ng bi·∫øt 400KB/node t√≠nh t·ª´ ƒë√¢u ra? - Th·ª© hai, con s·ªë 71MB tr√™n l√† chi ph√≠ cho l∆∞u tr·ªØ th√¥i, hay bao g·ªìm chi ph√≠ cho c√°c thao t√°c duy·ªát tr√™n Trie? - Th·ª© ba, ch·ªó ∆∞·ªõc l∆∞·ª£ng t·ª´ 1tri·ªáu title -\u0026gt; 30GB ƒë∆∞·ª£c ∆∞·ªõc l∆∞·ª£ng nh∆∞ th·∫ø n√†o? Theo m√¨nh hi·ªÉu th√¨ n√≥ ph·∫£i th√¥ng qua b∆∞·ªõc trung gian nh∆∞ sau: #title -\u0026gt; #nodes -\u0026gt; mem used. Tuy nhi√™n m·ªói title c√≥ ƒë·ªô d√†i kh√°c nhau, n√™n s·∫Ω t∆∞∆°ng ·ª©ng v·ªõi s·ªë l∆∞·ª£ng nodes kh√°c nhau. \u0026gt; \u0026hellip; n·∫øu quora c√≥ 1tr title, th√¨ s·∫Ω t·ªën t·∫ßm 30GB cho trie c·ªßa to√†n b·ªô title\u0026hellip;\n","href":"/reading/reading-week-03-jan-15-jan-21/","title":"Reading: Week 03, Jan 15 - Jan 21"},{"content":"[6] Artwork Personalization at Netflix  #netflix #technology #recommendation - I really üíõ this article. Selection recommendation is not only about suggesting items that match users\u0026rsquo; interests but also about personalizing suggestions based on their perferences. For example, it may be better if we display a romance scene as the artwork of a movie if users tend to watch romance movies. Another typical example is using an artwork that has a character of their interest in order to increase users\u0026rsquo; engagement. - The post also points out several challenges when it comes to personalizing recommendations. These challenges vary from how to evaluate the impact of changing artworks (in different contexts), how to fulfill personalized aesthetics, and how to perform such changes at scale. - Yet, I don\u0026rsquo;t quite get the contextual bandits concept.\n[5] Creating Views in Code  #ios #ui - Love the way the author use closures to make the code more concise. I use it this way, too. How variadic arguments is used in this article is kind of clever üëè.\n[4] Vsauce: V√¨ sao ta l·∫°i n·∫±m m∆°?  #science  - Btw, Ch·ªØ REM ƒë∆∞·ª£c nh·∫Øc trong clip n√†y l√† vi·∫øt t·∫Øt c·ªßa Rapid eye movement (nghƒ©a l√† s·ª± ƒë·∫£o m·∫Øt).\n[3] The 10 Operating System concepts software developers need to remember  #os - C√°i post n√†y h∆°i n·∫∑ng ƒë√¥ so v·ªõi m√¨nh. M·ªôt s·ªë kh√°i ni·ªám, m√¨nh ƒë·ªçc th·∫•y v·∫´n c√≤n th·∫•y m∆° h·ªì. C≈©ng c√≥ th·ªÉ do m·∫•t m·∫•t th√¥ng tin khi n√©n nguy√™n c·∫£ kho√° h·ªçc l·∫°i th√†nh 1 c√°i blog post nh∆∞ th·∫ø n√†y?? Anyway, quan t√¢m ƒë·∫øn keywords c·ªßa c√°c concepts ƒë√≥ th√¥i. - Klq m√† th·∫•y c√°i title n√≥ h∆°i troll (kh√¥ng bi·∫øt c√≥ ph·∫£i c·ªë √Ω hok): \u0026rdquo;\u0026hellip; concepts software developers need to REMEMBER\u0026rdquo;\u0026hellip; Nh∆∞ th·∫ø n√†y th√¨ ch·∫Øc ƒë·ª° qu√™ h∆°n: \u0026rdquo;\u0026hellip; concepts software developers need to KNOW\u0026rdquo;.\n[2] M·ªói th√°ng m·ªôt cu·ªën s√°ch ‚Äì Nh·ªØng s√°ch hay m√¨nh ƒë√£ ƒë·ªçc trong nƒÉm 2017 ‚Äì Ph·∫ßn 1  #reading #books - √îi, th√°nh n√†y ƒë·ªçc nhi·ªÅu gh√™ üòµ. ƒê√¢y m·ªõi l√† part 1 th√¥i ƒë√≥. Th·∫≠t c·∫£m th·∫•y x·∫•u h·ªï qu√° ƒëi m√†.\n[1] T·ªïng quan v·ªÅ testing ‚Äì ph·∫ßn 2: Ph√¢n bi·ªát c√°c lo·∫°i testing v√† thu·∫≠t ng·ªØ chuy√™n ng√†nh test  #testing\n","href":"/reading/reading-week-02-jan-08-jan-14/","title":"Reading: Week 02, Jan 08 - Jan 14"},{"content":" Expectation (also called expected value or mean) is a very important concept in probability and statistics. One usage we could name is estimation in statistics in which we try to infer the parameters of a statistical model. Another simple application is the step of sanity checks in training a nerual network: verify if the loss function gives a value which is acceptably around its expectation.\nThere are a few ways to compute the expectation of a random variable. Apart from LOTUS, we could obtain it using the fundamental bridge. This post will introduce indicator random variables (r.v.s); and the bridge between this kind of r.v.s and its expectation.\nIndicator r.v.s An indicator random variable for an event $A$ is a random variable which takes only 2 values: 1 (when $A$ occurs) and 0 (otherwise). We usually denote it as $I_A$.\nIt seems trivial, right? Yet, it provides a powerful connection between probability and expectation. This link is called fundamental bridge.\nFundamental bridge  The probability of an event is the expected value of its indicator r.v:\n$$P(A) = E(I_A)$$\n This is true since $E(I_A) = 1 \\times P(A) + 0 \\times P(\\bar{A}) = P(A) \\quad\\blacksquare$\nExample 1 Let\u0026rsquo;s take an example to see how this link is applied to compute the expected value of a random variable.\n Randomly, k distinguishable balls are placed into n distinguishable boxes, with all possibilities equally likely. Find the expected number of empty boxes.\n Let $X$ be the number of empty boxes. We need to determine $E(X)$.\nLet $I_j$ be the indicator of the $j^{th}$ box being empty. Then, $X = I_1 + I_2 + \u0026hellip; + I_n$\n$\\implies E(X) = E(I_1) + E(I_2) + \u0026hellip; + E(I_n)$ (by linearity of expectation).\nWe have $E(I_j) = P(\\txt{the} j^{th} \\txt{is empty}) = P(\\txt{all} k \\txt{balls are placed in other boxes})$\nSince all possibilities are equally likely, given a ball, the probability it is assigned to any box except the $j^{th}$ one is $(n-1)/n$.\n$\\implies E(I_j) = (\\frac{n-1}{n})^k$\n$\\implies E(X) = n \\times (\\frac{n-1}{n})^k = \\frac{(n-1)^k}{n^{k-1}}$\nExample 2  A group of 50 people are comparing their birthdays (as usual, assume their birthdays are independent, are not February 29, etc.). Find the expected number of pairs of people with the same birthday.\n First of all, we assign these $n$ people ($n=50$) to pairs. One could belongs to multiple pairs. In total, we have $n \\choose 2$ pairs, labeled from 1 to $k = {n \\choose 2}$.\nLet $X$ be the r.v denoting the number of pairs in which a birthday match occurs.\nLet $I_j$ be the indicator r.v for the event when two people in the $j^{th}$ pair have the same birthday. Then, $X = I_1 + I_2 + \u0026hellip; + I_k$\nWe have $E(I_j) = P(\\txt{2 people have the same birthday}) = 1 / 365$\n$\\implies E(X) = E(I_1) + E(I_2) + \u0026hellip; + E(I_k) = k \\times 1 / 365 = {n \\choose 2} / 365$\nDiscussion When I first read the definition of indicator r.v.s, I thought \u0026ldquo;So trivial! Is it really worth a mention\u0026rdquo;. But it turns out to be a quite useful tool to calculate expectations.\nConventionally, determining expectations could be done using LOTUS. Sometimes, the analytical transforms required could be troublesome whereas using the fundamental bridge may result in a very elegant solution.\nReference  Joseph K. Blitzstein and Jessica Hwang, \u0026ldquo;Chapter 4: Expectation\u0026rdquo;, Introduction to Probability  ","href":"/tech/indicator-rvs-and-the-fundamental-bridge/","title":"Indicator r.v.s and the fundamental bridge"},{"content":" Jan 07, 2018 [7] The 5 Problem-Solving Skills of Great Software Developers  #advice - I particularly enjoy the example of making coffee and how it demonstrates the similarity between software engineering and usual activities. Putting aside software engineering stuff, a typical person also attempts to achieve such ultimate goals (the skills mentioned).\nJan 05, 2018 [6] MCE 2014: Jon Reid - Test Driven Development for iOS (and anything)  #testing - Great talk! Jon mentioned 3 types of unit testing: return value, state and interactions. He also brought up dependency injection and several ways to implement it: extract \u0026amp; override, method injection, property injection, constructor injection, and ambient context. - The Q\u0026amp;A is interesting as well. Some highlighting concepts were mentioned: funtional testing, acceptance testing, data-driven testing\u0026hellip;\n[5] Testing on the Toilet: Testing State vs. Testing Interactions  #testing - Two key points:\n (1) Just because a test that uses interactions is passing doesn\u0026rsquo;t mean the code is working properly. This is why in most cases, you want to test state, not interactions.\n(2) In general, interactions should be tested when correctness doesn\u0026rsquo;t just depend on what the code\u0026rsquo;s output is, but also how the output is determined.\n Jan 03, 2018 [4] The 10 statistical techniques data scientists need to master  #data-science - TLDR. Details later. TIL: Shrinkage \u0026ndash;\u0026gt; regularization.\n[3] How to Read Mathematics  #maths\nJan 02, 2018 [2] The Guide to Mobile App Design: Best Practices for 2018 and Beyond  #mobile #ux #design - A bit lengthy, but informative. Can treat it as a handbook of mobile UX design. - [Not quite relevant] A minor detail about the usability of this website. When I scrolled down and saw the ads \u0026ldquo;All for free\u0026rdquo;, I thought it was the end of the article and hit Cmd + W to leave the page. When revisiting it, I realized that I did not read the remaining content\u0026hellip; Why? I guess it\u0026rsquo;s because the advertisements do look a lot like a website footer.\n[1] Basics of parallel programming with Swift  #ios #concurrency #parallelism - This post provides a very good overview of how to deal with concurrency (the article did not mention much about parallelism as in the title). One take-away I am interested in is the example in the mention of Atomic. I thought it is the OS\u0026rsquo;s duty to guarantee proper operations on 64-bit integers üò≤.\n","href":"/reading/reading-week-01-jan-01-jan-07-2018/","title":"Reading: Week 01, Jan 01 - Jan 07, 2018"},{"content":"P/s: Vietnamese below.\n Unemployed. After leaving Fossil, I lost my balance. There was a time I had not seen any of my friends. I missed them as much as I missed my work :). Acquired some new knowledge. While being out of work, I took part in a few courses in Coursera, MIT Opencourseware and so on. Some courses did bring me plenty of interests, headaches, and mind-blowing moments as well. Regarding networking, it should be one of my focuses in 2018. I came to realize that networking is vitally important. Speaking of friendship, the fact that many of my friends left this country for study and work upsets me. Despite the lows mentioned, one good thing I am proud of is my personal blog https://trinhngocthuyen.github.io. I consider it a brainchild in which I could freely leave my unique footprints. Everyone loves a one-of-a-kind shirt, rather than a mass-produced shirt. My 2017 ends with a ticket to a journey full of challenges and opportunities to shape my future with greatness.  My 2018 resolution? I think I will not disclose it this time.\n\u0026hellip;\n Th·∫•t nghi·ªáp m·ªôt th·ªùi gian. Sau khi r·ªùi c√¥ng ty c≈© (Fossil) th√¨ c√≥ m·ªôt th·ªùi gian m√¨nh t·ª± k·ª∑ v√¨ kh√¥ng g·∫∑p ai. Nh·ªõ team, nh·ªõ b·∫°n b√® ƒë·ªìng nghi·ªáp, nh·ªõ c√¥ng vi·ªác c≈© :D. Thu n·∫°p th√™m m·ªôt s·ªë ki·∫øn th·ª©c m·ªõi. Kho·∫£ng th·ªùi gian kh√¥ng ƒëi m·∫ßn c√¥ng ty, m√¨nh h·ªçc m·ªôt s·ªë course tr√™n Coursera, MIT Opencourseware, blahblah. C√≥ nh·ªØng kho√° h·ªçc r·∫•t hay, m√¨nh th√≠ch th√∫ v√¥ c√πng. 2017, network c·ªßa m√¨nh kh√° h·∫πp. ƒê√¢y l√† m·ªôt trong nh·ªØng th·ª© m√† m√¨nh s·∫Ω ph·∫£i t·∫≠p trung trong 2018. C≈©ng h∆°i bu·ªìn v√¨ nhi·ªÅu ƒë·ª©a b·∫°n ƒëi xa. ƒê·ª©a ƒëi h·ªçc, ƒë·ª©a ƒëi l·∫≠p nghi·ªáp. M·ªôt ƒëi·ªÉm kh√° h√†i l√≤ng trong nƒÉm nay l√† trang blog c√° nh√¢n: https://trinhngocthuyen.github.io. C·∫£m th·∫•y blog c√≥ d·∫•u ·∫•n c√° nh√¢n nhi·ªÅu h∆°n, kh√¥ng theo template nh∆∞ Medium. N√≥i chung, kh√¥ng ai mu·ªën m·∫∑c m·ªôt c√°i √°o s·∫£n xu·∫•t ƒë·∫°i tr√† cho r·∫•t nhi·ªÅu ng∆∞·ªùi. NƒÉm 2017 kh√©p l·∫°i b·∫±ng m·ªôt t·∫•m v√© cho nh·ªØng th·ª≠ th√°ch v√† c∆° h·ªôi ƒë·ªÉ x√¢y d·ª±ng m·ªôt t∆∞∆°ng lai x√°n l·∫°n h∆°n.  D·ª± ƒë·ªãnh cho 2018: l·∫ßn n√†y m√¨nh s·∫Ω kh√¥ng public.\n","href":"/misc/2017-in-review/","title":"2017 in review"},{"content":"","href":"/tags/resolution/","title":"resolution"},{"content":"","href":"/tags/retrospection/","title":"retrospection"},{"content":" Dec 30, 2017 [4] [Quora] I have a toddler. How should she prepare herself for the job market 15 years from now in the world of AI? Should I teach her Python as soon as she is willing to learn? - Interesting question! Early education is crucially important. Letting children get exposed to such materials is a very good mean of preparation for their future. This reminds me of a documentary I watched on Netflix last week: \u0026ldquo;The Mars generation\u0026rdquo;\u0026hellip; A generation of teenage scientists, explorers, and those who carries human\u0026rsquo;s quests for conquering the universe. - Don\u0026rsquo;t think that a 15-year-old kid is not ready to learn programming.\n \u0026rdquo;\u0026hellip; Once upon a time, we wondered if everyone needed to be able to read/write\u0026hellip;\u0026rdquo;\n Dec 28, 2017 [3] Blockchain: what is in a block? #blockchain - A block (in Blockchain technology) is a data structure that represents a collection of transactions. This post gives information about how to make a block unique (or, how to generate the identifier for a given block). The identifer should have a piece of information of each included transaction. There are various ways to implement it. In this article, the author introduced a solution by hashing in pairs then bottoming up\u0026hellip; Instead of hasing in pairs, we could use folding hash like: h(h(h(A)|B)|C).... Another simple solution is simply h(A|B|C|...) but it is less sensitive to changes as compared to the Merkle tree approach.\n[2] T·ªïng quan v·ªÅ testing ‚Äì ph·∫ßn 1: T·∫°i sao l·∫≠p tr√¨nh vi√™n c·∫ßn bi·∫øt v·ªÅ testing? #testing\nDec 25, 2017 Merry Christmas üéÑ!\n[1] Engineering the Architecture Behind Uber‚Äôs New Rider App #ios #architecture #uber - An old post (2016)\u0026hellip; This is actually a variation of VIPER. The core benefit which impresses me is that \u0026ldquo;routing is guided by business logic rather than view logic\u0026rdquo;. Totally worth that level of complexity.\n","href":"/reading/reading-week-52-dec-25-dec-31/","title":"Reading: Week 52, Dec 25 - Dec 31"},{"content":"[1] Khi n√≥i ƒë·∫øn gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ, ng∆∞·ªùi ta ƒë√¥i khi d√πng m·ªôt c·ª•m d√†i h∆°n l√† gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ v√† ra quy·∫øt ƒë·ªãnh (problem solving and decision making). Ta c√≥ th·ªÉ hi·ªÉu vi·ªác gi·∫£i b√†i to√°n th√¥ng qua hai h√¨nh th√°i:\n (1) T·ª´ kh√¥ng c√≥ l·ªùi gi·∫£i -\u0026gt; c√≥ l·ªùi gi·∫£i (2) T·ª´ c√≥ nhi·ªÅu l·ªùi gi·∫£i -\u0026gt; ch·ªçn ra l·ªùi gi·∫£i t·ªëi ∆∞u  Tr∆∞·ªùng h·ª£p th·ª© 2 ch√≠nh l√† qu√° tr√¨nh ra quy·∫øt ƒë·ªãnh. V·ªÅ c∆° b·∫£n th√¨ ng∆∞·ªùi ta s·∫Ω c·∫ßn m·ªôt b·ªô ti√™u chu·∫©n ƒë√°nh gi√° ƒë·ªÉ ƒë∆∞a ra quy·∫øt ƒë·ªãnh. M·ªói ti√™u chu·∫©n c√≥ m·ªôt tr·ªçng s·ªë kh√°c nhau, th·ªÉ hi·ªán m·ª©c ƒë·ªô quan tr·ªçng c·ªßa ti√™u chu·∫©n ƒë√≥.\n[2] Tuy nhi√™n, vi·ªác l·ª±a ch·ªçn ra m·ªôt gi·∫£i ph√°p ph√π h·ª£p trong s·ªë N gi·∫£i ph√°p ƒë√£ c√≥ kh√¥ng ƒë∆°n gi·∫£n nh∆∞ v·∫≠y.\n Th·ª© nh·∫•t, c√¥ng ƒëo·∫°n ƒë∆∞a ra b·ªô ti√™u chu·∫©n ƒë√°nh gi√° ƒë√∫ng ƒë·∫Øn c√≥ th·ªÉ chi·∫øm ƒë·∫øn 80% th·ªùi gian v√† c√¥ng s·ª©c. V√† m·ªôt b·ªô ti√™u chu·∫©n nh∆∞ th·∫ø n√†o th√¨ ƒë∆∞·ª£c coi l√† ƒë√∫ng ƒë·∫Øn? B·∫£n th√¢n m√¨nh th·∫•y r·∫±ng vi·ªác tr·∫£ l·ªùi nh·ªØng c√¢u h·ªèi d·∫°ng \u0026ldquo;nh∆∞ th·∫ø n√†o th√¨ ƒë∆∞·ª£c coi l√†\u0026hellip;?\u0026rdquo; c√≥ th·ªÉ khi·∫øn b·∫°n ƒë·∫Øm ch√¨m trong m·ªôt ƒë·∫°i d∆∞∆°ng c√°c c√¢u h·ªèi kh√°c li√™n quan. Th·ª© hai, vi·ªác so s√°nh c√≥ th·ªÉ kh√¥ng d·ªÖ d√†ng nh∆∞ so s√°nh to√°n h·ªçc 1 \u0026lt; 2. N√≥ c·∫£m t√≠nh, v√† ƒë√¥i khi kh√≥ ƒë·ªãnh l∆∞·ª£ng.  [3] V√¨ v·∫≠y, ƒë√¥i khi c√≥ nhi·ªÅu s·ª± l·ª±a ch·ªçn l·∫°i g√¢y nhi·ªÅu kh√≥ khƒÉn h∆°n so v·ªõi khi c√≥ √≠t l·ª±a ch·ªçn. Chi ph√≠ cho vi·ªác ƒë∆∞a ra quy·∫øt ƒë·ªãnh kh√¥ng ch·ªâ bao g·ªìm th·ªùi gian v√† c√¥ng s·ª©c ƒë·ªÉ ƒë∆∞a ra b·ªô ti√™u chu·∫©n ƒë√°nh gi√°, qu√° tr√¨nh so s√°nh c√°c l·ª±a ch·ªçn; m√† c√≤n bao g·ªìm c·∫£ chi ph√≠ c∆° h·ªôi ta b·ªè qua, s·ª± ti·∫øc nu·ªëi n·∫øu ta ch·ªçn ph·∫£i m·ªôt ph∆∞∆°ng √°n ƒëem l·∫°i √≠t l·ª£i √≠ch h∆°n.\n[4] ƒê·ªÉ h·∫°n ch·∫ø t√¨nh tr·∫°ng n√†y, m·ªôt c√°ch ƒë∆°n gi·∫£n v√† r√µ r√†ng l√†: gi·ªõi h·∫°n s·ªë l∆∞·ª£ng l·ª±a ch·ªçn, ho·∫∑c g√°n c√°c ch·ªçn l·ª±a m·∫∑c ƒë·ªãnh. Ch·∫≥ng h·∫°n, b·∫°n c·∫£m th·∫•y m·ªát m·ªèi v√¨ m·ªói s√°ng th·ª©c d·∫≠y ph·∫£i ch·ªçn m·ªôt b·ªô qu·∫ßn √°o th√≠ch h·ª£p ƒë·ªÉ ƒëi l√†m, th√¨ c√≥ th·ªÉ khi·∫øn m√¨nh b·ªõt nh·ªçc √≥c h∆°n b·∫±ng c√°ch mua √≠t qu·∫ßn √°o l·∫°i. Ho·∫∑c m·∫∑c ƒë·ªãnh l√† th·ª© hai s·∫Ω m·∫∑c b·ªô ƒë·ªì n√†y, th·ª© ba m·∫∑c b·ªô ƒë·ªì kia\u0026hellip;\nC√≥ l·∫ßn m√¨nh ƒë·ªçc m·ªôt b√†i ph·ªèng v·∫•n Andrew Ng, m·ªôt c√¢y ƒë·∫°i th·ª• trong lƒ©nh v·ª±c AI. B√†i g·ªëc b·∫±ng ti·∫øng Anh c√≥ th·ªÉ t√¨m th·∫•y ·ªü ƒë√¢y. Ngo√†i nh·ªØng l·ªùi khuy√™n h·ªØu √≠ch m√† Andrew chia s·∫ª, c√≥ m·ªôt ƒëi·ªÉm m√¨nh r·∫•t ·∫•n t∆∞·ª£ng; ƒë√≥ l√† th√≥i quen m·∫∑c √°o s∆° mi xanh c·ªßa √¥ng. Th·∫≠t ra, m√¨nh c≈©ng ƒë·ªÉ √Ω ƒë·∫øn ƒëi·ªÅu ƒë√≥ khi h·ªçc kho√° Machine Learning tr√™n Coursera. Nh∆∞ng m√¨nh ch·ªâ nghƒ© r·∫±ng ƒë√≥ ƒë∆°n thu·∫ßn ch·ªâ l√† s·ªü th√≠ch c√° nh√¢n, ho·∫∑c do c√°c videos ƒë∆∞·ª£c ghi trong c√πng m·ªôt (v√†i) ng√†y.\n \u0026ldquo;For myself, one of the habits I have is working out every morning for seven minutes with an app. I find it much easier to do the same thing every morning because it‚Äôs one less decision that you have to make. It‚Äôs the same reason that my closet is full of blue shirts. I used to have two color shirts actually, blue and magenta. I thought that‚Äôs just too many decisions. [Laughter] So now I only wear blue shirts.\u0026rdquo;\n- Andrew Ng -\n [5] N√≥i chung, c√°i post n√†y ra ƒë·ªùi do m·ªôt l·∫ßn m√¨nh so s√°nh hai th∆∞ vi·ªán m√£ ngu·ªìn m·ªü (open-source libraries), g·ªçi l√† A v√† B, c√πng gi·∫£i quy·∫øt chung m·ªôt v·∫•n ƒë·ªÅ. C·∫£ hai ƒë·ªÅu kh√° ph·ªï bi·∫øn. A th√¨ danh s√°ch t√≠nh nƒÉng m√† n√≥ h·ªó tr·ª£ √≠t h∆°n, trong khi c√°i kia (B) th√¨ h·ªó tr·ª£ t·∫≠n rƒÉng. H·∫ßu nh∆∞ nh·ªØng th·ª© m√† b·∫°n c·∫ßn ƒë·ªÅu c√≥ s·∫µn, v·∫•n ƒë·ªÅ c√≤n l·∫°i ch·ªâ l√† google ƒë√∫ng t·ª´ kho√°, t√¨m ƒë√∫ng concept v√† s·ª≠ d·ª•ng ƒë√∫ng c√°ch. Do ƒë√≥, n·∫øu ch·ªçn B th√¨ s·∫Ω t·ªën th√™m chi ph√≠ h·ªçc concepts m·ªõi. N·∫øu project l√†m chung v·ªõi nhi·ªÅu ng∆∞·ªùi th√¨ s·∫Ω m·∫•t th√™m th·ªùi gian, c√¥ng s·ª©c ƒë·ªÉ ph·ªï c·∫≠p cho h·ªç nh·ªØng th·ª© m√¨nh ƒë√£ h·ªçc n·ªØa. Ngo√†i ra, v√¨ B h·ªó tr·ª£ nhi·ªÅu qu√°, n√™n nhi·ªÅu tr∆∞·ªùng h·ª£p m√¨nh c√≥ N c√°ch code kh√°c nhau ƒë·ªÉ c√πng ra m·ªôt k·∫øt qu·∫£. Khi ƒë√≥, ta ph·∫£i gi·∫£i th√™m 1 b√†i to√°n ph·ª• l√†: ƒë∆∞a ra coding convention hay best practice cho n√≥. C≈©ng ƒëau kh·ªï t∆∞∆°ng t·ª± vi·ªác ƒë·∫∑t t√™n bi·∫øn (lol).\nDƒ© nhi√™n, k·∫øt qu·∫£ ch·ªçn A hay B s·∫Ω c√≤n ph·ª• thu·ªôc v√†o r·∫•t nhi·ªÅu y·∫øu t·ªë kh√°c. Nh∆∞ng ta c√≥ th·ªÉ th·∫•y r·∫±ng, b·∫£n th√¢n vi·ªác l·ª±a ch·ªçn ƒë√£ l√† m·ªôt v·∫•n ƒë·ªÅ. Nh∆∞ng khi gi·∫£i xong th√¨ n·ªôi t·∫°i c·ªßa n√≥ l·∫°i ph√°t sinh th√™m nh·ªØng v·∫•n ƒë·ªÅ kh√°c n·ªØa.\n \u0026ldquo;Cu·ªôc ƒë·ªùi l√† m·ªôt chu·ªói c√°c v·∫•n ƒë·ªÅ c·∫ßn gi·∫£i quy·∫øt, m·ªôt chu·ªói c√°c quy·∫øt ƒë·ªãnh c·∫ßn ph·∫£i ra\u0026rdquo;\n- Th·∫ßy Phan D≈©ng -\n ","href":"/reasoning/random-thoughts-when-we-have-many-choices/","title":"T·∫£n m·∫°n: Khi ch√∫ng ta c√≥ nhi·ªÅu l·ª±a ch·ªçn"},{"content":"","href":"/tags/decision-making/","title":"decision-making"},{"content":"","href":"/tags/reasoning/","title":"reasoning"},{"content":" When it comes to iOS architecture, MVVM is one of the most favorable candidates. Not only does it provide higher testability than MVC but also this architecture is lightweight as compared to its counterparts such as VIPER. Despite that, proper approaches should be adopted to take advantage of MVVM. Otherwise, we could end up with an alike version of MVC with an additional component (ViewModel).\nThis post introduces an approach call Inputs - Outputs, currently used at Kickstarter. You can see a high fraction of this style in the Kickstarter iOS app.\nDisclaimer: This approach is nothing but a convention. Don\u0026rsquo;t get confused it with an architecture.\nPrinciples  inputs is a set of actions and events that have impacts on viewModel such as the tap action on a button, or the viewDidLoad event. outputs represents changes that views should reflect. Since ouputs may change over time, it\u0026rsquo;s best to return an Observable (in RxSwift context) for each ouput. Behaviors defined in inputs should not be expressed as Variable because we don\u0026rsquo;t need the inputs to be obseravable.  How-to protocol LoginViewModelInputsType { func viewDidLoad() func tapSubmit() func type(email: String) func type(password: String) } protocol LoginViewModelOutputsType { var validInput: Observable\u0026lt;Bool\u0026gt; { get } var isLoading: Observable\u0026lt;Bool\u0026gt; { get } var loginSuccess: Observable\u0026lt;Void\u0026gt; { get } var loginFailure: Observable\u0026lt;ErrorMessage\u0026gt; { get } } protocol LoginViewModelType { var inputs: LoginViewModelInputsType { get } var ouputs: LoginViewModelOutputsType { get } } This is what LoginViewModel looks like:\nfinal class LoginViewModel: LoginViewModelType, LoginViewModelInputsType, LoginViewModelOutputsType { var inputs: LoginViewModelInputsType { return self } var ouputs: LoginViewModelOutputsType { return self } // MARK:- Inputs private let _tapSubmit = Variable\u0026lt;Void\u0026gt;(()) func tapSubmit() { _tapSubmit.value = () } private let _email = Variable\u0026lt;String\u0026gt;(\u0026#34;\u0026#34;) func type(email: String) { _email.value = email } ... // MARK:- Ouputs private let _loginSuccess = Variable\u0026lt;Void\u0026gt;(()) var loginSuccess: Observable\u0026lt;Void\u0026gt; { return _loginSuccess.skip(1) } ... init() { let loginObservable = _tapSubmit.asObservable().skip(1) .flatMapLatest(login) .share() loginObservable .bind(to: _loginSuccess) .diposed(by: disposeBag) // Binding for `_loginFailure` and `isLoading` goes here ... } } Why Inputs - Outputs? First of all, by using protocols like this, we achieve higher level of abstraction. Therefore, our code is more behavior-oriented and easier to test.\nAnother advantage of this protocol-based convention is readability in unit tests. Let\u0026rsquo;s take a look at the two simple tests below:\nfunc test_When_PasswordIsEmpty_Then_InputIsInvalid() { viewModel.inputs.viewDidLoad() viewModel.inputs.type(email: \u0026#34;abc@xyz.com\u0026#34;) // `grabLatestValue` is just an utility function we can write to retrieve // the latest value in the stream (during a specific period of time). // `RxBlocking` comes for the rescue. let validInput = grabLatestValue(viewModel.outputs.validInput, duration: 1) expect(validInput).to(beFalse()) } func test_When_Submitting_Then_ShouldShowLoadingAndThenHideWhenCompleted() { viewModel.inputs.viewDidLoad() viewModel.inputs.type(email: \u0026#34;abc@xyz.com\u0026#34;) viewModel.inputs.type(password: \u0026#34;Password0\u0026#34;) viewModel.inputs.tapSubmit() let loadingStates = grabLatestValue(viewModel.outputs.isLoading, duration: 1) expect(loadingStates).to(beEqual([true, false])) } By looking at the codes related to inputs calls, we quickly have a sense of the scenarios we are trying to simulate. Similarly, what we expect to see are reflected upon outputs.\nReference  https://github.com/kickstarter/native-docs/blob/master/vm-structure.md https://github.com/kickstarter/native-docs/blob/master/inputs-outputs.md  ","href":"/tech/mvvm-best-practice-inputs-outputs/","title":"MVVM best practice: Inputs - Outputs"},{"content":"","href":"/tags/architecture/","title":"architecture"},{"content":"","href":"/tags/mvvm/","title":"mvvm"},{"content":" TL-DR A plenty of technical stuff, right üòÑ? [1], [3], [5] and [7] are good posts to read.\nShort on time? Pick [3] and [5]. They are the best among this list.\nDec 23, 2017 [8] Fowl Language: AI Decodes the Nuances of Chicken ‚ÄúSpeech‚Äù - Chicken chatter is not simply random noise. A üê•\u0026rsquo;s sound typically follows specific patterns which express specific messages. By conveying these using machine learning, we could improve farming. - Another related article on the application of ML/AI: Earth to exoplanet: Hunting for planets with machine learning.\n[7] Decomposing Emoji üò± #ios #swift #issue - Remember: when working with Unicode (String), DST (Date)\u0026hellip; please careful with your assumption. FYI, DST: It\u0026rsquo;s not always true that a day has 24 hours :D.\n[6] Apple Plans Combined iPhone, iPad \u0026amp; Mac Apps to Create One User Experience #news #ios #macos - This is nothing a rumor. Dave Verwer (from iOS Dev Weekly) shared his thought on it. He thought that the future of MacOS and iOS won\u0026rsquo;t probably go that way.\nDec 22, 2017 [5] How to Fit UX/UI into Agile and Scrum #agile #scrum - I really enjoy this article. I always find collaborating with designers is kind of challenging due to their distintive nature. Sometimes, it was their side that held the project back. This is not a blame but my view on the bottleneck of the software process I\u0026rsquo;ve experienced.\n In addition, UX is supposed to not only be inspired but also informed by user testing. Imagine the delays this could bring into a single vertically sliced story. Additionally, designers cannot create a design based on a single vertically sliced story, because they have to consider the whole user journey. For this reason, they tend to prefer designing on an epic level - At the end of the day, it\u0026rsquo;s all about working with people. Learning to code is much easier than learning to collaborate with people since human is always UNPREDICTABLE. - Related: What are the main differences between Scrum and Kanban?\n Dec 21, 2017 [4] Preventing UIVisualEffectView crash #ios #issue - An üì±-specific post. The solution suggested at the end is nice.\nDec 20, 2017 [3] The Senior Engineer‚Äôs Guide to Helping Others Make Decisions #soft-skills #problem-solving #mentor - I really enjoy this article. The way the senior engineer helped the junior one in the third conversation is awesome. Though I am not a senior engineer, this inter-personal skill is extremely necessary for collaboration with others. - A vital factor contributing to the power of this tip is how language is used: \u0026ldquo;That\u0026rsquo;s a good point\u0026rdquo;, \u0026ldquo;That would be great\u0026rdquo;.\n[2] No more rainbows! #data #visualization - In short, despite that rainbow colomap is eye-catching, it has some drawbacks in terms of interpretation and readability. There\u0026rsquo;s a good point to reason about solutions:\n I think what people like is the colour variance ‚Äî it acts like contours, highlighting subtle features in the surface\n Dec 19, 2017 [1] Why VIPER is a bad choice for your next application #ios #architecture #VIPER - I have to admit that my first experience with VIPER is not quite positive. Although separation of responsibilities is obviously a huge benefit it has brought, this architecture is kind of complicated with a lot of components. A bit like overengineered (just my personal feeling). - Another article on the same topic: #8 VIPER to be or not to be?. TLDR: Just take a look at the diagram at the end of the post.\n","href":"/reading/reading-week-51-dec-18-dec-24/","title":"Reading: Week 51, Dec 18 - Dec 24"},{"content":" At a glance  You are interested in popular science and general knowledge: [2] and [9] are for you. You are an iOS developer: [4], [5], [6] and [11] are worth a look. Finally, the book in [8] is awesome!  Dec 17, 2017 [11] Friday Q\u0026amp;A 2017-12-08: Type Erasure in Swift #ios #protocols #generic #type-safety - This post discussed several approaches towards type-easure. The underlying functions approach is the same as what I blogged a while ago in Swift: Generic protocol (p.1).\n We can recognize the noticeable presence of Bridge design pattern here because it is compatibility that motivates type erasure.\n This article published recently also mentions type erasure, and a few more problems when working with associate types: Patterns for Working With Associated Types. A nice-to-read!\n  [10] An Interactive Introduction To Quantum Computing Part 2 #quantum-computing - I\u0026rsquo;m not from Physics background but I cannot resist my curiosity to get to know this trendy term. The article gave me a rough sense of how quantum search totally defeats the conventional one. Anw, need more exposure!\n[9] What if everyone jumped at once? #science - R·∫•t th√≠ch c√°ch ƒë·∫∑t v·∫•n ƒë·ªÅ c·ªßa Vsauce. C√≥ nh·ªØng c√¢u h·ªèi t∆∞∆°ng t·ª±, ch·∫≥ng h·∫°n nh∆∞ gi·∫£ s·ª≠ b·∫•t th√¨nh l√¨nh Tr√°i ƒê·∫•t ng·ª´ng quay th√¨ chuy·ªán g√¨ x·∫£y ra? Nh·ªØng c√¢u n√†y l√†m m√¨nh nh·ªõ ƒë·∫øn nh·ªØng th√≠ nghi·ªám t∆∞·ªüng t∆∞·ª£ng c·ªßa Einstein.\nDec 16, 2017 [8] Diary of a Wimpy Kid (Diary of a Wimpy Kid, Book 1) #books #reading - This book is increadibly fantastic. The story was written in a very distinctively witty manner. I really love the way the author portraited the Greg-Rowley friendship and how Greg learned from his hard lessons. Also, the differences in how children and parents normally conceive were described so vividly, which brought me lots of laugh\u0026hellip; I\u0026rsquo;m gonna grab other books of the series :).\n[7] FluidDATA #podcasts #tools - Podcast lovers will be definitely into FluidDATA. The wonderful power of this site is that you can search podcasts based on your interests. This feature also provides you relevant sources whose contents meet your creteria.\nDec 15, 2017 [6] Swift Analytics: Comparing structs, enums and protocols #ios #analytics - Well, the original post by John has drawn lots of attention from the community. The way developers use to handle analytics diverges. Chris\u0026rsquo;s post gives a fair comparison between the approaches mentioned. In short, each has both benefits and drawbacks. It\u0026rsquo;s up to your needs to pick the most suitable implementation. Personally, I prefer Dave\u0026rsquo;s approach.\nDec 14, 2017 [5] SourceKit and You #ios #talk - ƒê√¢y l√† m·ªôt b√†i n√≥i, ch·ª© h·ªèk ph·∫£i b√†i ƒë·ªçc. T√≥m l·∫°i b√†i n√≥i l√†, SourceKit cho ph√©p m√¨nh l√†m vi·ªác v·ªõi language syntax, v√† gi·∫£i quy·∫øt nhi·ªÅu v·∫•n ƒë·ªÅ th√∫ v·ªã nh∆∞ code analysis, code generation, code refactoring\u0026hellip;\n ƒê√£ nghe n√≥i v·ªÅ SourceKit v√† c≈©ng th·ª≠ qua c√°c th∆∞ vi·ªán n·ªïi ti·∫øng x√¢y d·ª±ng tr√™n c√°i n√†y nh∆∞ SwiftLint, Sourcery trong m·∫•y c√°i projects th·ª≠ nghi·ªám. V·ªÅ c·∫£m nh·∫≠n c√° nh√¢n th√¨ m√¨nh th·∫•y SwiftLint c·ª±c k·ª≥ hi·ªáu qu·∫£. N·∫øu coding style l√† quan tr·ªçng ƒë·ªëi v·ªõi team th√¨ n√≥ ho√†n to√†n ƒë√°ng th·ªùi gian ƒë·ªÉ t√≠ch h·ª£p. M√¨nh nh·ªõ l·∫ßn ƒë·∫ßu g·∫Øn th·ª≠ v√†o project tr√™n c√¥ng ty (code base h∆°i l·ªõn), m·∫∑c d√π ƒë√£ disable c√°c rules, v√† ch·ªâ enable 1 v√†i rules th√¥i m√† s·ªë l∆∞·ª£ng warnings/errors bay nh·∫£y l√™n 3 con s·ªë (999+). L√Ω t∆∞·ªüng nh·∫•t l√† t√≠ch h·ª£p l√∫c ƒë·∫ßu. C√≤n kh√¥ng th√¨ chia theo pha m√† t√≠ch h·ª£p (m·ªói pha enable 1 s·ªë rules tu·ª≥ theo m·ª©c ƒë·ªô nghi√™m tr·ªçng, v√† m·ª©c ƒë·ªô vi ph·∫°m c·ªßa project hi·ªán t·∫°i). ƒê√¢y l√† c√°ch l√†m trong ƒë·∫ßu m√¨nh, ch·ª© project tr√™n c√¥ng ty v·∫´n ch∆∞a c√≥ d·∫•u ch√¢n c·ªßa swiftlint ƒë√¢u :)).\n S·∫µn ti·ªán nh·∫Øc v·ªÅ code analysis, m√¨nh c√≥ m·ªôt tr·∫£i nghi·ªám c≈©ng th√∫ v·ªã. Project m√¨nh tham gia l√∫c ·∫•y kh√° ƒë·∫∑c th√π v·ªÅ m·∫∑t code base. ƒê√≥ l√† m·ªôt d√≤ng c√°c apps m√† t·ª•i ch√∫ng share g·∫ßn h·∫øt 80% c√°c features, (20% c√≤n l·∫°i ng·ªën m·∫•t 80% th·ªùi gian v√† c√¥ng s·ª©c c·ªßa team ƒë√≥ LOL (jk)). Sau m·ªôt th·ªùi gian quan s√°t, t√¥i th·∫•y c√≥ nhi·ªÅu classes/structs/enums m·ªõi ra ƒë·ªùi, nh∆∞ng na na v·ªõi nh·ªØng app kh√°c. ƒê√¢y h·∫≥n l√† code smell - t√¥i nghƒ©.\n V√¨ mu·ªën ƒë√°nh gi√° ƒë∆∞·ª£c m·ª©c ƒë·ªô ph·ª©c t·∫°p c·ªßa project hi·ªán t·∫°i, xem th·ª≠ coi m·ª©c ƒë·ªô gi√£n n·ªü c·ªßa project ra sao theo th·ªùi gian, t√¥i quy·∫øt ƒë·ªãnh vi·∫øt 1 c√°i script r√∫-b√¨ (ruby), x√†i ch·ªß y·∫øu l√† regex v√† ƒë·ªçc ghi file l√† ch·ªß y·∫øu (code chu·ªëi l·∫Øm =]]). N√≥ cho m√¨nh xem overview c·ªßa project theo 1 v√†i th√¥ng s·ªë nh∆∞: s·ªë l∆∞·ª£ng classes/structs/enums/protocols, trong ƒë√≥ c√≥ bao nhi√™u th·∫±ng ƒë∆∞·ª£c x√†i chung, c√≥ bao nhi√™u th·∫±ng ch·ªâ x√†i ·ªü 1 v√†i apps. ƒê·∫°i √Ω l√† v·∫≠y, sau n√†y d·ª± s·∫Ω th√™m ti√™u ch√≠ kh√°c v√†o. Tuy nhi√™n, v√¨ d√πng regex ch·ª© kh√¥ng x√†i m·∫•y c√°i h√†o nho√°ng nh∆∞ SourceKit, c√≥ kh√° nhi·ªÅu tr∆∞·ªùng h·ª£p bi√™n ph·∫£i x·ª≠ l√Ω, v√≠ d·ª• nh∆∞ nested classes/structs/enums, comments, typealias. C≈©ng v√¨ x·ª≠ l√Ω nhi·ªÅu v·∫≠y n√™n th√≤i gian ch·∫°y kh√¥ng ƒë∆∞·ª£c nhanh l·∫Øm. C·ª±c kh·ªï v·∫≠y ƒë√≥, n√™n m·ªõi c·∫ßn ba c√°i frameworks n√†y ch·ªõ :D. ƒê√°nh gi√° chung th√¨ c√°i script t√¥i vi·∫øt ra kh√¥ng ƒë·ªß ƒë·ªÉ ph·ª•c v·ª• nhu c·∫ßu t∆∞∆°ng lai. Nh∆∞ng t√¥i kh√¥ng h·ªëi h·∫≠n khi d√†nh cu·ªëi tu·∫ßn ng·ªìi code thay v√¨ ƒëi ch∆°i. ƒê∆°n gi·∫£n v√¨ c√°i m√¨nh vi·∫øt ra gi√∫p cho m√¨nh c√≥ 1 c√°i nh√¨n t·ªïng quan, gi√∫p ƒë∆∞a ra ch·∫©n ƒëo√°n s∆° b·ªô v·ªÅ m·ªôt ƒë·ªëi t∆∞·ª£ng n√†o ƒë√≥. B∆∞·ªõc ƒë·∫ßu ti√™n trong gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ l√† nh·∫≠n di·ªán v·∫•n ƒë·ªÅ! Ngo√†i ra, n√≥ c√≤n ƒëem l·∫°i l·ª£i √≠ch v·ªÅ m·∫∑t h·ªçc t·∫≠p :).   Dec 13, 2017 [4] Friday Q\u0026amp;A 2017-10-27: Locks, Thread Safety, and Swift: 2017 Edition #ios #concurrency - Now I understand the name of os_unfair_lock. Lock fairness means that different threads could have some chances to acquire the lock. Otherwise, there could happend the situation in which a thread holds the lock (many times) for a long time. This lock, which is available since ios 10, is the replacement of OSSpinlock, to avoid thread priority issue.\n The high performance of os_unfair_lock comes from the fact it constantly check if the lock has been released or not.\n The author pointed out that DispatchQueue seems to be the right choice among those mentioned. I also run a benchmark and this is the result: NSLock ~\u0026lt; pthread_mutex_t \u0026lt; DispatchQueue ~\u0026lt; DispatchSemaphore \u0026lt; os_unfair_lock\n  [3] Meet the man behind the most important tool in data science #data-sience #story\nDec 11, 2017 [2] Can you solve the egg drop riddle? - Yossi Elran #ted #riddle - Interesting riddle. Definitely worth a share.\n[1] Doing Data Science at Twitter #data-science - The author mentioned two types of data scientists. One is particularly strong in statistics, other highly excels at programming skills.\n Really enjoy Dan\u0026rsquo;s comparison =]]   ‚ÄúBig data is like teenage sex: everyone talks about it, nobody really knows how to do it, everyone thinks everyone else is doing it, so everyone claims they are doing it‚Äù‚Ää‚Äî‚ÄäDan Ariely\n ","href":"/reading/reading-week-50-dec-11-dec-17/","title":"Reading: Week 50, Dec 11 - Dec 17"},{"content":"","href":"/tags/science/","title":"science"},{"content":" Kho·∫£ng 5-6 th√°ng tr∆∞·ªõc m√¨nh xem m·ªôt b·ªô phim t√†i li·ªáu c√≥ t·ª±a ƒë·ªÅ BBC - Horizon - 1996 - Fermat\u0026rsquo;s Last Theorem. ƒê√¢y l√† m·ªôt c√¢u chuy·ªán v·ªÅ l·ªãch s·ª≠ to√°n h·ªçc m√† m√¨nh th·∫•y r·∫•t hay n√™n mu·ªën chia s·∫ª l·∫°i.\nFermat l√† m·ªôt nh√† to√°n h·ªçc ng∆∞·ªùi Ph√°p. √îng c√≥ nhi·ªÅu ƒë√≥ng g√≥p quan tr·ªçng trong l√Ω thuy·∫øt s·ªë (number theory). M·ªôt trong s·ªë ƒë√≥ l√† ƒë·ªãnh l√Ω Fermat l·ªõn, hay ƒë·ªãnh l√Ω cu·ªëi c√πng c·ªßa Fermat (Fermat\u0026rsquo;s Last Theorem). ƒê·ªÉ cho ti·ªán, m√¨nh s·∫Ω g·ªçi n√≥ l√† ƒë·ªãnh l√Ω Fermat.\nTrong cu·ªën s√°ch Arithmetica c·ªßa Diophantus, Fermat ƒë√£ ghi tr√™n ƒë√≥ ph√°t bi·ªÉu ƒë·ªãnh l√Ω nh∆∞ sau:\n It is impossible to separate a cube into two cubes, or a bigquadrate into two bigquadrates, or in general any power higher than the second into two powers of like degree; I have discovered a truly remarkable proof which this margin is two small to contain.\n- D·ªãch t·ª´ b·∫£n g·ªëc, vi·∫øt b·∫±ng ch·ªØ Latin -\n Di·ªÖn ƒë·∫°t theo c√¥ng th·ª©c to√°n h·ªçc c·ªßa ƒë·ªãnh l√Ω n√†y r·∫•t ƒë∆°n gi·∫£n: kh√¥ng t·ªìn t·∫°i nghi·ªám nguy√™n d∆∞∆°ng cho ph∆∞∆°ng tr√¨nh $x^n + y^n = z^n$ v·ªõi $n \u0026gt; 2$.\nM·∫∑c d√π v·∫≠y, kh√¥ng c√≥ b·∫£n th·∫£o ch·ª©ng minh n√†o c·ªßa Fermat ƒë∆∞·ª£c t√¨m th·∫•y. Nhi·ªÅu ng∆∞·ªùi cho ƒë·∫øn b√¢y gi·ªù v·∫´n tin r·∫±ng Fermat ƒë√£ th·ª±c s·ª± kh√¥ng c√≥ l·ªùi gi·∫£i cho ƒë·ªãnh l√Ω m√† √¥ng ƒë√£ ph√°t bi·ªÉu.\nTrong su·ªët hai th·∫ø k·ª∑ ti·∫øp sau ƒë√≥, b√†i to√°n n√†y ƒë√£ th√°ch ƒë·ªë nhi·ªÅu b·ªô √≥c c·ªßa c√°c nh√† to√°n h·ªçc tr√™n th·∫ø gi·ªõi. Nh∆∞ng ch·ªâ c√≥ m·ªôt v√†i tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát ($n=3,4,5,6,7$) ƒë∆∞·ª£c ch·ª©ng minh. B√†i to√°n √≠t ƒë∆∞·ª£c ch√∫ √Ω d·∫ßn.\nTi·ªÅn ƒë·ªÅ M·ªôt c·ªôt m·ªëc quan tr·ªçng trong qu√° tr√¨nh ch·ª©ng minh ƒë·ªãnh l√Ω h√≥c b√∫a n√†y l√† khi gi·∫£ thuy·∫øt Shimura-Taniyama (Shimura-Taniyama conjecture) ƒë∆∞·ª£c ƒë·ªÅ xu·∫•t v√†o nƒÉm 1955. Gi·∫£ thuy·∫øt n√†y x√¢y d·ª±ng c·∫ßu n·ªëi gi·ªØa 2 d√≤ng nghi√™n c·ª©u t√°ch bi·ªát nhau: ƒë∆∞·ªùng cong elliptic (elliptic curves) v√† d·∫°ng modular (modular forms). M·∫∑c d√π c√°c nh√† to√°n h·ªçc b·∫•y gi·ªù tin r·∫±ng gi·∫£ thuy·∫øt n√†y ƒë√∫ng, v·∫´n ch∆∞a c√≥ ai ch·ª©ng minh ƒë∆∞·ª£c.\nƒê·∫øn nƒÉm 1986, Ken Ribet, m·ªôt nh√† to√°n h·ªçc ng∆∞·ªùi M·ªπ, c√¥ng b·ªë m·ªôt ch·ª©ng minh d·ª±a tr√™n nghi√™n c·ª©u c·ªßa Gerhard Frey (ng∆∞·ªùi ƒê·ª©c) tr∆∞·ªõc ƒë√≥. K·∫øt qu·∫£ n√†y ƒë∆∞a ƒë·∫øn m·ªôt m·ªëi li√™n h·ªá gi·ªØa gi·∫£ thuy·∫øt Shimura-Taniyama v√† b√†i to√°n Fermat. M·ªôt c√°ch c·ª• th·ªÉ, n·∫øu gi·∫£ thuy·∫øt Shimura-Taniyama ƒë∆∞·ª£c ch·ª©ng minh th√¨ ƒë·ªãnh l√Ω Fermat c≈©ng ƒë∆∞·ª£c ch·ª©ng minh.\nAndrew Wiles Andrew Wiles (1953) l√† m·ªôt nh√† to√°n h·ªçc ng∆∞·ªùi Anh. √îng l·∫ßn ƒë·∫ßu bi·∫øt ƒë·∫øn ƒë·ªãnh l√Ω Fermat l√∫c m·ªõi 10 tu·ªïi, ·ªü m·ªôt th∆∞ vi·ªán ƒë·ªãa ph∆∞∆°ng. √îng c≈©ng ƒë√£ b·ªè c√¥ng ra ch·ª©ng minh, nh∆∞ng t·∫°m g√°c l·∫°i v√¨ kh√¥ng ƒë·ªß c√¥ng c·ª•.\nM√£i v·ªÅ sau, khi Andrew Wiles khi nghe tin v·ªÅ c√¥ng b·ªë c·ªßa Ribet, √¥ng ƒë√£ b·ªè nghi√™n c·ª©u hi·ªán t·∫°i v√† d√†nh 7 nƒÉm ti·∫øp theo cho b√†i to√°n n√†y. √îng gi·ªØ c√¥ng vi·ªác n√†y b√≠ m·∫≠t, v√† ch·∫≥ng ai bi·∫øt √¥ng ƒëang nghi√™n c·ª©u v·ªÅ c√°i g√¨.\nCu·ªëi c√πng, v√†o nƒÉm 1993, Wiles ƒë√£ ho√†n t·∫•t b·∫£n ch·ª©ng minh c·ªßa m√¨nh. Trong m·ªôt h·ªôi ngh·ªã to√°n h·ªçc ·ªü Cambridge, Wiles c√≥ 3 bu·ªïi thuy·∫øt tr√¨nh v·ªÅ l√Ω thuy·∫øt s·ªë. Bu·ªïi cu·ªëi c√πng, sau khi gi·ªõi thi·ªáu v·ªÅ m·ªôt k·ªπ thu·∫≠t s·ª≠ d·ª•ng trong ch·ª©ng minh c·ªßa m√¨nh, √¥ng ghi tr√™n b·∫£ng ph√°t bi·ªÉu c·ªßa ƒë·ªãnh l√Ω Fermat, v√† n√≥i \u0026ldquo;T√¥i nghƒ© l√† t√¥i ƒë√£ ch·ª©ng minh ƒë∆∞·ª£c n√≥ r·ªìi\u0026rdquo;.\nNh·ªØng ng√†y sau ƒë√≥, b√°o gi·ªõi ƒë·ªìng lo·∫°t ƒë∆∞a tin v·ªÅ s·ª± ki·ªán n√†y. Cu·ªëi c√πng th√¨ sau ba th·∫ø k·ª∑, b√†i to√°n c·ªßa Fermat c≈©ng ƒë√£ c√≥ l·ªùi gi·∫£i.\nTuy nhi√™n\u0026hellip;\nB√†i b√°o c·ªßa Wiles ƒë∆∞·ª£c g·ª≠i cho c√°c chuy√™n gia ph·∫£n bi·ªán. Trong qu√° tr√¨nh ƒë·ªçc v√† d√≤ x√©t, Nick Katz, 1 trong s·ªë nh·ªØng ng∆∞·ªùi ph·∫£n bi·ªán, ph√°t hi·ªán ra m·ªôt l·ªói c∆° b·∫£n trong b·∫£n ch·ª©ng minh. Wiles ƒë√£ d√†nh c·∫£ m√πa thu ƒë√≥ ƒë·ªÉ ch·ªânh s·ª≠a, nh∆∞ng kh√¥ng th√†nh. ƒê√£ c√≥ nhi·ªÅu l·ªùi k√™u g·ªçi gi√∫p ƒë·ª° nh∆∞ng √¥ng t·ª´ ch·ªëi c√¥ng b·ªë b·∫£n ch·ª©ng minh (c√≥ l·ªói) c·ªßa m√¨nh. Cu·ªëi c√πng, v√†o th√°ng 9 nƒÉm 1994, tr∆∞·ªõc khi quy·∫øt ƒë·ªãnh c√¥ng b·ªë b·∫£n ch·ª©ng minh ch∆∞a ho√†n thi·ªán n√†y, √¥ng ƒë√£ gi·∫£i ƒë∆∞·ª£c n√∫t th·∫Øt v·∫•n ƒë·ªÅ. L·ªùi gi·∫£i l·∫°i ch√≠nh l√† c√°ch ti·∫øp c·∫≠n m√† √¥ng ƒë√£ b·ªè m·∫∑c 3 nƒÉm tr∆∞·ªõc ƒë√≥. B√†i b√°o c·ªßa Wiles ƒë∆∞·ª£c xu·∫•t b·∫£n v√†o nƒÉm 1995.\nB√¨nh lu·∫≠n ƒê√¢y ƒë∆∞·ª£c xem l√† m·ªôt th√†nh t·ª±u to l·ªõn trong l√Ω thuy·∫øt s·ªë l√∫c b·∫•y gi·ªù, kh√¥ng ph·∫£i b·ªüi ·ª©ng d·ª•ng c·ªßa ƒë·ªãnh l√Ω Fermat, m√† b·ªüi nh·ªØng c√¥ng c·ª• to√°n h·ªçc ra ƒë·ªùi ƒë·ªÉ ch·ª©ng minh n√≥. Th·∫≠t ƒë√°ng ti·∫øc khi Wiles ƒë√£ kh√¥ng s·ª≠a ch·ª≠a ƒë∆∞·ª£c b·∫£n ch·ª©ng minh l·ªói s·ªõm h∆°n v√¨ khi ho√†n th√†nh xong b·∫£n ch·ª©ng minh ƒë√∫ng c·ªßa m√¨nh, √¥ng ƒë√£ b∆∞·ªõc qua tu·ªïi 41 v√† qu√° h·∫°n v·ªÅ ƒë·ªô tu·ªïi cho gi·∫£i th∆∞·ªüng Fields. N·∫øu kh√¥ng th√¨ c√≥ l·∫Ω √¥ng ƒë√£ d√†nh ƒë∆∞·ª£c gi·∫£i th∆∞·ªüng cao qu√Ω n√†y r·ªìi.\nM·ªôt b√†i to√°n v·ªõi ph√°t bi·ªÉu ƒë∆°n gi·∫£n ƒë·∫øn th·∫ø, nh∆∞ng m√£i t·ªõi ba trƒÉm nƒÉm sau m·ªõi gi·∫£i ƒë∆∞·ª£c. Ri√™ng ƒë·ªëi v·ªõi Andrew Wiles th√¨ ƒë√£ d√†nh ng√≥t ngh√©t ch·ª•c nƒÉm cho b√†i to√°n ƒë∆∞·ª£c xem l√† kh√¥ng gi·∫£i ƒë∆∞·ª£c n√†y.\nCh·ª©ng minh c·ªßa Andrew Wiles bao g·ªìm nhi·ªÅu c√¥ng c·ª• to√°n h·ªçc, nhi·ªÅu kh√°i ni·ªám m√† th·ªùi c·ªßa Fermat l√∫c b·∫•y gi·ªù kh√¥ng c√≥. Do ƒë√≥, m·∫∑c d√π c√≥ ng∆∞·ªùi nghƒ© r·∫±ng c√≥ th·ªÉ Fermat ƒë√£ gi·∫£i ƒë∆∞·ª£c b√†i to√°n b·∫±ng m·ªôt c√°ch n√†o ƒë√≥, nhi·ªÅu ng∆∞·ªùi v·∫´n ƒë·∫∑t d·∫•u ch·∫•m h·ªèi cho tuy√™n b·ªë c·ªßa Fermat r·∫±ng √¥ng ƒë√£ th·ª±c s·ª± ch·ª©ng minh ƒë∆∞·ª£c n√≥.\nTham kh·∫£o [1] BBC - Horizon - 1996 - Fermat\u0026rsquo;s Last Theorem\n[2] Fermat\u0026rsquo;s Last Theorem: The Whole Story\n","href":"/misc/fermats-last-theorem/","title":"ƒê·ªãnh l√Ω cu·ªëi c√πng c·ªßa Fermat"},{"content":" Dec 10, 2017  Interactive visualizations of sampling and GP regression #probability #statistics #sampling\n\u0026ndash;\u0026gt; Blog post n√†y gi·ªõi thi·ªáu (open-source) interative demo v·ªÅ MCMC (Markov Chain Monte Carlo) v√† Gaussian Process. M√¨nh ch∆∞a bi·∫øt v·ªÅ Gaussian Process, nh∆∞ng ƒë√£ c√≥ t√¨m hi·ªÉu v·ªÅ MCMC v√† th·∫•y r·∫•t hay. Ok, s·∫Ω t√¨m hi·ªÉu v·ªÅ Gaussian Process, v√† c≈©ng s·∫Ω th·ª≠ vi·∫øt 1 b√†i nh·ªè v·ªÅ MCMC.\n B·∫Øt ƒë·∫ßu Big Data t·ª´ ƒë√¢u v√† nh∆∞ th·∫ø n√†o?#talk #data-science\n https://twitter.com/cabel/status/931292107372838912#tip\n\u0026ndash;\u0026gt; ƒê√¢y l√† tip ƒë·ªÉ s·ª≠ d·ª•ng fingerprint ƒë·ªÉ x√°c nh·∫≠n sudo authorization, thay cho password. Nice tip! Nh∆∞ng c√° nh√¢n th√¨ s·∫Ω kh√¥ng ƒë√°nh ƒë·ªïi security ƒë·ªÉ l·∫•y convenience. N√≥i chung: you it at your own risk!\n  Dec 08, 2017  When Not to Use an Enum #enum #analytics #ios\n\u0026ndash;\u0026gt; I share the same point with Matt that enum in this case is not a good choice. By using struct as Matt suggested, the code becomes more abstract. In the original post of Sundell, AnalyticsManager highly depends on concrete. Another option we could think of is to use enum is to use different analytics tracker for each workflow. For instance, for login flow, we have LoginAnalyticsTracker and LoginAnalyticsEvent. With this approach, we achieve both separation of responsibilities, and abstraction (protocol-based).\n Chasing Fermat‚Äôs Last Theorem #math #history\n\u0026ndash;\u0026gt; ƒê·ªçc ƒë∆∞·ª£c post n√†y tr√™n wordpress. Nh·ªõ ƒë·∫øn b·ªô phim t√†i li·ªáu h·ªìi m·∫•y th√°ng tr∆∞·ªõc coi, k·ªÉ v·ªÅ Fermat\u0026rsquo;s Last Theorem v√† h√†nh tr√¨nh m√† Andrew Wiles ƒëi ƒë·∫øn l·ªùi gi·∫£i. M√¨nh nghƒ© l√† s·∫Ω vi·∫øt ri√™ng 1 b√†i v·ªÅ topic n√†y.\n  Dec 07, 2017  Nh·ªØng c√¢u chuy·ªán tr√™n m√°y bay #tapbut\n\u0026ndash;\u0026gt; L√¢u r·ªìi m·ªõi th·∫•y anh Hi·∫øu vi·∫øt b√†i. ƒê√¢y l√† m·ªôt b√†i vi·∫øt nh·∫π nh√†ng, nh∆∞ng m√¨nh ƒë·ªçc th·∫•y r·∫•t th√≠ch. C√≥ 2 th·ªÉ lo·∫°i vi·∫øt khi·∫øn m√¨nh ƒë·ªçc v√†o c√≥ 1 c·∫£m h·ª©ng d·ªìi ƒë√†o. M·ªôt l√† th·ªÉ lo·∫°i mind-blowing, gi·ªëng nh∆∞ Thinking fast and slow, Phi l√Ω tr√≠ v√† s√°ch c·ªßa th·∫ßy Phan D≈©ng. Th·ªÉ lo·∫°i th·ª© hai l√† nh·ªØng m·∫´u chuy·ªán (nh·ªè) xoay quanh cu·ªôc s·ªëng th∆∞·ªùng nh·∫≠t, ƒë∆∞·ª£c ghi l·∫°i b·ªüi nh·ªØng c√°i nh√¨n tinh t·∫ø, nh∆∞ c√°i b√†i vi·∫øt tr√™n :D.\n Why Women Should Lead our A.I. Future #AI\n\u0026ndash;\u0026gt; Th·∫≠t ra m√¨nh kh√¥ng ƒë·ªìng √Ω h·∫≥n v·ªõi quan ƒëi·ªÉm c·ªßa t√°c gi·∫£ b·ªüi \u0026ldquo;·ªû ƒë√¢u c≈©ng c√≥ anh h√πng, ·ªü ƒë√¢u c≈©ng c√≥ ng∆∞·ªùi kh√πng ng∆∞·ªùi ƒëi√™n\u0026rdquo;. Tuy nhi√™n, c√≥ m·ªôt lu·∫≠n ƒëi·ªÉm m√¨nh th·∫•y thuy·∫øt ph·ª•c (b·∫°n c√≥ th·ªÉ th·∫•y kh√¥ng thuy·∫øt ph·ª•c):\n   The reason for this is that women have a greater intuitive understanding of what makes us all human. Women have a natural inclination to focus on the important things that make us human. To maximize the benefit of AI technology we must focus on how AI improves our humanity and therefore we need to understand, at the very least, what makes us human and not what makes us machines.\n  Distance oracle ‚Äì Truy v·∫•n nhanh kho·∫£ng c√°ch gi·ªØa hai ƒëi·ªÉm b·∫•t k·ª≥ tr√™n ƒë·ªì th·ªã #data-science\n\u0026ndash;\u0026gt; Post n√†y c√≥ h√†m l∆∞·ª£ng l√Ω thuy·∫øt cao :). B√†i n√†y m√¨nh ch·ªçn hi·ªÉu ph·∫ßn m·ªü ƒë·∫ßu v√† k·∫øt lu·∫≠n c·ªßa post, c√≤n ph·∫ßn chi ti·∫øt trong slides th√¨ m√¨nh ch∆∞a hi·ªÉu v√† c≈©ng ch∆∞a ƒë·ªãnh hi·ªÉu. T√≥m v√°y l·∫°i l√† v·ªõi b√†i to√°n truy v·∫•n kho·∫£ng c√°ch tr√™n ƒë·ªì th·ªã th√¨ vi·ªác nh·ªØng c·∫•u tr√∫c d·ªØ li·ªáu th√¥ng th∆∞·ªùng s·∫Ω cho k√©m hi·ªáu qu·∫£ (th·∫≠m ch√≠ b·∫•t kh·∫£ thi) ƒë·ªëi v·ªõi d·ªØ li·ªáu l·ªõn. Distance oracle l√† m·ªôt c·∫•u tr√∫c d·ªØ li·ªáu cho ra k·∫øt qu·∫£ x·∫•p x·ªâ nh∆∞ng ƒëem l·∫°i l·ª£i √≠ch l·ªõn v·ªÅ m·∫∑t kh√¥ng gian l∆∞u tr·ªØ v√† th·ªùi gian truy v·∫•n. X·∫•p x·ªâ n√†y ƒë∆∞·ª£c ki·ªÉm ch·ª©ng tr√™n c√°c dataset th·ª±c t·∫ø, v√† cho th·∫•y sai l·ªách kh√¥ng ƒë√°ng k·ªÉ.  Dec 06, 2017  Advice to aspiring data scientists: start a blog #data-science #blogging #advice\n\u0026ndash;\u0026gt; Typical advice. Not only for data scientists, but also for software engineers, designers, or anyone. I really love the pic in the post. My personal experience: blogging has brought me lots of joy. The moment when you publish a post after dayssss writing is so good.\n http://blogs.tedneward.com/patterns/builder #ios #design-pattern\n\u0026ndash;\u0026gt; In short, Builder design pattern is useful for create an object constructed by different parts, and the construction process of that object is non-trivial.\n  Dec 04, 2017  ƒê·ªçc c√°i g√¨, v√† ƒë·ªçc ·ªü ƒë√¢u #reading\n\u0026ndash;\u0026gt; M·ªôt c√°i post nh·∫π nh√†ng, d√≠ d·ªèm cho ƒë·∫ßu tu·∫ßn. T√≥m l·∫°i c√°i post n√†y n√™u ra 2 lu·∫≠n ƒëi·ªÉm ch√≠nh. Th·ª© nh·∫•t, c√°c \u0026ldquo;th√°nh\u0026rdquo; ƒë·ªÅu c√≥ b√≠ quy·∫øt c·ªßa ri√™ng m√¨nh. B√≠ quy·∫øt c·ªßa th√°nh n√†y c√≥ th·ªÉ tr√°i ng∆∞·ª£c v·ªõi c√°c th√°nh kh√°c. C√≥ ng∆∞·ªùi h·ªçc theo ki·ªÉu gi·∫£i tr√≠, c√≥ ng∆∞·ªùi h·ªçc theo l·ªëi c√†y qu·ªëc. Quan tr·ªçng nh·∫•t l√† x√°c ƒë·ªãnh c√°i m√¨nh mu·ªën h·ªçc. Lu·∫≠n ƒëi·ªÉm th·ª© 2, t√°c gi·∫£ n√™u ra m·ªôt s·ªë ngu·ªìn th√¥ng tin h·ªØu √≠ch, bao g·ªìm blogs, wiki, s√°ch, b√†i b√°o\u0026hellip;\n The Story Behind ‚Äúanyone can login as root‚Äù Tweet\n\u0026ndash;\u0026gt; The tweet went viral last week. The tweet poster was not the one who discovered it, just the one who spread the news. In fact, the issue had been around for more than a week.\n  ","href":"/reading/reading-week-49-dec-04-dec-10/","title":"Reading: Week 49, Dec 04 - Dec 10"},{"content":" *Hola! Today witnessed the commencement of the Reading Corner. This column features a mixture of what I have read that I think is worth a look. Most of them will be like random thoughts on various topics (in brief), written in either English or Vietnamese. If you happen to read these posts and would like to share your own opinion, please feel free to leave your comment below. Will try to keep it constant :)*\nDec 03, 2017  How Can Undergraduates Prepare for a Career in Data Science?   I strongly believe that completing an internship is more valuable than a ‚ÄúML related summer research project,‚Äù unless\u0026hellip; - Find engineering teams that share your values - VR/AR Design\n\u0026ndash;\u0026gt; One key take away: with VR/AR, the design concepts are different. For instance, VR/AR design is non-boundary whereas current UI designs always have boundaries. Therefore, defining how objects appear and disappear will be a part of the VR/AR work.\n Dec 02, 2017 I was not born yet ;)\n","href":"/reading/reading-week-48-nov-27-dec-03/","title":"Reading: Week 48, Nov 27 - Dec 03"},{"content":" A while ago, I read the book Probabilistic Programming and Bayesian Methods for Hackers written by Cam Davidson-Pilon and was really impressed by an example of carrying out surveys. Although it is not a standard method with wide scope of use, from the perspective of a software engineer who is not from statistics background, I think its idea is pretty beautiful and worth knowing.\nCase study  To determine the ratio of cheating in exams, N random students were chosen each of whom were asked if they had ever cheated during an exam. The frequency of yes responses reflected the probability of cheating (within the population in which those students were representative of).\n For now, let\u0026rsquo;s assume that the number of interviewees is large enough so that the result is reasonably reliable.\nProblem One of the biggest challenges of this problem is to guarantee the privacy of interviewees\u0026rsquo; answers because this kind of information is sensitive. Otherwise, students could be more likely to lie. An anology is that one cannot ask another if he/she is diagnosed HIV positive and expect an honest response.\nAn alternative There are several ways to tackle this issue. The author of the book introduced an approach by changing the way students give their answers. The algorithm in which a student responds to the interview is briefly described as follows:\n Step 1. Flip a (fair) coin twice. The interviewer does not know which side appears in each flips. Step 2. If the first flip is HEAD, the student gives the honest answer. Step 3. Otherwise, if the second toss is HEAD, the student gives a YES response (regardless his/her honest answer). Step 4. Otherwise (the second coin turns TAIL), the student give a NO response (regardless his/her honest answer).  With this approach, if the surveyor receives a YES response, he/she has no idea if that student cheated or not, because his/her answer corresponds to the 3rd step.\nInference Ok, the randomness is established. How do we infer the cheating frequency?\nLet $p$ be the probability of cheating among students. Then the probability of YES response is:\n$$ \\begin{align} \u0026amp; P(\\txt{YES response}) \\\\ \u0026amp;= P(\\txt{1st coin is HEAD, student cheated}) + P(\\txt{1st coin is HEAD, 2nd coin is HEAD}) \\\\ \u0026amp;= 0.5*p+0.5*0.5 = 0.5*p+0.25 \\end{align} $$\n$\\implies p = 2 * P(\\txt{YES response}) - 0.5$\nAccording to this formular, if there are 35 out of 100 students giving YES responses, the frequency of cheating equals 0.2.\nThis approach is pretty simple, right? But it ensures privacy without reliance on any technology system :D. Regardless other social factors, participants are less scared to provide their true answers.\nReference  Cam, Davidson-Pilon. \u0026ldquo;Chapter 2: A little more on PyMC.\u0026rdquo; Probabilistic Pogramming and Bayesian Methods for Hackers.  ","href":"/tech/an-example-of-survey-with-privacy/","title":"An example of Survey with privacy"},{"content":" There are times we wish to fake a network event, for example, a network error. However, integrating a 3rd party stub library just for this purpose is not really worthy. This post aims at demonstrating how to stub network. It is not a tutorial on \u0026ldquo;how to create a stubbing framework\u0026rdquo;, therefore, some boundary cases will not be covered so that readers could stay focused.\nFundamental A typical workflow of network requests A typical workflow to make a network request is:\n Create a session URLSession Create a task associated with the request: let task = session.dataTask(...) { ... } Start/resume the task by calling task.resume()  Variations of this workflow Network requests in iOS may behave differently depending on the configuration of the session. By configuration, I mean URLSessionConfiguration.\nHow to stub Case study  For debug purpose, we want to create a fake network response for a specific url. For simplicity, we return the response with status code 500.\n URLProtocol This is an abstract class that handles network requests. Note: It is a class although its name sounds like a protocol. By default, there are several subclasses of it each of which takes responsibility for a specific URL scheme (http, ftp, file\u0026hellip;): _NSURLHTTPProtocol, _NSURLDataProtocol, _NSURLFTPProtocol, _NSURLFileProtocol, NSAboutURLProtocol.\nWhen a request is made, the app consults these classes. The first one providing true to canInit(with:) will be given to handle that request.\nLet\u0026rsquo;s stub The core idea of stubbing network lies at: - $H_1$. How we register our custom class (subclass of URLProtocol) to the protocol classes - $H_2$. How we appoint our class to handle the request - $H_3$. How we return the appropriate stubbing response\nWe will talk about $H_1$ later because it involves a few cases that should be taken into account. Let\u0026rsquo;s assume that $H_1$ is already done. Then, $H_2$ is quite simple. We just check whether the request was registered to be stubbed or not.\nclass CustomURLProtocol: URLProtocol { private static var stubs: [String: CustomResponse] = [:] override open class func canInit(with request: URLRequest) -\u0026gt; Bool { return url != nil \u0026amp;\u0026amp; stubs[request.url!.absoluteString] != nil }\tclass func addStub(url: URL, response: CustomResponse) { stubs[url.absoluteString] = response } ... } func stub(url: URL, statusCode: Int) { ... CustomURLProtocol.addStub(url: url, response: CustomResponse(statusCode: statusCode)) } $H_3$ is achieved by overriding startLoading(). I will not dive into much detail because it is like building a framework. A simple implementation could be like this:\nclass CustomURLProtocol: URLProtocol { ... override func startLoading() { guard let stubResponse = CustomURLProtocol.stubs[request] else { fatalError() } // Should not happen switch stubResponse { case .error(let error): client?.urlProtocol(self, didFailWithError: error) case .response(let response): client?.urlProtocol(self, didReceive: response, cacheStoragePolicy: .allowed) client?.urlProtocolDidFinishLoading(self) ... } } } Now comes the crucial part - $H_1$. There are 2 cases to consider: using the shared session, and creating a session with a configuration.\nShared session The shared session with basic setups is retrieved via URLSession.shared. In that case, we could make out custom URLProtocol subclass visible to the loading system by calling URLProtocol.registerClass(_:).\nNote that, the process of consulting these protocol classes take place in the reversed order. The latest one to register will be consulted first.\nSession initialized with a configuration The workflow in this case is a bit different. The app does not lookup the protocol classes we register. Rather, it chooses from the classes stored in URLSessionConfiguration.protocolClasses. URLProtocol.registerClass(_:) does not help now\u0026hellip; A solution could be adopted by adding our custom class to configuration.protocolClasses. Make sure to insert it to the top so that it is consulted first.\nconfiguration.protocolClasses = [CustomURLProtocol.self] + configuration.protocolClasses! Everything is nearly done! The only thing left is to make sure the configuration a session is using has the setup above. Fortunately, fow now, we can only create a configuration by either one of the three following.\nlet configuration1 = URLSessionConfiguration.default let configuration2 = URLSessionConfiguration.ephemeral let configuration3 = URLSessionConfiguration.background(withIdentififer: identifier) Using a configuration created by URLSessionConfiguration() will throw a crash. I am not quite sure if it\u0026rsquo;s a bug or by intention, but I am glad it crashes. Thanks to that, we only have to deal with 3 corner cases. To manipulate the configuration, we can swizzle the getter of .default, .emphemeral and the function .background(withIdentififer:). The swizzle code should be run once, when we perform the first stub.\n// For demo, I only cover the case of `.default` let swizzleDefaultSessionConfiguration: Void = { let m1 = class_getClassMethod(URLSessionConfiguration.self, #selector(getter: URLSessionConfiguration.default)) let m2 = class_getClassMethod(URLSessionConfiguration.self, #selector(URLSessionConfiguration.swizzled_defaultSessionConfiguration)) if let m1 = m1, let m2 = m2 { method_exchangeImplementations(m1, m2) } }() extension URLSessionConfiguration { @objc dyamic class function swizzled_defaultSessionConfiguration() -\u0026gt; URLSessionConfiguration { let configuration = swizzled_defaultSessionConfiguration() configuration.protocolClasses = [CustomURLProtocol.self] + configuration.protocolClasses! return configuration } } Now, all pieces are ready. Glue them together and enjoy!\nAnother approach Instead of taking care of the 2 cases above, we could simply swizzle the init funtions of URLSession. We should swizzle the 2 initializers that take a URLSessionConguration as a param. The beauty of this approach is that we no longer need to register our custom class via URLProtocol.registerClass(_:).\n// For demo, only `URLSession.init(configuration:)` is swizzled :D let swizzleURLSession: Void = { let m1 = class_getClassMethod(URLSession.self, #selector(URLSession.init(configuration:))) let m2 = class_getClassMethod(URLSession.self, #selector(URLSession.swizzled_init(configuration:))) if let m1 = m1, let m2 = m2 { method_exchangeImplementations(m1, m2) } }() extension URLSession { @objc dynamic class func swizzled_init(configuration: URLSessionConfiguration) -\u0026gt; URLSession { configuration.protocolClasses = [CustomURLProtocol.self] + configuration.protocolClasses! return swizzled_init(configuration: configuration) } } Further discussion P/s: TLDR (You can skip this part because details may get you distracted)\nQuestions remained There are a couple of things I have not had reasonable explanations for.\n $P_1$. First of all, why should there be differerences between the 2 cases mentioned above? Is URLSessionConfiguration not enough?\n $P_2$. The documentation says \u0026ldquo;Classes are consulted in the reverse order of their registration\u0026rdquo;, but the implementation does not seem to work that way. You could take a look at it here and here. The consulted classes are chosen from 2 sources: session.configuration.protocolClasses and URLProtocol._registeredProtocolClasses. But there is no sign of reversion???\n $P_3$. Another thing stopping me from the deep understanding is NSUnimplemented(). I see it quite often, and have no idea what is actually going on behind it.\n $P_4$. How the program behaves does not exactly match the code in the swift-corelibs-foundation repo. For example, when first glancing at the code in URLSessionConfiguration, I thought the default configutaion has one item in protocolClasses according to the init setup. But the logs show 5 items (_NSURLHTTPProtocol, _NSURLDataProtocol, _NSURLFTPProtocol, _NSURLFileProtocol, NSAboutURLProtocol). A private class method _defaultProtocolClasses() was called and returned these 5 classes. Hmmm, let\u0026rsquo;s not care about them.\n  Bizarre stuffs  $P_5$. A strange thing is that URLSession.init(configuration:) and URLSession.init(configuration:delegate:delegateQueue:) turn out to be class methods, not instance methods. P/s: we could get the instance methods and class methods using this api: class_copyMethodList(_:_:).\nAfter a while investigating, I notice that initializers that have /*not inherited*/ in their function signatures (in Apple github) all have the same phenomenon. Also, when subclassing it, these functions are not applicable to be overriden (like what the comment implies), but it is still visible to the invocations. My doubt is that when the framework is built, they are transformed to:\nswift class func `init`(configuration: URLSessionConfiguration) -\u0026gt; URLSession { ... }  I tried to simulate this situation with a custom class. The logs show a similar result. However, when subclassing that class, Xcode keeps failing to compile due to not being able to check the subclass type. So I think my suspicion is not quite correct, but it\u0026rsquo;s still reasonable to me :). Anyway, that\u0026rsquo;s not a big deal! Finally, if a stubbing framework is what you are looking for, Mockingjay is my recommendation :D. ### Reference 1. Mockingjay source code 2. NSURLProtocol Tutorial by Ray Wenderlich 3. Swift core libraries: swift-corelibs-foundation  ","href":"/tech/how-to-stub-network-in-ios/","title":"How to stub network in iOS"},{"content":"","href":"/tags/network/","title":"network"},{"content":"","href":"/tags/stub/","title":"stub"},{"content":"","href":"/tags/testing/","title":"testing"},{"content":" Problem I always thought that Tail call optimization (TCO), sometimes called tail recursion optimization, is supported in most languages by default. It turns out to be opposite.\nI happened to find it out when solving a Hackerrank problem (using Python). As a fan of functional programming, I used recursion for better readability. Of course, I wrote the code in tail recursion to avoid memory issues and let the system take care the rest. Yet, a segmentation fault exception was thrown as a potential evidence of the absence of TCO.\nAfter a few minutes googling, I found that there is an approach to eliminate the memory issues without changing my code to while-loop style. Here is the reference. You don\u0026rsquo;t need to understand it, just remember that in Python, there exist a solution to fix it.\nHow about Swift?\nInvestigation Consider this code:\nfunc sumPrefix(_ n: Int, _ acc: Int) -\u0026gt; Int { if n == 0 { return acc } return sumPrefix(n - 1, acc + n) } _ = sumPrefix(1000000, 0) Build this code with -Onone (no optimization), and run the program. You will get a crash!\nxcrun swiftc -Onone main.swift; ./main\nWhen turning on the optimization, the program executes properly.\nxcrun swiftc -O main.swift; ./main\nClearly, the tail recursion optimization was not supported in the -Onone build. Otherwise, it would have not crashed. About the -O build, the tail call was optimized. A nice way to inspect it is looking at the asm file: xcrun swiftc -O -S main.swift \u0026gt; main.asm.\nNo callq instruction was found! That means, the recursive instruction which expands the stack frame is replaced by jump instructions.\nBut wait! No callq indicates that the invocation _ = sumPrefix(1000000, 0) was inlined. How do we know that the exception was not raised as a result of inlining or TCO? Let\u0026rsquo;s force Swift not to inline this function:\n@inline(never) func sumPrefix(_ n: Int, _ acc: Int) -\u0026gt; Int { ... } Now, callq is back! And there is only one function call.\n... _main: pushq\t%rbp movq\t%rsp, %rbp movl\t$1000000, %edi xorl\t%esi, %esi callq\t_main.sumPrefix(Swift.Int, Swift.Int) -\u0026gt; Swift.Int xorl\t%eax, %eax popq\t%rbp retq .private_extern\t_main.sumPrefix(Swift.Int, Swift.Int) -\u0026gt; Swift.Int .globl\t_main.sumPrefix(Swift.Int, Swift.Int) -\u0026gt; Swift.Int .p2align\t4, 0x90 _main.sumPrefix(Swift.Int, Swift.Int) -\u0026gt; Swift.Int: pushq\t%rbp movq\t%rsp, %rbp testq\t%rdi, %rdi je\tLBB1_4 .p2align\t4, 0x90 ... LBB1_4: movq\t%rsi, %rax popq\t%rbp retq ... Discussion Although the problem does not happen in optimized builds, I expect the TCO support to be available in any level of optimization. You cannot write readable code that crashes on Debug builds.\nAs recursion is a crucial piece of functional programming, I believe this is definitely a lack of support and a limitation of language. Take Scala as an example, you could instruct the program to optimize the tail call using @tailrec. Or at least, in Python, we could fix it with decorators and achieve the same result.\nIn fact, there was a proposal for TCO. You could find it here. But it was a pretty long time ago\u0026hellip; And I think it will keep staying there for a while.\nHonestly, I cannot imagine how hard it is to bring this feature to the world :)\n","href":"/tech/quick-thoughts-on-tail-recursion-in-swift/","title":"Quick thoughts on Tail recursion in Swift"},{"content":"","href":"/tags/optimization/","title":"optimization"},{"content":"","href":"/tags/programming/","title":"programming"},{"content":" What is Method swizzling? Method swizzling is a very powerful technique that takes advantage of dynamism. The core idea of this technique is to replace the real implementation of a method at runtime. With this power, we could be able to do a lot of cool stuffs.\nActually, this special feature is offered by the Objective-C runtime, via message dispatch. You could read my previous post to have a clear picture of method dispatch in Swift.\nWhy does it matter? A very common case study of this is integrating analytics in your app. Take Google Analytics (GA) for example, each time user enters a screen, the app should call the GA APIs for page views tracking.\nOne could implement it simply by making GA requests once the method viewWillAppear of each view controllers is invoked.\nHowever, there could be up to hundreds of view controllers in the app. Manually calling GA APIs in each controller is apparently ineffective although it only costs just a single line of code. Another drawback is that it is hard to control which one is missing. Also, you have limited ability to hook into the code of 3rd party libraries if necessary.\nThe problem appears to be quite simple with method swizzling. All you have to do is to write a custom function _tracked_viewWillAppear then swap it with the original function viewWillAppear. I will talk in detail later.\nHow to swizzle a method? The magic function you need to remember is method_exchangeImplementations:\nfunc method_exchangeImplementations(_ m1: Method, _ m2: Method) As the name reflects, the implementations of m1 and m2 get swapped after calling this function (if the exchange is successful). It means that an invocation to m1 actually executes the code inside m2 and vice versa.\nlet selector1 = #selector(UIViewController.viewWillAppear(_:)) let selector2 = #selector(UIViewController._swizzled_viewWillAppear(_:)) let method1 = class_getInstanceMethod(UIViewController.self, selector1)! let method2 = class_getInstanceMethod(UIViewController.self, selector2)! method_exchangeImplementations(method1, method2) This is what the function _swizzled_viewWillAppear looks like:\nextension UIViewController { @objc dynamic func _swizzled_viewWillAppear(_ animated: Bool) { NSLog(\u0026#34;Enter screen: \\(type(of: self))\u0026#34;) _swizzled_viewWillAppear(animated) } } When viewWillAppear is called, the system runs the code inside _swizzled_viewWillAppear instead. In this function, a recursive call is made which ends up executing the implementation of the original viewWillAppear. In short, when the view is about to be displayed, the program prints a log, for example, Enter screen: LoginViewController and does what it is supposed to do.\nNotice: - In order to swizzle successfully, the methods must be dynamically dispatched via message. So, we explicit declare it with dynamic keyword. Of course, at times you don\u0026rsquo;t necessarily need that keyword to make it dynamic :D. - The swizzling action for a pair of methods should only run once.\nA look at NSKeyValueObservation Look at the implementation of NSKeyValueObservation. Have you seen any swizzling üòé?\nclass Person: NSObject { @objc dynamic var name: String = \u0026#34;\u0026#34; var observation: NSKeyValueObservation? override init() { super.init() observation = observe(\\.name) { object, change in print(\u0026#34;Observe a change. Name: \\(object.name)\u0026#34;) } } } let person = Person() person.name = \u0026#34;Thuyen\u0026#34; // Console:  // Observe a change. Name: Thuyen Though the function _swizzle_me_observeValue is not exposed, we know that the swizzle method must be dynamically dispatched. So, if we create a method with the exactly same name, our function will be called when an observed change is triggered.\nextension NSKeyValueObservation { @objc func _swizzle_me_observeValue(forKeyPath keyPath: String?, of object: Any?, change: [NSString : Any]?, context: UnsafeMutableRawPointer?) { print(\u0026#34;_swizzle_me_observeValue gets called\u0026#34;) } } let person = Person() person.name = \u0026#34;Thuyen\u0026#34; // Console: // _swizzle_me_observeValue gets called Have fun!\n","href":"/tech/method-swizzling-what-why-and-how/","title":"Method Swizzling: What, Why and How"},{"content":"","href":"/tags/swizzle/","title":"swizzle"},{"content":" Method dispatch is a term referring to mechanisms by which the program determines which operation should be executed (by operation, I mean a set of instructions). There are times we expect a method behavior to be determined only at runtime. This motivation give rise to different mechanisms of dispatching a method, each of which has its own pros and cons.\nStatic dispatch  Sometimes called direct dispatch. If a method is statically dispatched, the compiler could be able to locate where the instructions are, at compile time. Therefore, when such function is called, the system jumps directly to the memory address of this function to perform the operation. This direct behavior results in very fast execution, and also allows the compiler to perform various kinds of optimizations such as inlining. In fact, due to the huge performance gains, there is a phase in the compilation pipeline in which the compiler attempts to make functions static if applicable. This optimization is known as devirtualization.  Dynamic dispatch  With this approach, the program does not know which implementation to choose until runtime. While static dispatch is super lightweight, it limits flexibility, especially when it comes to polymorphism. That is why dynamic dispatch is widely supported by OOP languages. Every language has its own mechanisms to support dynamic dispatch. Swift provides 2 ways to achieve dynamism: table dispatch and message dispatch.  Table dispatch  This is the most common choice provided in compiled languages. With this method, a class is associated with a so-called virtual table which comprises an array of function pointers to the real implementation correponding to that class. Note that the vtable is constructed at compile time. Thus, there are only two additional instructions (read and jump) as compared to static dispatch. So the dispatch should be theoretically pretty fast.  Message dispatch  In fact, it is Objective-C that provides this mechanism (sometimes, it is referred as message passing) and Swift code just uses the Objective-C runtime lib. Every time an Objective-C method is called, the invocation is passed to objc_msgSend which handles the look ups. Technically, the process starts from the given class and iterates the class hierarchy to pull out the implementation. Unlike table dispatch, the message passing dictionary could be modified at runtime, enabling us to adjust the program behaviors while running. Method swizzling is one of the most popular technique, by taking advantage of this special feature. Message dispatch is the most dynamic among the three. As a trade off, the cost of resolving implementation could be a little expensive though the lookup performance is guarded by caching mechanism. This mechanism is a keystone of Cocoa frameworks. Looking at the source of code Swift, you will see that KVO is implemented using swizzling.  Swift: What is what?  Given a function, what kind of dispatch is it using? Where is the proof?\n Methodology to determine dispatch mechanism As a skeptic, I am more interested in the second part of the question. It is easy to come up with a hypothesis but testing it is not straightforward all the time. After hours googling, I happened to know the SIL documentation which reasonably explains the presence of dispatch strategies. Here is a brief summary:\n(1) If a function uses table dispatch, it appears in the vtable (or witness_table for protocols).\nsil_vtable Animal { #Animal.makeSound!1: (Animal) -\u0026gt; () -\u0026gt; () : main.Animal.makeSound() -\u0026gt; ()\t// Animal.makeSound() ...... } (2) If a function is dispatched via message, the keyword volatile should be present in the invocation. Also, you will find the two marker foreign and objc_method, indicating that the function is invoked using Objective-C runtime. Refer: here.\n%14 = class_method [volatile] %13 : $Dog, #Dog.beWild!1.foreign : (Dog) -\u0026gt; () -\u0026gt; (), $@convention(objc_method) (Dog) -\u0026gt; () // user: %15 (3) If there is no evidence of the two cases above, the answer is static dispatch.\nTrivial cases  First of all, functions of structs or any value types must be statically dispatched. This makes sense because they could never be overriden. Explicitly enforced:  Functions with final keyword are also statically dispatched. Functions with dynamic are invoked via message passing. Piror to Swift 4, a function with dynamic modifier is implicitly visible to Objective-C. Meanwhile Swift 4 requires you to explicitly declare it with @objc attribute.  Ordinary extensions (without final, dynamic, @objc) are directly dispatched. Now, recall a compiled error you may once experienced: declarations in extensions cannot override yet. It\u0026rsquo;s because those functions, of course, follow static dispatch.\nYou may ask: \u0026ldquo;What if I make those extensions dynamic?\u0026rdquo;. You got the point! If an extension is dynamic, it can be overriden üòá.  extension Animal { func eat() { } @objc dynamic func getWild() { } } class Dog: Animal { override func eat() { }\t// Compiled error! @objc dynamic override func getWild() { }\t// Ok :) } Other cases protocol Noisy { func makeNoise() -\u0026gt; Int\t// TABLE } extension Noisy { func makeNoise() -\u0026gt; Int { return 0 }\t// TABLE func isAnnoying() -\u0026gt; Bool { return true }\t// STATIC } class Animal: Noisy { func makeNoise() -\u0026gt; Int { return 1 }\t// TABLE func isAnnoying() -\u0026gt; Bool { return false } // TABLE @objc func sleep() { }\t// Still TABLE } extension Animal { func eat() { }\t// STATIC @objc func getWild() { }\t// MESSAGE }  Noisy.isAnnoying(), and Animal.getWild() are statically dispatched since they are extensions. Noisy.makeNoise() uses table dispatch despite having the default implementation. We have to be careful with isAnnoying(). Consider the two usages below. animal2.isAnnoying() picks the implementation of the protocol extension (because it\u0026rsquo;s a direct method and no lookup is needed). Using in such way could be a source of bugs üò±.  let animal1 = Animal() print(animal1.isAnnoying())\t// Value: false let animal2: Noisy = Animal() print(animal2.isAnnoying())\t// Value: true  On the other hand, animal1.makeNoise() and animal2.makeNoise() produce the same result because protocol requirements are resolved by table lookups. The @objc annotation in @objc func sleep() means that the function is visible to Objective-C. It does not necessarily imply that the process will choose the Objective-C method to execute. From the SIL of the function call (see below), we could see the term $@convention(method) which implies that the Swift method is chosen over the objc method.\n%9 = class_method %8 : $Animal, #Animal.sleep!1 : (Animal) -\u0026gt; () -\u0026gt; (), $@convention(method) (@guaranteed Animal) -\u0026gt; () // user: %10  What are the principles?  Direct dispatch is prioritized. If overriding is needed, table dispatch is the next candidate. Need both overriding and visibility to Objective-C? Then message dispatch.  Another key take-away is that explicity is better. Implicit inference (like extensions with @objc) is subject to change.\nHere is the summary of some common cases. You are recommended to double check by reading the SIL generated.\n    Direct Table Message     Explicitly enforced final, static \u0026mdash; dynamic   Value type all methods \u0026mdash; \u0026mdash;   Protocols extensions initial declaration \u0026mdash;   Class extensions initial declaration extensions with @objc    Table 1. Summary of method dispatch in Swift (reading from top to bottom). Note that some cases such as class extensions with @objc dynamic is already mentioned aboved in explicitly enforced. Many blog posts divide classes into 2 groups: NSObject subclasses vs. (regular) classes. Though NSObject inherits a number of methods that were written on top of Objective-C runtime, I see no reason to separate them. Conclusion In this post, we got to know what method dispatch is and different types of dispatch in Swift. We dived into some examples to understand how Swift resolves a specific function. Also, by reading the SIL, we could be able to collect proofs for an assumption on which dispatch a function should follow.\n Static dispatch is greate because of its performance. That is why Swift is swift (as compared to Objective-C, a dynamic language). While message dispatch seems to be less performant, it offers great flexibility enabling a bunch of cool techniques. Understanding method dispatch is vitally important. Not only does it help you write more optimized code but also you could avoid a few strange bugs. Among these mentioned above, we have put aside the optimization of the compiler. The capacity of the code to be optimized depends greatly on how we write code :).  Finally, things might be different in later Swift versions. Don\u0026rsquo;t forget to check the validity of this post üòá.\nReference  Method Dispatch in Swift - by Brian King The Case for Message Passing in Swift - by Michael Buckley [swift] Dynamic keyword - by Srdan Swift Intermediate Language (SIL) Friday Q\u0026amp;A 2014-07-04: Secrets of Swift\u0026rsquo;s Speed The Swift Programming Language (Swift 4): Declaration Modifiers  ","href":"/tech/method-dispatch-in-swift/","title":"Method dispatch in Swift"},{"content":"","href":"/tags/method-dispatch/","title":"method-dispatch"},{"content":" First of all, this is not \u0026ldquo;how an iOS/MacOS app is built\u0026rdquo;. An app consists of a bunch of source code files, structured in modules/frameworks, each of which could be purely in swift/objective-c, or mixed and match. Besides, linking those modules is also another aspect. The two terms compiling and building should not be confused!\nThis post is about how the compiler translates a single Swift file into lower-level code. In other words, we are interested in what happens when we run this command:\nxcrun swiftc main.swift Compilation pipeline Source: http://llvm.org/devmtg/2015-10/slides/GroffLattner-SILHighLevelIR.pdf\n[1] Parse. First, the compiler parses the source code and build the Abstract syntax tree (AST). We could see the AST by the option -dump-ast:\nxcrun swiftc -dump-ast main.swift Semantic analysis could be performed when the AST is constructed.\n[2] SILGen. Generate the Swift intermediate language. To get the SIL after this phase:\nxcrun swiftc -emit-silgen main.swift [3] SIL Optimizations. Perform some performance optimizations on the SIL generated.\nxcrun swiftc -emit-sil main.swift [4] IR. Generate the LLVM Intermediate representation. You can examine the IR by:\nxcrun swiftc -emit-ir main.swift [5] Code Generation. LLVM generates the assembly code and finally produces lower-level code (.o, executable\u0026hellip;). To view the assembly:\nxcrun swiftc -S main.swift Swift Intermediate Language (SIL) Name mangling My first look at the SIL was like \u0026ldquo;omg. what the heck is _T04main6AnimalC9makeSoundyyF?\u0026ldquo;. But it\u0026rsquo;s not as scary as you thought.\n// Animal.makeSound() sil hidden @_T04main6AnimalC9makeSoundyyF : $@convention(method) (@guaranteed Animal) -\u0026gt; () { // %0 // user: %1 bb0(%0 : $Animal): debug_value %0 : $Animal, let, name \u0026#34;self\u0026#34;, argno 1 // id: %1 %2 = tuple () // user: %3 return %2 : $() // id: %3 } // end sil function \u0026#39;_T04main6AnimalC9makeSoundyyF\u0026#39; Name mangling is used to squash additional information of an entity into a single string. The encoded name could tell us its type (class/struct/enum), module, context\u0026hellip; For example, in _T04main6PersonVACycfC, the letter V following Person implies that Person is a struct. We won\u0026rsquo;t dive into the detail of this technique. For more info, you could read here.\nMake SIL more readable We could trace a mangled string back to the originally readable text using swift-demangle\nxcrun swift-demangle _T04main6AnimalC9makeSoundyyF // Output: _T04main6AnimalC9makeSoundyyF ---\u0026gt; main.Animal.makeSound() -\u0026gt; () In short, more friendly SIL could be obtained by:\nxcrun swiftc -emit-silgen main.swift | xcrun swift-demangle// Animal.makeSound() sil hidden @main.Animal.makeSound() -\u0026gt; () : $@convention(method) (@guaranteed Animal) -\u0026gt; () { // %0 // user: %1 bb0(%0 : $Animal): debug_value %0 : $Animal, let, name \u0026#34;self\u0026#34;, argno 1 // id: %1 %2 = tuple () // user: %3 return %2 : $() // id: %3 } // end sil function \u0026#39;main.Animal.makeSound() -\u0026gt; ()\u0026#39; A walk through SIL syntax Consider this simple code:\nstruct Person { } class Animal { func makeSound() { } } func isEndangered(animal: Animal) -\u0026gt; Bool { return false } class Dog: Animal { override func makeSound() { } func doSimpleMath(x: Int, y: Int) -\u0026gt; Int { return x + y } func makeFriends(animal: Animal, person: Person) { } } Let\u0026rsquo;s look at the SIL and demystify some basic syntax. I strongly recommend this official documentation for full details.\n// Animal.makeSound() sil hidden @main.Animal.makeSound() -\u0026gt; () : $@convention(method) (@guaranteed Animal) -\u0026gt; () { // %0 // user: %1 bb0(%0 : $Animal): debug_value %0 : $Animal, let, name \u0026#34;self\u0026#34;, argno 1 // id: %1 %2 = tuple () // user: %3 return %2 : $() // id: %3 } // end sil function \u0026#39;main.Animal.makeSound() -\u0026gt; ()\u0026#39;  A function starts with keyword sil. The keyword hidden corresponds to internal in Swift code, indicating that this function is only visible to objects in the same Swift module. @main.Animal.makeSound() -\u0026gt; () is the demangled text of _T04main6AnimalC9makeSoundyyF, representing the function name. $@convention(method) means: a call to this function requires a context. For example, in self.makeSound(), self is the context of the function call. $@convention(thin) says: this is a free function. No context is needed to make an invocation.\nsil hidden @main.Dog.makeFriends(animal: main.Animal, person: main.Person) -\u0026gt; () : $@convention(method) (@owned Animal, Person, @guaranteed Dog) -\u0026gt; () { ...... If the argument is reference type, an annotation @owned is attached.\n...... debug_value %0 : $Int, let, name \u0026#34;x\u0026#34;, argno 1 // id: %3 debug_value %1 : $Int, let, name \u0026#34;y\u0026#34;, argno 2 // id: %4 debug_value %2 : $Dog, let, name \u0026#34;self\u0026#34;, argno 3 // id: %5 // function_ref static Int.+ infix(_:_:) %6 = function_ref @static Swift.Int.+ infix(Swift.Int, Swift.Int) -\u0026gt; Swift.Int : $@convention(method) (Int, Int, @thin Int.Type) -\u0026gt; Int // user: %8 %7 = metatype $@thin Int.Type // user: %8 %8 = apply %6(%0, %1, %7) : $@convention(method) (Int, Int, @thin Int.Type) -\u0026gt; Int // user: %9 return %8 : $Int // id: %9 ...... A function call is made by taking the function pointer (function_ref) and applying it with arguments.\n Each instance method requires a metatype as an argument at the end of the invocation.\nsil_vtable Animal { #Animal.makeSound!1: (Animal) -\u0026gt; () -\u0026gt; () : main.Animal.makeSound() -\u0026gt; ()\t// Animal.makeSound() ...... } sil_vtable Dog { #Animal.makeSound!1: (Animal) -\u0026gt; () -\u0026gt; () : main.Dog.makeSound() -\u0026gt; ()\t// Dog.makeSound() #Dog.doSimpleMath!1: (Dog) -\u0026gt; (Int, Int) -\u0026gt; Int : main.Dog.doSimpleMath(x: Swift.Int, y: Swift.Int) -\u0026gt; Swift.Int\t// Dog.doSimpleMath(x:y:) #Dog.makeFriends!1: (Dog) -\u0026gt; (Animal, Person) -\u0026gt; () : main.Dog.makeFriends(animal: main.Animal, person: main.Person) -\u0026gt; ()\t// Dog.makeFriends(animal:person:) ...... } Each class has a virtual table vtable in order for the compiler to lookup the correct method to execute in runtime (if it\u0026rsquo;s dynamically dispatched). We will talk about method dispatch in the upcoming posts.\n  Conclusion In this post, we took a glance into the pipeline in which Swift code is compiled. We also looked into the SIL, a high-level intermediate language Apple came up with for analysis and optimization of Swift code.\nFrom the perspective of a practical developer, this topic does not help us write clean code or overwhelming design patterns. Despite that, it helps you understand (just a tiny bit) what the code is actually going on under the hood, and\u0026hellip; thereby less scared when reading lower-level interpretations of the code. By reading these stuffs, we could figure out some specific patterns that are at the core principles of the language.\nReference  Official documentation: Design of SIL Swift\u0026rsquo;s High-Level IR: A Case Study of Complementing LLVM IR with Language-Specific Optimization Introduction to Swift Intermediate Language ‚Äî Alex Blewitt  ","href":"/tech/how-a-swift-file-is-compiled/","title":"How a Swift file is compiled"},{"content":"","href":"/tags/compiler/","title":"compiler"},{"content":" If you\u0026rsquo;re from the world of statistics, you may have heard of it\u0026hellip;\nTwo doctors, Dr. Hibbert and Dr. Nick, both perform 2 types of surgeries: heart surgery and band-aid removal. The table below displays records for 100 surgeries, each of which can be either a success or a failure.\n    Heart Band-aid     Success 70 10   Failures 20 0   Total 90 10    Fig 1. Dr. Hibbert     Heart Band-aid     Success 2 81   Failures 9 9   Total 11 90    Fig 2. Dr. Nick From the table, we can see that Dr. Hibbert is better than Dr. Nick with respect to each type of surgery:\n Heart surgery: Hibbert: 70\u0026frasl;90 \u0026gt; Nick: 2\u0026frasl;11 Band-aid removal: Hibbert 10\u0026frasl;10 \u0026gt; Nick: 81\u0026frasl;90  However, comparing the total successes and failures shows the opposite relationship. Nick, on average, turns out to have more successful surgeries than Hibbert (80 out of 100 as compared to 83\u0026frasl;100).\nNow you got the paradox, right? :D\nIntuitively, the paradox could be described like this\n Simpson\u0026rsquo;s paradox occurs when some groups of data show a certain relationship in each group, but when the data is combined, that relationship is reversed\n Looking from mathematical view:\nLet $A_1, A_2$ respectively denote the numbers of Dr. Hibbert\u0026rsquo;s heart surgeries and band-aid removals. The numbers of successes with responds to these 2 types are $a_1, a_2$ $(0 \\le a_i \\le A_i)$.\nLet $B_1, B_2$ respectively denote the numbers of heart surgeries and band-aid removals held by Dr. Nick. The numbers of successes with responds to these 2 types are $b_1, b_2$ $(0 \\le b_i \\le B_i)$.\nThe paradox wee see in the tables above is given by:\n$$\\frac{a_i}{A_i} \\ge \\frac{b_i}{B_i}, \\txt{for} i = 1, 2. \\txt{but} \\frac{\\sum_i a_i}{\\sum_i A_i} \\le \\frac{\\sum_i b_i}{\\sum_i B_i}$$\nHere is another case that satisfies this expression:\n$$\\frac{2}{2} \u0026gt; \\frac{7}{8} \\txt{and} \\frac{5}{8} \u0026gt; \\frac{1}{2} \\txt{but} \\frac{2+5}{2+8} \u0026lt; \\frac{7+1}{8+2}$$\nThe paradox takes place due to the imbalance between the number of surgeries of each type. Dr. Hibbert obviously held more heart surgeries which are typically more risky than band-aid removals. The large fraction of such surgeries turns the overall stats on its head.\nSo, we have to be careful when aggregating data especially when data is not equally distributed among groups. And as I said earlier in the previous post, it\u0026rsquo;s convenient to use the ratio as a measure of comparison in statistics. However, it wipes out the information about the number of trials in which the ratio is calculated. This could present some misleading pictures, and fallacious conclusions could be made as a results.\nRead more [1] Blitzstein, Joseph K., and Jessica Hwang. ‚ÄúConditional Probability.‚Äù Introduction to Probability, CRC Press/Taylor \u0026amp; Francis Group, 2015.\n[2] https://brilliant.org/wiki/simpsons-paradox\n[3] https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2880329\n","href":"/tech/what-is-simpsons-paradox/","title":"What is Simpson's paradox?"},{"content":"","href":"/tags/paradox/","title":"paradox"},{"content":"I happened to see this problem on Twitter. It reminded me of my secondary school when I was passionate about solving math problems :)\u0026hellip; I am thinking of a little corner of this blog for this sort of exercising.\nClaim: If $p$ is prime, all the coefficients in $(a+b)^p$ except the first and the last are divisible by $p$.\nIf p is prime, all the coefficients in (a+b)^p except the first and last are divisible by p.\n\u0026mdash; Algebra Fact (@AlgebraFact) August 29, 2017 \nEquivalent claim: If $p$ is prime, $p \\mid C^k_p$ for all $k, 0\u0026lt;k\u0026lt;p$.\nProof.\n$$C^k_p = \\frac{p!}{k! (p-k)!} = \\frac{p(p-1)!}{k! (p-k)!}$$\nLet $x = (p-1)!, y = k!(p-k)!$. Then $C^k_p = \\frac{px}{y}$\n$C^k_p \\in \\mathbb{Z} \\implies y \\mid px \\hspace{5pt} (*)$\nWe know that $\\forall z\u0026lt;p: gcd(p, z) = 1$. So, $\\forall z\u0026lt;p: gcd(p, z!) = 1$.\nBecause $k, p-k \u0026lt; p$, we have $gcd(p, k!) = gcd(p, (p-k)!) = 1$\n$\\implies gcd(p, y) = 1 \\hspace{5pt} (**)$\nFrom $(*)$, $(**)$ $\\implies y \\mid x \\implies p \\mid p \\;\\frac{x}{y} = C^k_p$ ‚ñ†\n","href":"/reasoning/brain-exercising-1/","title":"Brain exercising #1"},{"content":"","href":"/tags/algebra/","title":"algebra"},{"content":"","href":"/tags/brain-exercises/","title":"brain-exercises"},{"content":" This post is to demonstrate a common use of expectation that is not correct. The example is excerpted from lecture 23 of MIT6_042J by Tom Leigton. For full understanding, I recommend you watch this informative and fascinating lecture.\nExample: RISC vs Z8002 Data in table 1 is from a paper by some famous professors. They wanted to demonstrate that programs on a RISC processor are generally shorted than on a Z8002 processor. They performed some benchmarks and measured the code size of a problem on the 2 processors.\nP/s: Actually, Tom Leighton did not mention the source of this data. The most matched I can trace is here (a pretty long time ago).\n   Benchmark RISC Z8002 Z8002/RISC     E-string search 150 120 0.8   F-bit test 120 180 1.5   Ackerman 150 300 2.8   Rec 2-sort 2800 1400 0.5   Average   1.2    Table 1. Sample program lengths for benchmark problems using RISC and Z8002 compilers, with the ratio of Z8002/RISC. A conclusion was drawn that programs on Z8002 processors were generally longer (by 20%) than on RISC processors. (*)\nHowever, some critics of the paper took the other ratio RISC/Z8002 (instead of Z8002/RISC) on the same data.\n   Benchmark RISC Z8002 RISC/Z8002     E-string search 150 120 1.25   F-bit test 120 180 0.67   Ackerman 150 300 0.5   Rec 2-sort 2800 1400 2.0   Average   1.1    Table 2. Sample program lengths for benchmark problems using RISC and Z8002 compilers, with the ratio of RISC/Z8002. Another conclusion was made in the same way that RISC processors were 10% longer on average. (**)\n(*) and (**) obviously contradict each other.\nWhat\u0026rsquo;s wrong? The mistake lies in the way we interpret the average value 1.2. The false claim like above was:\n$$ \\begin{align} E[Y/X] \u0026amp; = 1.2 \\implies E[Y] = 1.2*E[X] \\hspace{5pt} \u0026amp; ‚ùå \\\\ E[X/Y] \u0026amp; = 1.1 \\implies E[X] = 1.1*E[Y] \u0026amp; ‚ùå \\end{align} $$\nwhere $X, Y$ denote code size of a program on RISC and Z8002 respectively.\nIn fact: $E[X/Y] \\neq E[X] * E[Y]$\nA counterexample for this deduction:\n $X = 1$ with prob. 1 $\\implies E[X] = 1$ $Y = 1$ with prob. 0.5, and $Y = -1$ with prob. 0.5 $\\implies E[Y] = 0$  Then: - $X/Y = 1$ with prob. 0.5 and $X/Y = -1$ with prob. 0.5 $\\implies E[X/Y] = 0$\n$$\\implies E[X/Y] = 0 \\neq \\frac{E[X]}{E[Y]} = \\frac{1}{0}$$\nWe have the linearity rule and product rules (if mutually independent) for expectation, but not the quotation rule.\nDiscussion People reason this way all the time. The ratio helps us quickly assess whether one is superior. But it somehow gets us into a logical mistake without intention. This kind of false reasoning happens requently, not only to those with non-science background.\n","href":"/tech/a-misuse-of-expectation/","title":"A misuse of Expectation"},{"content":"","href":"/tags/expectation/","title":"expectation"},{"content":" In this post, I will carry out some experiments to demonstrate the impact of weight initialization on the distribution of activations on each layer in neural network, especially the very last layers. This was mentioned by Andrej in cs231n/lec6 as a motivation paving the way for batch normalization.\nI will try to keep things simple with intuition. Mathematics will not be richly convered.\n1. Covariate shift 1.1. What is Covariate shift? Covariate shift refers to changes in the distribution of input variables. This shift is usually addressed as a problem causing poor performance in training neural networks.\nNote: In the context of neural networks, a layer takes the activations of the previous layer as its input. Therefore, it is also equivalent if we investigate the distribution of activations of a layer.\n1.2 .What does it look like? Consider a neural networks with 20 fully connected layers. - Input shape: 49000x3072 (reshape from 49000 CIFAR images of size 32x32) and was whitened (zero-centered \u0026amp; normalized). - Hidden layers: 19 layers of shape (100, 100) - Activation function: ReLU. - Biases: all zeros. - Weights: normal distribution, scaled by factor 0.1.\nThe distributions of layer ouputs are illustrated in the figure below. We can apparently see that the variance constantly decreases in deeper layers.\nFig 1. Distribution of activations in layer 1, 3, 5, 7.\n1.3. Impact of Covariate shift? When training a network, if the activations fall in a narrow range like above, the gradient on those activations could be relatively small, leading to gradient saturation/vanish. Training gets stuck as a result. We sometimes face the same problem with dispersing distribution.\n2. Param initialization Param initialization is a primary cause of covariate shift. We will focus on weight initialization, and let biases be all zeros.\nAn initialization strategy is considered good if it maintains the same mean and variance (or standard deviation) throughout layers. Since the input data was whitened, we expect mean around zero (+/-1), std around 1 (+/-0.5).\n $\\mu = 0.3, \\sigma = 0.7$ ‚ü∂ accepted ‚úÖ $\\mu = 0.3, \\sigma = 0.003$ ‚ü∂ NOT accepted ‚ùå $\\mu = 15, \\sigma = 320$ ‚ü∂ NOT accepted ‚ùå  2.1. Setup Some setup code for experiments:\ndef relu(x): return np.maximum(x, 0) def forward(X_flat, hid_dims, weights, biases, activation=relu): \u0026#34;\u0026#34;\u0026#34; Feed forward. - X_flat: shape: N x D, where D = d1 x ... x dk. - hid_dims: 1D array. - weights: array of weights: W1, W2, ... - biases: array of biases: b1, b2, ... - activation: activation on each layer. None if no activation. \u0026#34;\u0026#34;\u0026#34; assert len(weights) == len(biases), \u0026#39;weights and biases must have the same length\u0026#39; assert len(hid_dims) + 1 == len(weights), \u0026#39;len(weights) must equal len(hid_dims) + 1\u0026#39; all_layers = [] out = X_flat for l in range(len(hid_dims) + 1): out = np.dot(out, weights[l]) + biases[l] if activation is not None: out = activation(out) all_layers.append(out) return out, all_layersdef visualize_distribution(all_activations): n_layers = len(all_activations) activations_mean = [np.asscalar(np.mean(activations)) for activations in all_activations] activations_std = [np.asscalar(np.std(activations)) for activations in all_activations] xs = range(1, n_layers+1) _, axes = plt.subplots(2, 2, figsize=(8, 8)) ax1, ax2, ax3, ax4 = axes[0, 0], axes[0, 1], axes[1, 0], axes[1, 1] ax1.plot(xs, activations_mean, \u0026#39;-o\u0026#39;, color=\u0026#39;#0067a7\u0026#39;) ax1.set_title(\u0026#39;means by layer\u0026#39;) ax1.set_xlabel(\u0026#39;layer\u0026#39;) ax2.plot(xs, activations_std, \u0026#39;-o\u0026#39;, color=\u0026#39;red\u0026#39;) ax2.set_title(\u0026#39;std by layer\u0026#39;) ax2.set_xlabel(\u0026#39;layer\u0026#39;) ax3.hist(all_activations[14].ravel(), bins=50, color=\u0026#39;green\u0026#39;) ax3.set_title(\u0026#39;Distribution of layer 15\u0026#39;) ax4.hist(all_activations[-1].ravel(), bins=50, color=\u0026#39;green\u0026#39;) ax4.set_title(\u0026#39;Distribution of the layer %d\u0026#39; % n_layers) plt.tight_layout() plt.show() # Print mean and std of last 5 layer for l in range(n_layers)[-5:]: print(\u0026#39;Layer %2d. mean: %f\\tstd: %f\u0026#39; % (l+1, activations_mean[l], activations_std[l])) def initialize_params(in_dim, hid_dims, out_dim, weight_initializer=np.random.randn, bias_initializer=np.zeros): dims = [in_dim] + hid_dims + [out_dim] weights, biases = [], [] for l in range(len(hid_dims) + 1): w = weight_initializer(dims[l], dims[l+1]) b = bias_initializer(dims[l+1]) weights.append(w) biases.append(b) return weights, biases def examine_distribution(weight_initializer, activation=relu, n_layers=20): in_dim, out_dim = 32*32*3, 10 hid_dims = [100 for i in range(n_layers - 1)] weights, biases = initialize_params(in_dim, hid_dims, out_dim, weight_initializer=weight_initializer) _, all_activations = forward(X_train_normalized, hid_dims=hid_dims, weights=weights, biases=biases, activation=activation) visualize_distribution(all_activations) Now, lets examine some initialization schemes\u0026hellip;\n2.2. Trival initialization The common way is using normal randomization with a scale. This scale should equal the standard deviation of the random numbers.\ndef trivial_initializer(d1, d2, weight_scale=0.1): return np.random.normal(0, weight_scale, (d1, d2)) examine_distribution(trivial_initializer) Fig 2. mean and std by layer. Initialized by Gaussian $\\mu=0, \\sigma^2=0.1$.\nLayer 16. mean: 0.009006 std: 0.016165 Layer 17. mean: 0.005849 std: 0.009699 Layer 18. mean: 0.004207 std: 0.007308 Layer 19. mean: 0.002917 std: 0.004961 Layer 20. mean: 0.005232 std: 0.006176 ‚ü∂ Not accepted ‚ùå\nexamine_distribution(lambda d1, d2: trivial_initializer(d1, d2, weight_scale=0.2)) Fig 3. mean and std by layer. Initialized by Gaussian $\\mu=0, \\sigma^2=0.2$.\nLayer 16. mean: 825.965548\tstd: 1394.566496 Layer 17. mean: 1491.038728\tstd: 2237.786857 Layer 18. mean: 2149.680649\tstd: 3300.200497 Layer 19. mean: 3008.496905\tstd: 4961.155125 Layer 20. mean: 2845.114905\tstd: 4381.190124 ‚ü∂ Not accepted ‚ùå\nNotice that after changing weight scale from 0.1 to 0.2, how output values are distributed changed radically. Quite sensitive to weight scale, huh?\n2.3. Xavier initialization (Glorot initialization) This scheme is based on the observation that:\n$$\\begin{equation} var(s) = var(\\sum_i^N{w_i.x_i}) = \u0026hellip; = N.var(w).var(x) \\end{equation}$$\nIn order to keep the same variance, we need: $var(w) = 1/N$. So, the weight scale should be $\\sqrt{1/N}$\ndef xavier_initializer_1(d1, d2): return np.random.randn(d1, d2) * np.sqrt(1.0 / d1) examine_distribution(xavier_initializer_1, activation=None) Fig 4. mean and std by layer. Initialized using xavier initialization, with no activation.\nLayer 16. mean: 0.000000\tstd: 0.742681 Layer 17. mean: -0.000000\tstd: 0.731260 Layer 18. mean: -0.000000\tstd: 0.718502 Layer 19. mean: 0.000000\tstd: 0.724088 Layer 20. mean: -0.000000\tstd: 0.740663 ‚ü∂ Accepted ‚úÖ\nWe can see that xavier initialization gives a really nice distribution: gaussian shape, reasonable mean and std. However, this initialization strategy seems not to work well with non-linear activation. If we use ReLU as the activation function, we got a poor distribution.\nexamine_distribution(xavier_initializer_1, activation=relu) Fig 5. mean and std by layer. With relu activation, normal distribution, $var(w) = 1/N$.\nLayer 16. mean: 0.002048\tstd: 0.003093 Layer 17. mean: 0.001338\tstd: 0.002246 Layer 18. mean: 0.000834\tstd: 0.001481 Layer 19. mean: 0.000434\tstd: 0.000776 Layer 20. mean: 0.000440\tstd: 0.000590 ‚ü∂ Not accepted ‚ùå\nA recent paper by He et al dove into the analysis with ReLU activation and finally reached the conclusion that the variance of weights should be $2/N$. This is often used in practice.\ndef xavier_initializer_2(d1, d2): return np.random.randn(d1, d2) * np.sqrt(2.0 / d1) examine_distribution(xavier_initializer_2) Fig 6. mean and std by layer. With relu activation, normal distribution, $var(w) = 2/N$.\nLayer 16. mean: 0.605864\tstd: 0.924794 Layer 17. mean: 0.569898\tstd: 0.860651 Layer 18. mean: 0.530719\tstd: 0.835036 Layer 19. mean: 0.433965\tstd: 0.776518 Layer 20. mean: 0.335705\tstd: 0.556218 ‚ü∂ Accepted ‚úÖ\n3. Another approaches Another technique was recently developed called batch normalization. We will take a look at it later. P/s: A huge advantage of batch normalization is that it is more robust to bad initialization. In fact, using different values of weight scale does not produce much significant performance (and it\u0026rsquo;s already good). Therefore, tuning hyperparams would be less painful.\n4. Conclusion We have discussed covariate shift and its impact on training performance. With a proper scheme of initialization, the training could be less likely to get into this problem. We also have a look at some examples to see the distribution of activations corresponds to different schemes of initialization.\nHope this post provides helpful visualization to help understand some problems of neural networks.\nReference:\n[1] CS231n course notes\n[2] Understanding the difficulty of training deep feedforward neural networks\n[3] Delving Deep into Rectifiers: Surpassing Human-Level Performance on ImageNet Classification\nSource code: here\n","href":"/tech/weight-initialization/","title":"Weight initialization - impact on layer distribution"},{"content":"","href":"/tags/neural-networks/","title":"neural-networks"},{"content":" In this post, we will dive into Histogram of Oriented Gradients (HOG), a common technique used to extract features of images\u0026hellip; And then implement it in python (in order to comprehend it).\nFeature Descriptor A feature descriptor is a representation of an image (or image patch) simplifying the image by extracting useful information and throwing away irrelevant information.\nA feature descriptor converts an image of size $W \\times H \\times 3$ to a feature vector of length $N$\nWhat is considered useful? It depends on purpose. For example, it might not be good for image viewing, but for classification since using it produces good results.\nIn the HOG feature descriptor, the distribution (histograms) of directions of gradients (oriented gradients) are used as features. Gradients of an image are useful because the mangitude of gradients is large around edges and corners which contain a lot more information about object shape than flat regions.\nHow to calculate HOG? P/s: To make sure the calculation is correctly, we will compare the result of our manual implementation with that of skimage.\nStep1: Preprocessing images  Crop image (if needed). Here, I use an image of size $512 \\times 512$ (from skimage) Convert to grayscale  import numpy as np import matplotlib.pyplot as plt from skimage import data, color original_image = data.astronaut() image = color.rgb2gray(data.astronaut()) print(\u0026#34;original: %s--\u0026gt; grayscale: %s\u0026#34; % (original_image.shape, image.shape))0.44195368474 original: (512, 512, 3) --\u0026gt; grayscale: (512, 512) Step 2: Compute gradient images  The gradients involve gradients by x axis (indicating horizontal change) and gradients by y axis (vertical change) $g_x, g_y \\in \\mathbf{R}^{H \\times W}$  Note that we calculate the gradient using the approximation for discrete value: $f\u0026rsquo;(x) \\approx \\frac{f(x+h) - f(x)}{h}$.\nThe smallest value of $h$ is 1, corresponding to 1 pixel. In fact, this approximation is called forward difference. We also have other candidates to approximate the gradient as follows: - Backward difference: $f\u0026rsquo;(x) = f(x) - f(x-1)$ - Forward difference: $f\u0026rsquo;(x) = f(x+1) - f(x)$ (like above) - Central difference: $f\u0026rsquo;(x) = \\frac{f(x+1) - f(x-1)}{2}$\nIn this post, I will use three of them: backward/forward difference for the edge pixels, central difference for rest. Some approaches do not care about the 4 edges and set them to zero.\nHowever, I use the three approximations above because it is consistent with the implementation of np.gradient() which is a standardly correct function I can use to check my own code. Another reason is that skimage.feature.hog is implemented in the same way. I will be able to compare my result with that computed by skimage.\ndef compute_gradient(image: np.ndarray): \u0026#34;\u0026#34;\u0026#34; Compute gradient of an image by rows and columns \u0026#34;\u0026#34;\u0026#34; gx = np.zeros_like(image) gy = np.zeros_like(image) # Central difference gx[:, 1:-1] = (image[:, 2:] - image[:, :-2]) / 2 gy[1:-1, :] = (image[2:, :] - image[:-2, :]) / 2 # Forward difference gx[:, 0] = image[:, 1] - image[:, 0] gy[0, :] = image[1, :] - image[0, :] # Backward difference gx[:, -1] = image[:, -1] - image[:, -2] gy[-1, :] = image[-1, :] - image[-2, :] return gx, gy gx, gy = compute_gradient(image) # Check with np.gradient() gy_check, gx_check = np.gradient(image) # Note that the result of np.gradient is in the reversed order print(\u0026#39;diff_gx:\u0026#39;, np.linalg.norm(gx - gx_check)) print(\u0026#39;diff_gy\u0026#39;, np.linalg.norm(gy - gy_check))diff_gx: 0.0 diff_gy 0.0 Now let\u0026rsquo;s see what information $g_x$ and $g_y$ carry.\nfig, (ax1, ax2, ax3, ax4) = plt.subplots(1, 4, figsize=(16, 4)) ax1.axis(\u0026#39;off\u0026#39;); ax2.axis(\u0026#39;off\u0026#39;); ax3.axis(\u0026#39;off\u0026#39;); ax4.axis(\u0026#39;off\u0026#39;) ax1.imshow(gx, cmap=plt.get_cmap(\u0026#39;gray\u0026#39;)) ax1.set_title(\u0026#39;Gradient gx\u0026#39;) ax2.imshow(gy, cmap=plt.get_cmap(\u0026#39;gray\u0026#39;)) ax2.set_title(\u0026#39;Gradient gy\u0026#39;) ax3.imshow(np.abs(gx), cmap=plt.get_cmap(\u0026#39;gray\u0026#39;)) ax3.set_title(\u0026#39;Gradient abs(gx)\u0026#39;) ax4.imshow(np.hypot(gx, gy), cmap=plt.get_cmap(\u0026#39;gray\u0026#39;)) # np.hypo(gx, gy) = np.sqrt(gx**2 + gy**2) ax4.set_title(\u0026#39;Gradient sqrt(gx^2 + gy^2)\u0026#39;) plt.show() Basically, $gx$ and $gy$ represent the edges of objects pretty well. We could intuitively think that changes in pixel values occur almost and significantly at object edges.\nWe could understand the gradients as a set of vectors $\\vec{d} = \\vec{dx} + \\vec{dy}$, each of which is associated with a pixel $(x, y)$.\nüìù Note:\n The visualizations of $gx$ and $gy$ are almost gray because they have negative values which turn the regions with zero gradient to neutral gray. The unsigned gradient (ie. $\\lvert g_x \\lvert, \\lvert g_y \\lvert$) of them should produce the very similar results as the rightmost image.  Step 3: Compute HOG in each cell The edges above somehow resemble the sketch of the object, but quite smoother. In practice, rough sketch is good enough to classify objects. Therefore, we will only care just a few orientations of $\\vec{d}$ and in local regions (rather than every pixel).\nWe divide the image into many cells of size ($8 \\times 8$). These cells are also usually called patches. In this example, the size of the image is ($512 \\times 512$), so we have ($64 \\times 64$) patches in total. Oh, don\u0026rsquo;t forget to divide the total magnitudes in each bin by the number of pixels per patch.\nThe yellow square is a cell ($8 \\times 8$). The red one is a block of 4 cells.\nFor each patch, we extract a vector of 9 bins (corresponding to angles $20^\\circ, 40^\\circ, \u0026hellip;, 160^\\circ$). A pixel that has orientation $95^\\circ$, magnitude $1.5$ should add up an amount of $1.5$ to the bin $80^\\circ$.\nMagnitudes (upper values) and orientations in degree (in blue and white). In the right figure, the orientations are rounded to the pivot values of 9 bins (0, 20, 40, \u0026hellip;, 160).\nThis vector gives information about the statistic of the how popular each considered orientation is (ie. the distribution of orientations). For example, a vector $v = (12, 0, 0.1, 0.7, 0.2, 0, 0, 0, 0.1)$ indicates the frequent appearance of horizontal strokes.\nFrom the histogram of the patch, we notice that distribution of orientation of 40 degree is high, indicating that most strokes are drawn diagonally.\ndef compute_hog_cell(n_orientations: int, magnitudes: np.ndarray, orientations: np.ndarray) -\u0026gt; np.ndarray: \u0026#34;\u0026#34;\u0026#34; Compute 1 HOG feature of a cell. Return a row vector of size `n_orientations` \u0026#34;\u0026#34;\u0026#34; bin_width = int(180 / n_orientations) hog = np.zeros(n_orientations) for i in range(orientations.shape[0]): for j in range(orientations.shape[1]): orientation = orientations[i, j] lower_bin_idx = int(orientation / bin_width) hog[lower_bin_idx] += magnitudes[i, j] return hog / (magnitudes.shape[0] * magnitudes.shape[1]) Step 4: Block normalization Up to this step, we have created a histogram based on the gradients of the image. However, the gradients are sensitive to illumination. For example, if we darken the image by a half of light, the gradient magnitudes will decrease twice which means the histogram values change by half. A practical way to alleviate this dependence is normalizing the histogram.\nWe could perform normalization in larger regions. This stage is called block normalization. For example, we could take a block of 4 (square aligned) cells to normalize and take the result as a final histogram feature. We slide to the right and then down to get histogram features for other blocks.\nüìù Note:\n These blocks could overlap each other. Each histogram of a block is a row vector of size 36 (4 cells/block)  In this examples, with 4 cells/block, there are $63 \\times 63$ blocks. So, we $63 \\times 63$ histogram vectors of size 36.\n$\\implies 63 \\times 63 \\times 36 = 142884$ numbers\ndef normalize_vector(v, eps=1e-5): \u0026#34;\u0026#34;\u0026#34; Return a normalized vector (which has norm2 as 1) \u0026#34;\u0026#34;\u0026#34; # eps is used to prevent zero divide exceptions (in case v is zero) return v / np.sqrt(np.sum(v ** 2) + eps ** 2) def compute_hog_features(image: np.ndarray, n_orientations: int = 9, pixels_per_cell: (int, int) = (8, 8), cells_per_block: (int, int) = (1, 1)) -\u0026gt; np.ndarray: \u0026#34;\u0026#34;\u0026#34; Compute HOG features of an image. Return a row vector \u0026#34;\u0026#34;\u0026#34; gx, gy = compute_gradient(image) sy, sx = gx.shape cx, cy = pixels_per_cell bx, by = cells_per_block magnitudes = np.hypot(gx, gy) # = np.sqrt(gx**2 + gy**2) orientations = np.rad2deg(np.arctan2(gy, gx)) % 180 n_cellsx = int(sx / cx) # Number of cells in x axis n_cellsy = int(sy / cy) # Number of cells in y axis n_blocksx = int(n_cellsx - bx) + 1 n_blocksy = int(n_cellsy - by) + 1 hog_cells = np.zeros((n_cellsx, n_cellsy, n_orientations)) prev_x = 0 # Compute HOG of each cell for it_x in range(n_cellsx): prev_y = 0 for it_y in range(n_cellsy): magnitudes_patch = magnitudes[prev_y:prev_y + cy, prev_x:prev_x + cx] orientations_patch = orientations[prev_y:prev_y + cy, prev_x:prev_x + cx] hog_cells[it_y, it_x] = compute_hog_cell(n_orientations, magnitudes_patch, orientations_patch) prev_y += cy prev_x += cx hog_blocks_normalized = np.zeros((n_blocksx, n_blocksy, n_orientations)) # Normalize HOG by block for it_blocksx in range(n_blocksx): for it_blocky in range(n_blocksy): hog_block = hog_cells[it_blocky:it_blocky + by, it_blocksx:it_blocksx + bx].ravel() hog_blocks_normalized[it_blocky, it_blocksx] = normalize_vector(hog_block) return hog_blocks_normalized.ravel()# Compare the results with skimage.feature.hog hog_features = compute_hog_features( image, n_orientations=9, pixels_per_cell=(8, 8), cells_per_block=(1, 1)) from skimage.feature import hog hog_features_check = hog( image, orientations=9, pixels_per_cell=(8, 8), cells_per_block=(1, 1), block_norm=\u0026#39;L2\u0026#39;) assert hog_features.shape == hog_features_check.shape print(np.allclose(hog_features, hog_features_check)) print(hog_features.shape)True (36864,) Now, visualize the HOG features. Actually, I do not implement it since it is a bit cumbersome to reconstruct the image from these histogram info. Instead, I use the available function skimage.feature.hog to plot the HOG image so that we could have a sense of its benefits.\nimport numpy as np import matplotlib.pyplot as plt from skimage.feature import hog _, hog_image = hog( image, orientations=9, pixels_per_cell=(8, 8), cells_per_block=(1, 1), block_norm=\u0026#39;L2\u0026#39;, visualise=True) fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 4)) ax1.axis(\u0026#39;off\u0026#39;); ax2.axis(\u0026#39;off\u0026#39;) ax1.imshow(image, cmap=plt.get_cmap(\u0026#39;gray\u0026#39;)) ax1.set_title(\u0026#39;Input image\u0026#39;) ax2.imshow(hog_image, cmap=plt.get_cmap(\u0026#39;gray\u0026#39;)) ax2.set_title(\u0026#39;HOG\u0026#39;) plt.show() Reference  http://lear.inrialpes.fr/people/triggs/pubs/Dalal-cvpr05.pdf http://www.learnopencv.com/histogram-of-oriented-gradients http://mccormickml.com/2013/05/09/hog-person-detector-tutorial  Jupyter notebook: here\n","href":"/tech/a-dive-into-hog/","title":"A dive into Histogram of Oriented Gradients (HOG)"},{"content":"","href":"/tags/image-processing/","title":"image-processing"},{"content":"C√°ch ƒë√¢y kh√¥ng l√¢u, t√¥i t√¨nh c·ªù xem 1 video tr√™n TED talk v·ªÅ ch·ªß ƒë·ªÅ V≈© tr·ª• h·ªçc \u0026ldquo;Shedding light on dark matter\u0026rdquo;, r·ªìi sau ƒë√≥ coi 1 lo·∫°t c√°c phim t√†i li·ªáu v·ªÅ ch·ªß ƒë·ªÅ n√†y\u0026hellip; Post n√†y t√≥m t·∫Øt l·∫°i nh·ªØng g√¨ m√¨nh hi·ªÉu ·ªü m·ª©c √Ω ni·ªám (n√™n c√≥ th·ªÉ c√≥ nh·ªØng ch·ªó hi·ªÉu ch∆∞a ch√≠nh x√°c).\n\u0026hellip;\nTr√°i ƒê·∫•t l√† m·ªôt h√†nh tinh trong H·ªá M·∫∑t Tr·ªùi (Solar System), m·ªôt ph·∫ßn t·ª≠ nh·ªè trong 1 thi√™n h√† xo·∫Øn ·ªëc (spiral galaxies) g·ªçi l√† \u0026ldquo;Milky Way\u0026rdquo; (d·ªãch l√† D·∫£i Ng√¢n H√†). V√† Milky Way ch·ªâ l√† m·ªôt trong h·∫±ng h√† sa s·ªë c√°c thi√™n h√† ngo√†i kia\u0026hellip; Nhi·ªÅu ƒë·ªëm s√°ng l√≠ nh√≠ tr√™n b·∫ßu tr·ªùi ƒë√™m b·∫°n nh√¨n th·∫•y ƒë∆∞·ª£c l√† nguy√™n c·∫£ m·ªôt thi√™n h√† ch·ª© h·ªèk ph·∫£i l√† 1 ng√¥i sao nh·ªè nhoi n√†o ƒë√≥ ƒë√¢u :).\nMilky Way. Source:¬†https://www.thinglink.com [1] ·ªû ph·∫ßn l·ªõn c√°c thi√™n h√†, ƒë·∫∑t bi·ªát l√† c√°c thi√™n h√† xo·∫Øn ·ªëc (spiral galaxies), h·∫ßu h·∫øt kh·ªëi l∆∞·ª£ng t·∫≠p trung ·ªü ph·∫ßn trung t√¢m. ·ªû gi·ªØa trung t√¢m c·ªßa Milky Way l√† 1 c√°i h·ªë ƒëen - h·ªë ƒëen si√™u n·∫∑ng (supermassive black hole). Kh·ªëi l∆∞·ª£ng si√™u l·ªõn ƒë√≥ gi·ªØ cho c√°c ng√¥i sao chuy·ªÉn ƒë·ªông xung quanh ph·∫ßn t√¢m.¬†M·ªôt c√°ch c·∫£m t√≠nh, ta ƒëo√°n r·∫±ng, gi·ªëng nh∆∞ h·ªá M·∫∑t Tr·ªùi, c√†ng xa t√¢m th√¨ v·∫≠n t·ªëc di chuy·ªÉn c√†ng ch·∫≠m. Tuy nhi√™n k·∫øt qu·∫£ ƒëo ƒë·∫°t cho th·∫•y ƒëi·ªÅu ng∆∞·ª£c l·∫°i, v·∫≠n t·ªëc di chuy·ªÉn l√† gi·ªëng nhau gi·ªØa v√πng g·∫ßn t√¢m thi√™n h√† v√† v√πng g·∫ßn r√¨a.\nƒêi·ªÅu n√†y khi·∫øn c√°c nh√† v·∫≠t l√Ω ƒë·∫∑t ra 1 gi·∫£ thuy·∫øt l√† c√≥ m·ªôt \u0026ldquo;th·∫ø-l·ª±c-v√¥-h√¨nh-n√†o-ƒë√≥\u0026rdquo; bao tr√πm to√†n b·ªô thi√™n h√†, g·∫Øn t·ª•i n√≥ l·∫°i v·ªõi nhau nh∆∞ 1 tr√°i banh ƒë·∫∑c. Ng∆∞·ªùi ta g·ªçi n√≥ l√† \u0026ldquo;dark matter\u0026rdquo; (m√¨nh s·∫Ω ghi t·∫Øt l√† DM). Ng∆∞·ªùi ta tin r·∫±ng DM chi·∫øm ƒë·∫øn h∆°n 20% trong khi nh·ªØng lo·∫°i v·∫≠t ch·∫•t th√¥ng th∆∞·ªùng (ordinary matter - ghi t·∫Øt l√† OD)¬†(t·∫°m hi·ªÉu l√† nguy√™n t·ª≠, c√¢y c·ªëi, con ng∆∞·ªùi, nh√† c·ª≠a,¬†h√†nh tinh, sao, blah blah) ch·ªâ chi·∫øm kho·∫£ng 5%.\n[2] ƒê·ªìng th·ªùi, ng∆∞·ªùi ta t√≠nh to√°n t·ªïng kh·ªëi l∆∞·ª£ng c·ªßa 1 thi√™n h√† (suy t·ª´ t·ªëc ƒë·ªô di chuy·ªÉn v√† v·∫≠n t·ªëc quay) v√† nh·∫≠n th·∫•y r·∫±ng c√≥ 1 s·ª± ch√™nh l·ªách l·ªõn v·ªõi t·ªïng kh·ªëi l∆∞·ª£ng c·ªßa c√°c v·∫≠t th·ªÉ nh√¨n th·∫•y. Ng∆∞·ªùi ta ƒë∆∞a ra gi·∫£ thuy·∫øt l√† \u0026ldquo;th·∫ø-l·ª±c-v√¥-h√¨nh\u0026rdquo; n√†y c√≥ kh·ªëi l∆∞·ª£ng.\n[3] DM kh√¥ng ph√°t ra v√† c≈©ng kh√¥ng h·∫•p th·ª• b·ª©c x·∫° ƒëi·ªán t·ª´ (n√™n c≈©ng ch·∫≥ng ph√°t ra ƒë∆∞·ª£c √°nh s√°ng ƒë·ªÉ ta nh√¨n th·∫•y). Do ƒë√≥ vi·ªác hi·ªÉu v√† nghi√™n c·ª©u v·ªÅ n√≥ tr·ªü n√™n r·∫•t kh√≥ khƒÉn. V·ªõi gi·∫£ ƒë·ªãnh DM mang kh·ªëi l∆∞·ª£ng, theo thuy·∫øt t∆∞∆°ng ƒë·ªëi t·ªïng qu√°t (general relativity) c·ªßa Einstein, h·∫Øn s·∫Ω b·∫ª cong √°nh s√°ng ƒëi qua n√≥. Nh∆∞ v·∫≠y ta c√≥ th·ªÉ nghi√™n c·ª©u 1 c√°ch gi√°n ti·∫øp th√¥ng qua t√°c ƒë·ªông h·∫•p d·∫´n c·ªßa n√≥ l√™n c√°c v·∫≠t th·ªÉ nh√¨n th·∫•y ƒë∆∞·ª£c (visible objects) (n√≥i chung l√† c√≥ th·ªÉ ph√°t ra √°nh s√°ng, VD: 1 thi√™n h√† kh√°c ·ªü xa). Ch·∫≥ng h·∫°n, ng∆∞·ªùi ta c√≥ th·ªÉ ph·∫ßn n√†o suy ra kh·ªëi l∆∞·ª£ng c·ªßa 1 thi√™n h√† n√†o ƒë√≥ d·ª±a tr√™n h√¨nh ·∫£nh bi·∫øn d·∫°ng c·ªßa c√°c thi√™n h√† kh√°c (k√®m theo 1 n√πi quan s√°t v√† gi·∫£ ƒë·ªãnh :v).\n[4] Kho·∫£ng 70% c√≤n l·∫°i (ngo√†i OD v√† DM) l√† c√°i chi? Ban ƒë·∫ßu, gi·ªõi khoa h·ªçc gia tin r·∫±ng sau v·ª• n·ªï Big Bang, v≈© tr·ª• d√£n n·ªü v√† t·ªëc d·ªô d√£n n·ªü ch·∫≠m d·∫ßn. Tuy nhi√™n, khi nh·∫≠n th·∫•y t·ªëc d·ªô di chuy·ªÉn c·ªßa c√°c thi√™n h√† kh√¥ng nh·ªØng gi·∫£m m√† ng∆∞·ª£c l·∫°i, c√≤n tƒÉng nhanh h∆°n, ng∆∞·ªùi ta b·∫Øt ƒë·∫ßu ƒë·∫∑t c√¢u h·ªèi v·ªÅ s·ª± t·ªìn t·∫°i c·ªßa 1 lo·∫°i v·∫≠t ch·∫•t ƒë·∫©y c√°c thi√™n h√† ra xa, g·ªçi l√† \u0026ldquo;dark energy\u0026rdquo; (DE).\n[*]¬†Th·∫≠t ra t√¥i kh√¥ng h·ª©ng th√∫ nhi·ªÅu v·ªÅ k·∫øt qu·∫£ c·ªßa m·ªôt ph√°t hi·ªán khoa h·ªçc n√†o ƒë√≥, m√† quan t√¢m ch·ªß y·∫øu ·ªü c√°ch ng∆∞·ªùi ta ƒëi ƒë·∫øn c√°i ph√°t minh ƒë√≥, ng·ªØ c·∫£nh, ƒë·ªông l·ª±c n√†o ng∆∞·ªùi ta t√¨m ra n√≥, r·ªìi ki·ªÉm ch·ª©ng nh·ªØng gi·∫£ thuy·∫øt c·ªßa h·ªç. T√¥i cho r·∫±ng ƒë√≥ l√† nh·ªØng ki·∫øn th·ª©c m√† c√°ch th·∫ßy c√¥ n√™n d·∫°y ·ªü tr∆∞·ªùng\u0026hellip; \nTham kh·∫£o\n https://www.ted.com/talks/patricia_burchat_leads_a_search_for_dark_energy\n https://www.youtube.com/watch?v=xJheDbOdT3Y\n https://starchild.gsfc.nasa.gov/docs/StarChild/questions/question59.html\n https://www.youtube.com/watch?v=Rl8H4XEs0hw\n  ","href":"/misc/dark-matter-dark-energy/","title":"Dark matter, Dark energy l√† g√¨?"},{"content":"","href":"/tags/astrology/","title":"astrology"},{"content":"Th√°ng 5 m√πa chia tay, th√°ng 6 m√πa thi\u0026hellip; Nh·ªØng k√Ω ·ª©c ch·ª£t √πa v·ªÅ.\nC√°c b·∫°n h·ªçc sinh l·ªõp 9 ƒë√£ b∆∞·ªõc v√†o nh·ªØng ng√†y thi v√†o l·ªõp 10.¬†ƒê√∫ng ch·ª•c nƒÉm tr∆∞·ªõc, t√¥i c≈©ng ƒë√£ tr·∫£i qua c·∫£m gi√°c t∆∞∆°ng t·ª±.\nT√¥i ƒëƒÉng k√Ω thi 2 tr∆∞·ªùng v·ªõi m√¥n chuy√™n l√† To√°n: tr∆∞·ªùng L√™ Khi·∫øt ·ªü qu√™ (Qu·∫£ng Ng√£i) v√† tr∆∞·ªùng Ph·ªï Th√¥ng NƒÉng Khi·∫øu (TPHCM). V√† may m·∫Øn ƒë·∫≠u ƒë∆∞·ª£c c·∫£ 2 tr∆∞·ªùng. Dƒ© nhi√™n t√¥i ch·ªçn NƒÉng Khi·∫øu, v√¨ n√≥ n·ªïi ti·∫øng h∆°n, c√≥ ƒëi·ªÅu ki·ªán ph√°t tri·ªÉn t·ªët h∆°n.\nH·ªìi h·ªçc c·∫•p 2 ·ªü tr∆∞·ªùng huy·ªán, m·∫•y ƒë·ª©a h·ªçc sinh t·ª•i t√¥i, t·ª´ ƒë·ª©a h·ªçc gi·ªèi ƒë·∫øn h·ªçc k√©m, ƒë·ªÅu c·∫Øp s√°ch ƒëi h·ªçc th√™m. Thi v√†o tr∆∞·ªùng chuy√™n bao g·ªìm 3 m√¥n: To√°n, VƒÉn v√† m√¥n chuy√™n. ƒêi·ªÅu n√†y c√≥ nghƒ©a l√† m·∫•y ƒë·ª©a chuy√™n To√°n t·ª•i t√¥i ch·ªâ c·∫ßn √¥n To√°n v√† VƒÉn. T√¥i xem ƒë√≥ nh∆∞ l√† m·ªôt ƒë·∫∑c √¢n m√† m·∫•y ƒë·ª©a chuy√™n Ho√°, chuy√™n Anh kh√¥ng c√≥ ƒë∆∞·ª£c.\nM√¥n VƒÉn th·∫•y v·∫≠y m√† c≈©ng c√≥ nhi·ªÅu ng∆∞·ªùi h·ªçc ph·∫øt. Ch·∫Øc v√¨ ai c≈©ng s·ª£ c√°i m√¥n ch√°n √≤m n√†y. T·ª•i h·ªçc sinh kh√¥ng ng·∫°i xa x√¥i, k√©o nhau ƒëi h·ªçc √¥ng th·∫ßy n√†o ƒë√≥ ch·ªâ v√¨ ·ªïng c√≥ ti·∫øng trong vi·ªác \u0026ldquo;t·ªß ƒë·ªÅ\u0026rdquo;, ho·∫∑c ·ªïng d·∫°y m√¥n vƒÉn ·ªü tr∆∞·ªùng L√™ Khi·∫øt ch·∫≥ng h·∫°n. Tui c≈©ng ch·∫≥ng ph·∫£i ngo·∫°i l·ªá üòÉ.\nNh·ªØng ng√†y thi ·ªü L√™ Khi·∫øt kh√¥ng ƒë·ªÉ l·∫°i nhi·ªÅu ·∫•n t∆∞·ª£ng trong t√¥i. Ch·ªâ nh·ªõ l√† khi thi xong m√¥n chuy√™n (t·ª©c To√°n), t·ª•i t√¥i ai c≈©ng than l√† ƒë·ªÅ h∆°i d·ªÖ, s·ª£ nh·ªØng b·∫°n t·∫ßm v·ª´a c≈©ng l√†m ƒë∆∞·ª£c, n√™n c∆° h·ªôi ƒë∆∞·ª£c ch·ªçn s·∫Ω th·∫•p h∆°n. N√≥i chung ƒë·ªÅ ph·∫£i kh√≥ m·ªõi th·∫•y x·ª©ng ƒë√°ng, m·ªõi ph·ª•c k·∫øt qu·∫£.\nTh·ªùi gian thi PTNK th√¨ kh√°c, c√≥ nhi·ªÅu ƒëi·ªÅu th√∫ v·ªã h∆°n. Ng√†y thi ƒë·∫ßu ti√™n di·ªÖn ra ·ªü khu√¥n vi√™n tr∆∞·ªùng PTNK. M·ªõi b∆∞·ªõc v√†o c·ªïng, h√¨nh ·∫£nh ƒë·∫ßu ti√™n ƒë·∫≠p v√†o m·∫Øt t√¥i l√† c√°i to√† nh√† A cao ng·∫•t. ƒê√≥ l√† l·∫ßn ƒë·∫ßu ti√™n t√¥i th·∫•y 1 c√°i tr∆∞·ªùng cao ƒë·∫øn v·∫≠y, c√≥ c·∫£ thang m√°y n·ªØa\u0026hellip;\nC√≥ nhi·ªÅu¬†ƒë·ª©a h·ªçc sinh b·∫±ng tu·ªïi t√¥i m√† cao gh√™ lu√¥n. Trong khi ƒë√≥, ƒë·∫°i ƒëa s·ªë m·∫•y ƒë·ª©a h·ªçc sinh tr∆∞·ªùng t√¥i ·ªü ngo√†i qu√™ to√†m 1m65 tr·ªü xu·ªëng\u0026hellip; T√¥i ƒë·ªÉ √Ω th·∫•y m·∫•y ƒë·ª©a kh√°c c·∫ßm ƒëi·ªán tho·∫°i di ƒë·ªông b·∫•m b·∫•m m√† nghƒ© th·∫ßm: \u0026ldquo;tr·ªùi, n√≥ c√≥ ƒëi·ªán tho·∫°i ri√™ng lu√¥n k√¨a\u0026rdquo;. L√∫c ·∫•y m√¨nh gi·ªëng hai l√∫a l√™n th√†nh th·ªã gh√™ lu√¥n!\nQu·∫£ th·∫≠t t√¥i thi NƒÉng Khi·∫øu cho vui, cho c√≥ d·ªãp v√†o S√†i G√≤n thƒÉm th√∫ th√¥i. N√™n tinh th·∫ßn r·∫•t tho·∫£i m√°i, kh√¥ng √°p l·ª±c g√¨ c·∫£, c≈©ng ch·∫≥ng bu·ªìn √¥n g√¨ :v. C≈©ng ng·ªô l√† tui l√†m ƒë·ªÅ thi to√°n kh√¥ng chuy√™n l·∫°i v·∫≠t v√£ h∆°n ƒë·ªÅ thi to√°n chuy√™n. C·∫£ 2 ƒë·ªÅu kh√¥ng tr·ªçn v·∫πn, t·∫•t nhi√™n r·ªìi. N√™n t√¥i ch·∫Øc b·ª•ng l√† s·∫Ω r·ªõt.¬†C≈©ng may l√† tr·ªùi th∆∞∆°ng, cho t·ª•i ƒë·∫≠u n√™n ƒë∆∞·ª£c h·ªçc ng√¥i tr∆∞·ªùng PTNK th√¢n y√™u üòÉ.\nNh·ªõ NƒÉng Khi·∫øu gh√™!\n","href":"/misc/thang-6-mua-thi/","title":"Th√°ng 6 m√πa thi..."},{"content":"H√¥m nay ti·∫øp t·ª•c l√† 1 ng√†y trong qu√£ng th·ªùi gian lang thang qu√°n cafe, m·∫ßn b·∫≠y m·∫ßn b·∫° ƒë·∫øn cu·ªëi ng√†y. Nghe c·ª© nh∆∞ 1 th·∫±ng t√†o lao ƒëi gi·∫øt th·ªùi gian nh·ªâ.\n[1] H√¥m nay b·∫°n ƒë√£ ƒëƒÉng k√Ω thi IELTS. Th·∫≠t s·ª± th√¨ b·∫°n kh√¥ng c·∫£m th·∫•y c√°i quy·∫øt ƒë·ªãnh n√†y n√≥ match l·∫Øm v·ªõi 1 s·ªë th·ª© m√† m√¨nh ƒëang focus. Th·ª±c ra th√¨ n√≥ c≈©ng xu·∫•t ph√°t t·ª´ 1 s·ªë d·ª± ƒë·ªãnh g·∫ßn ƒë√¢y, v√† c·∫ßn c√°i ƒë·ªëng IELTS n√†y. Tuy nhi√™n, c√°i g·ªçi l√† \u0026ldquo;the whole picture\u0026rdquo; gi·ªù c≈©ng c√≤n ƒëang l∆° l·ª≠ng, ch∆∞a c√≥ h√¨nh d·∫°ng nh·∫•t ƒë·ªãnh. Anyway, cu·ªëi c√πng c≈©ng ƒëƒÉng k√Ω thi :)).\n[2] T√¨nh c·ªù ƒë·ªçc ƒë∆∞·ª£c 1 c√°i post n√†y Gradient Descent. Theo c·∫£m nh·∫≠n c·ªßa m√¨nh, b√†i vi·∫øt n√†y r·∫•t chi l√† hay. Tuy kh√¥ng ph·∫£i l√† ng∆∞·ªùi trong ngh·ªÅ, ch·ªâ m·ªõi bi·∫øt ML qua 1 c√°i course tr√™n tr∆∞·ªùng (v√† ƒëang h·ªçc l·∫°i course ƒë√≥ tr√™n Coursera), nh∆∞ng m√¨nh cho r·∫±ng b√†i vi·∫øt n√†y kh√° d·ªÖ ƒë·ªçc, minh ho·∫° c≈©ng s·ªëng ƒë·ªông.\n√îi, c√°i page machinelearningcoban.com n√†y hay gh√™. Gi·ªØa b·∫°t ng√†n n√∫i r·ª´ng t√†i li·ªáu, th·∫≠t hi·∫øm c√≥ 1 resource v·ªÅ ML b·∫±ng ti·∫øng Vi·ªát nh∆∞ th·∫ø n√†y. √Äh, page n√†y d·ªãch r·∫•t s√°t hen, nghe r·∫•t geeky.\nNgo√†i ra, m√¨nh t√¨m th·∫•y 1 c√°i repo n√†y c≈©ng kh√° hay ho, ƒë·∫∑c bi·ªát l√† b·∫°n ƒë√≥ ng∆∞·ªùi VN¬†https://github.com/ZuzooVn/machine-learning-for-software-engineers\n[3] ƒê·ªçc b√†i d·ªãch ph·ªèng v·∫•n Andrew Ng, c·∫£m h·ª©ng v√¥ c√πng¬†http://labs.septeni-technology.jp/machine-learning/kham-pha-bo-oc-dang-sau-google-brain-andrew-ng-cuoc-doi-su-sang-tao-va-ca-nhung-that-bai/\nM·ªôt ch√∫t c·∫£m nghƒ©:\n\u0026gt; \u0026ldquo;theo ƒëu·ªïi ƒëam m√™\u0026rdquo; l√† m·ªôt l·ªùi khuy√™n t·ªá.\nTh·∫≠t ra ƒë√¢y l√† l·∫ßn th·ª© 2 trong ng√†y t√¥i nghe chung 1 quan ƒëi·ªÉm nh∆∞ v·∫ßy t·ª´ 2 ng∆∞·ªùi kh√°c nhau m√† t√¥i cho r·∫±ng h·ªç kh√¥ng li√™n quan g√¨ ƒë·∫øn nhau. H·∫≥n l√† v·∫≠y, \u0026ldquo;theo ƒëu·ªïi ƒëam m√™\u0026rdquo; nghe n√≥ l√£ng m·∫°n qu√° :D.\n --- S√†i G√≤n, h√¥m nay kh√¥ng c√≥... m∆∞a giƒÉng ng·∫≠p l·ªëi... ","href":"/misc/tan-man-04-04-2017/","title":"T·∫£n m·∫°n 04/04/2017"},{"content":" Everytime we create a new file, Xcode suggests some built-in templates that may be useful. Luckily, we could also create our own templates.\nTechnically, Xcode looks for templates in ~/Library/Developer/Xcode/Templates and /Applications/Xcode.app/Contents/Developer/Library/Xcode/Templates. Let\u0026rsquo;s call the first path P1 and the second path P2. A template could be iferred by a folder MY_TEMPLATE.xctemplate.\nAssume we gonna create a template for MVVM. It should create 3 files: [Feature]Model.swift, [Feature]ViewModel.swift and [Feature]ViewController.swift. Ex: LoginModel.swift, LoginViewModel.swift and LoginViewController.swift\n First of all, create a xctemplate folder in P1: ~/Library/Developer/Xcode/Templates/Custom/MVVM.xctemplate. Note: we should place the xctemplate folder in P1 instead of P2 b/c P2 is only particular for a specific version of Xcode. The folder should include these files (you could copy it from P2 and modify it a little bit):  ___FILEBASENAME___Model.swift ___FILEBASENAME___ViewModel.swift ___FILEBASENAME___ViewController.swift  Create placeholder for the 3 files above. Here is the sample for ___FILEBASENAME__ViewController.swift:  // // ___FILENAME___ // ___PROJECTNAME___ // // Created by ___FULLUSERNAME___ on ___DATE___. //___COPYRIGHT___ // import Foundation import UIKie public class ___FILEBASENAMEASIDENTIFIER___ViewController: UIViewController { private let viewModel: ___FILEBASENAMEASIDENTIFIER___ViewModel public init(viewModel: ___FILEBASENAMEASIDENTIFIER___ViewModel) { self.viewModel = viewModel super.init(nibName: nil, bundle: nil) // Initialization goes here } public required init?(coder aDecoder: NSCoder) { fatalError(\u0026#34;init(coder:) has not been implemented\u0026#34;) } } And then, magic happens :D\n// // LoginViewController.swift // TestTemplates // // Created by Thuyen Trinh on 2/28/17. // Copyright ¬© 2017 Thuyen Trinh. All rights reserved. // import Foundation import UIKit final public class LoginViewController: UIViewController { fileprivate let viewModel: LoginViewModel public init(viewModel: LoginViewModel) { self.viewModel = viewModel super.init(nibName: nil, bundle: nil) // Initialization goes here } public required init?(coder aDecoder: NSCoder) { fatalError(\u0026#34;init(coder:) has not been implemented\u0026#34;) } } Reference  http://swiftandpainless.com/creating-a-smart-file-template  ","href":"/tech/create-custom-xcode-templates/","title":"Create custom Xcode templates"},{"content":"","href":"/tags/xcode/","title":"xcode"},{"content":" Fundamental Concepts Q: What is ReactiveCocoa? ReactiveCocoa is an FRP (Functional Reactive Programming) framework particularly used for iOS. FRP = reactive programming built on the components of functional concepts.\n Reactive programming is programming with asynchronous data streams. Functional concepts: high-order functions, monads, functors, function compositions, natural transformation (map, filter, reduce\u0026hellip;)\u0026hellip; (You do not need to digest \u0026amp; comprehend it now).  References:\n Github: ReactiveCocoa: https://github.com/ReactiveCocoa/ReactiveCocoa Github: ReactiveSwift: https://github.com/ReactiveCocoa/ReactiveSwift Framework overview: https://github.com/ReactiveCocoa/ReactiveSwift/blob/master/Documentation/FrameworkOverview.md Design guidelines: https://github.com/ReactiveCocoa/ReactiveSwift/blob/master/Documentation/DesignGuidelines.md  P/s: For convenience, we sometimes use the abbreviation RAC to refer to ReactiveCocoa.\nQ: What is ReactiveSwift? Prior to RAC 5.0, there had been only 1 module ReactiveCocoa to contain the whole source code. In RAC 5.0, they separated the core components to a new module called ReactiveSwift. And ReactiveCocoa now acts as a wrapper of reactive concepts with Cocoa frameworks (in order to work with NSObject, UI classes, binding stuff\u0026hellip;).\nP/s: In this page, when I mention RAC, I implicitly mean the 2 modules (ReactiveCocoa \u0026amp; ReactiveSwift) as a whole. Just forget the separation in this FAQ.\nQ: What can we do with ReactiveCocoa? Using RAC, we could eliminate some old-fashioned technology stacks/programming patterns:\n Observer pattern Delegate pattern Closures/callbacks  Additionally, RAC could help us save a lot effort to implement:\n Binding Task management  Q: What is a stream?  A stream is a sequence of ongoing events ordered in time.\n Q: What can be considered a stream? Anything! From now on, you have to keep in mind that everything can be a stream.\n The data downloaded from server The state of DB The event user taps on the screen \u0026hellip;  Again, remember, everything can be a stream. Let your mind free (big grin)\nQ: What aspects of streams should we care about? We should care about the life cycle of a stream:\n Stream is created \u0026amp; started Stream received a success with a value Stream received a failure Stream completed Stream is disposed  Besides, we should acknowledge some operations on streams:\n Transform a stream Compose streams: combine/zip/merge 2 streams, forward events of a stream to another stream, start a new stream on an event  Note that streams are immutable (a basic principle in Functional Programming). Therefore, operations on streams always return a new stream. For ex: the code bellow will return another SignalProducer: stringProducer.filter { !$0.isEmpty }\nQ: What alternatives could we have for RAC? RxSwift is a really qualified candidate. It commenced later than RAC but it has been drawing much attention. From my observation, brand new projects tend to adopt RxSwift due to the active community. Besides, this community also ports the FRP to other platforms (Go, Android, .NET\u0026hellip;), therefore, the contribution is more actively.\nBtw, there is an article explaining why they upgrade their project from RAC 2.x ‚Üí RxSwift. It\u0026rsquo;s worth a look: http://artsy.github.io/blog/2015/12/08/reactive-cocoa-to-rxswift/\nQ: When should we use it? We could use it aggressively in different use cases. Here are some that I always prefer RAC:\n Async tasks with callbacks Handle complicated workflows that need retry, timeout, cancellation\u0026hellip; Get tired using delegates Binding things  Signal and SignalProducer Q: What is Signal? What is SignalProducer? Singal and SignalProducer are 2 implementations of streams. The bare difference between them is that Signal represents hot observable while SignalProducer refers to cold observable. I personally prefer SignalProducer over Signal.\nQ: I created a SignalProducer, I added some observers, but none of them are executed. What happened? Perhaps you forgot to start the producer. We need to start it manually, it\u0026rsquo;s cold observable, remember?\nQ: It\u0026rsquo;s hard to debug with RAC. How to troubleshoot issues effectively? The easiest way which I often use is printing log to verify if a value arrived, (or) the stream completed, (or) any error occurred\u0026hellip; Well, RAC provides a built-in function logEvents for debugging. You could also write your own functions :D\nlet loginProducer = login(email: email, password: password) .logEvents(identifier: \u0026#34;--- Login\u0026#34;, events: [.started, .value, .completed, .failed]) let signupProducer = signup(email: email, password: password) .logWhenStarted(\u0026#34;--- Signup. Started\u0026#34;) .logWhenNext({\u0026#34;--- Signup. Next: \\($0)\u0026#34;}) .logWhenFailed({\u0026#34;--- Signup. Failed with error: \\($0)\u0026#34;}) Operators Q: What\u0026rsquo;s the difference between the 2 operators \u0026ldquo;then\u0026rdquo; and \u0026ldquo;flatMap\u0026rdquo;? Now we compare the 2 implementations. Assume that we do not care about the returned values of the producer. Given that: downloadUrl1() and downloadUrl2() is of type SignalProducer\u0026lt;Void, NSError\u0026gt;\nImpl 1:\t// Using `then` downloadUrl1().then(downloadUrl2())\tImpl 2:\t// Using `flatMap` downloadUrl1.flatMap(.latest) { _ in downloadUrl2() }  The operator then triggers on event completed: downloadUrl2() starts when downloadUrl1() completes The operator flatMap triggers on event value: downloadUrl2() starts when downloadUrl1() receives a value  Discussion: As a best practice, for this kind of download, we often call sendCompleted() immediately after sendNext(). So basically, the 2 implementations above are considered the same.\nQ: How to cancel a SignalProducer (from the outside)? Manually dispose of the producer\nlet disposable = producer.start()\t// Starting a producer returns a disposable ... // You manually dispose it by calling .dispose() disposable.dispose()\t... // You could also add it to a parent composite disposable. // When the parent is disposed, it triggers disposing of the attached disposables parentCompositeDisposable.add(disposable)\t Or trigger by another signal/producer, like this\nproducer.take(until: cancelProducer)\t// cancelProducer = cancelButton.rac_tap","href":"/tech/faq-on-reactivecocoa/","title":"FAQ on ReactiveCocoa"},{"content":" As an iOS developer, I am quite familiar with Reference Counting. It is considered a fundamental knowledge regarding memory manangement that every iOS developers must acknowledge. Today, I figured out a few more algorithms of garbage collection.\nFig 1. From left to right: Reference Counting, Mark-Sweep, Mark-Compact, Copying. Reference Counting (RC)  This is simple \u0026amp; easy to implement. However, it has some major drawbacks one of which is not being able to deal with retain cycles. Developers have to manually use weak reference if appropriate.  Mark-Sweep  It traverses the heap memory twice. The first time is to mark live objects. A live object is detected by checking if it is reachable from root objects. The second time is to sweep (deallocate) dead objects. This algorithm could automatically detect retain cycles This algorithm, like RC, does not solve the problem that heap memory is fragmented. Looking at the gif above, you could see that a mark-sweep phase, the dead objects are cleaned, leaving the blank/free memory pieces which are distributed discretely. This is called memory fragmentation.  Mark-Compact  Like Mark-Sweep, this algorithm also marks live objects. But the way it dispose of memory is a bit different. The GC just moves live objects up and aligns them together; and then clean the rest (not-in-use objects). This results in an advantage: new objects are allocated on the heap at the end of the used memory (which resembles stack allocation). And this change makes heap allocation as cheap as stack allocation.  Copying  The idea is that we just need to copy the live objects to another place. Work on that memory region and don\u0026rsquo;t care about the rest. We can also perform the copy while traversing the heap.  ","href":"/tech/gc-algorithms/","title":"Garbage Collection (GC) algorithms"},{"content":"","href":"/tags/garbage-collection/","title":"garbage-collection"},{"content":"Thong dong r√£i b∆∞·ªõc ƒëi t·ª´ trong h·∫ªm ra, b√™n kia ƒë∆∞·ªùng, bi·ªÉn d·∫≠y s√≥ng\n- \u0026ldquo;ƒÇn ƒë·∫≠u h≈© n√≥ng ƒëi em\u0026rdquo;\n- \u0026ldquo;Hmm\u0026hellip; l√†m em 1 ch√©n, n√≥ng nghen ch·ªã\u0026rdquo;\n\u0026hellip;\nM√∫c xong cho tui, ch·ªã ·∫•y d√≥i qua b√™n kia ƒë∆∞·ªùng n√≥i v·ªõi m·ªôt ch·ªã kh√°c h∆°n tu·ªïi (m√¨nh g·ªçi l√† c√¥ th√¨ ƒë√∫ng h∆°n), c≈©ng b√°n ƒë·∫≠u h≈©, g√°nh h√†ng n·∫±m b√™n trong h·∫ªm\n- \u0026ldquo;V√°c ra ngo√†i n√†y lu√¥n n√®\u0026rdquo;\n\u0026hellip;\n2 ng∆∞·ªùi t√°n d√≥c qua l·∫°i, ch·ªß y·∫øu l√† than m·∫•y ng√†y c·∫≠n t·∫øt b√°n ·∫ø, ch·ªëc ch·ªëc th·∫•y ai ƒëi t·ªõi l√† ch·ªã l·∫°i m·ªùi ƒÉn\n- \u0026ldquo;ƒê·∫≠u h≈© n√≥ng ƒëi em, gh·∫ø n√† ng·ªìi lu√¥n\u0026rdquo; - th·∫•y c·∫∑p nam n·ªØ ƒëi ra, v·ª´a m·ªùi, ch·ªã r√∫t ra 2 c√°i gh·∫ø con b·∫±ng nh·ª±a ƒë·∫∑t b√™n tr√°i, k√™u c√°i k·ªãch.\n- \u0026ldquo;ƒÇn h·∫ª?\u0026rdquo; - ch√†ng trai h·ªèi, c√¥ g√°i g·ª•c ƒë·∫ßu\n- \u0026ldquo;2 ch√©n nha ch·ªã\u0026rdquo;\nXong k·∫ø ch·ªã b√™n n√†y m√∫c 1 ch√©n. C√¥ b√™n kia, ch·∫≥ng n√≥i ch·∫≥ng r·∫±ng, nh∆∞ th·ªÉ c√≥ quy ∆∞·ªõc s·∫µn, c≈©ng m√∫c 1 ch√©n b∆∞ng qua ƒë∆∞a. C·∫≠u ch√†ng th·∫•y l·∫°, th·∫Øc m·∫Øc n√≥i v·ªõi c√¥ g√°i \u0026ldquo;·ª¶a ch√©n b√™n n√†y b√™n kia!?\u0026rdquo;.\nCh·ªã kia nghe, c∆∞·ªùi tr·ª´\u0026hellip;\nTui c≈©ng c∆∞·ªùi, nh·ªõ l·∫°i m·∫•y b·ªØa ƒëi l√†m, ch·∫°y xe l√™n c·∫ßu Calmette, th·∫•y 2 c√¥ ng·ªìi canh g√°nh h√†ng rong y chang nhau, tui hay t·ª± h·ªèi: \u0026ldquo;ng∆∞·ªùi ta s·∫Ω ch·ªçn mua g√°nh n√†o, mua ho√†i c√¥ b√™n n√†y th√¨ coi kia c√≥ ganh ko?\u0026rdquo;\n","href":"/misc/tan-man-ganh-tau-hu/","title":"T·∫£n m·∫°n: G√°nh t√†u h≈©"},{"content":"T√¥i r·∫•t √≠t khi ƒëi ra ngo√†i ƒÉn v·∫∑t b·ªüi ƒÉn u·ªëng kh√¥ng n·∫±m trong top nh·ªØng th·ª© t√¥i quan t√¢m. (N√™n khi ƒëi ƒë√¢u ch∆°i, t√¥i kh√¥ng ƒë·∫∑t n·∫∑ng v·∫•n ƒë·ªÅ ·∫©m th·ª±c, m√† l√† tr·∫£i nghi·ªám)\u0026hellip;\nH√¥m qua t√¥i cao h·ª©ng ƒëi ƒÉn KFC. L√† ng√†y ƒë·∫ßu nƒÉm, l·∫°i r∆°i v√†o ch·ªß nh·∫≠t, n√™n l∆∞·ª£ng kh√°ch ·ªü KFC √Çu C∆° c≈©ng ƒë√¥ng h∆°n ng√†y th∆∞·ªùng.\nC√≥ m·ªôt b√† ch·ªã, tr·∫°c bu·ªïi ba m·∫•y, b·ªën m∆∞∆°i c√πng ƒë·ª©a con ƒë·ª£i order b√™n c·∫°nh t√¥i. Trong l√∫c ƒë√≥, c≈©ng c√≥ m·ªôt nh√≥m thanh ni√™n kho·∫£ng 3 ng∆∞·ªùi c≈©ng ƒë·∫øn v√† ch·ªù b√™n ph·∫£i t√¥i. Sau khi order xong, t√¥i c·∫ßm th·∫ª l√™n l·∫ßu ƒë·ª£i.\n\u0026emsp;‚Äì ‚ÄúAnh ch·ªã d√πng g√¨ ·∫°?‚Äù Anh ch√†ng KFC h·ªèi 3 ng∆∞·ªùi thanh ni√™n kia.\n\u0026emsp;‚Äì ‚ÄúEm ∆°i, ch·ªã ƒë·∫øn tr∆∞·ªõc m√†?‚Äù B√† m·∫π tr·∫ª ph√¢n bua, c√≥ ch√∫t b·ª±c d·ªçc v√¨ ƒë√°ng nh·∫Ω ra ph·∫£i ƒë∆∞·ª£c ph·ª•c v·ª• tr∆∞·ªõc.\nAnh ch√†ng KFC l√∫ng t√∫ng, nh·∫≠n ra l·ªói c·ªßa m√¨nh, xin l·ªói ƒë√°o ƒë·ªÉ: ‚Äì ‚ÄúD·∫° em xin l·ªói ·∫°h, em xin l·ªói.‚Äù\nH·∫≥n l√† m·ªôt ng∆∞·ªùi kh√≥ t√°nh, ch·ªã ti·∫øp t·ª•c c√†u nh√†u, nh∆∞ng l·∫ßn n√†y quay sang nh√≥m thanh ni√™n kia: ‚Äì ‚ÄúSao l·∫°i d√†nh order v·ªõi tr·∫ª nh·ªè ch·ª©?‚Äù\nAnh nh√¢n vi√™n nghe v·∫≠y li·ªÅn xin l·ªói l·∫ßn n·ªØa. Nh√≥m thanh ni√™n v·∫´n ch∆∞a n√≥i g√¨, ho·∫∑c c√≥ l·∫Ω t√¥i ƒë√£ l√™n tr√™n t·∫ßng tr√™n n√™n kh√¥ng k·ªãp nghe th·∫•y.\nThi·∫øt nghƒ©, trong c√¢u chuy·ªán tr√™n, s·∫Ω h∆°i sai sai n·∫øu tr√°ch b√† m·∫π kh√≥ t√°nh (v√¨ ng∆∞·ªùi ta c√≥ quy·ªÅn ph√†n n√†n v·ªÅ d·ªãch v·ª•). C≈©ng h∆°i phi·∫øn di·ªán n·∫øu ƒë·∫∑t h·∫øt l·ªói l·∫ßm l√™n vai anh ch√†ng KFC (m·∫∑c d√π vi·ªác quan s√°t kh√°ch v√†o-ra l√† tr√°ch nhi·ªám c·ªßa anh ·∫•y). C√°i ƒë√°ng tr√°ch, theo quan ƒëi·ªÉm c√° nh√¢n t√¥i, l√† vi·ªác kh√≥ khƒÉn ƒë·ªÉ x√°c ƒë·ªãnh ∆∞u ti√™n cho kh√°ch h√†ng n√†o tr∆∞·ªõc. Trong tr∆∞·ªùng h·ª£p n√†y: ƒë·∫øn tr∆∞·ªõc th√¨ ∆∞u ti√™n tr∆∞·ªõc, v·∫≠y sao bi·∫øt ƒë∆∞·ª£c ai ƒë·∫øn tr∆∞·ªõc?\nVi·ªác kh√°ch ƒë·∫øn, ƒë·ª©ng d·∫°t ra xung quanh khi·∫øn cho ng∆∞·ªùi ta kh√≥ nh·∫≠n bi·∫øt ƒë∆∞·ª£c ai ƒë·∫øn tr∆∞·ªõc, ai ƒë·∫øn sau. X·∫øp h√†ng (ho·∫∑c b·ªëc thƒÉm th·ª© t·ª± ph·ª•c v·ª•) l√† h√¨nh th·ª©c ph·ªï bi·∫øn v√† d·ªÖ d√†ng nh·∫•t ƒë·ªÉ gi·∫£i quy·∫øt ƒëi·ªÅu ƒë√≥.\nDƒ© nhi√™n b·∫°n c√≥ th·ªÉ cho r·∫±ng: *‚Äú√Ω th·ª©c ng∆∞·ªùi VN k√©m, ng∆∞·ªùi ta h·ªèk t·ª± x·∫øp h√†ng*‚Äù. Nh∆∞ng than √¥i, ƒë·ª£i ƒë·∫øn l√∫c m·ªçi ng∆∞·ªùi t·ª± √Ω th·ª©c th√¨ anh ch√†ng KFC kia s·∫Ω c√≤n ph·∫£i n√≥i xin l·ªói d√†i d√†i. C√≥ nh·ªØng c√°ch khi·∫øn cho ng∆∞·ªùi ta th·ª±c hi·ªán 1 h√†nh ƒë·ªông, ho·∫∑c nh·∫≠n ra l√† n√™n th·ª±c hi·ªán 1 h√†nh ƒë·ªông n√†o ƒë√≥. Ch·∫≥ng h·∫°n trong tr∆∞·ªùng h·ª£p n√†y, ta c√≥ th·ªÉ ƒë·∫∑t nh·ªØng l√†n d√¢y ruy bƒÉng d·ªçc qu·∫ßy order (nh∆∞ ·ªü c√°c r·∫°p phim), s∆°n/d√°n nh·ªØng v·∫°ch k·∫ª ngang d∆∞·ªõi s√†n (t∆∞∆°ng ·ª©ng v·ªõi ch·ªó ƒë·ª©ng) ‚Äì kh√¥ng gian qu√°n c≈©ng ƒë·ªß ƒë·ªÉ cho kh√°ch x·∫øp h√†ng. C√≤n hok th√¨ d√°n c√°i b·∫£ng ‚Äúvui l√≤ng x·∫øp h√†ng‚Äù cho ng∆∞·ªùi ta th·∫•y c≈©ng ƒë∆∞·ª£c.\n ‚ÄúSometimes, we make mistakes and be sharply criticized just because it‚Äôs f*cking easy to make mistakes‚Äù\n ","href":"/misc/chuyen-kfc/","title":"Chuy·ªán KFC - order"},{"content":"It is a protocol in Swift 3 (which was StringLiteralConvertible{.swift} in Swift 2). The name clearly reflects the meaning that an object of a class can be expressed by a literal string.\nlet person: Person = \u0026#34;Thuyen\u0026#34;\t// Instead of: let person = Person(name: \u0026#34;Thuyen\u0026#34;) To use it, the class must conform to ExpressibleByStringLiteral:\nfinal class Person: ExpressibleByStringLiteral { var name: String = \u0026#34;\u0026#34; init(stringLiteral value: String) { self.name = value } init(extendedGraphemeClusterLiteral value: String) { self.name = value } init(unicodeScalarLiteral value: String) { self.name = value } } let person: Person = \u0026#34;Thuyen\u0026#34; A few examples in which we could use ExpressibleByStringLiteral:\nlet timezone: TimeZone = \u0026#34;GMT+03:00\u0026#34; let date: Date = \u0026#34;2016-12-03T00:40:11+00:00\u0026#34; let url: URL = \u0026#34;https://google.com\u0026#34; let coordinate: Coordinate = \u0026#34;123.5, 127.8\u0026#34; And, we have some more similar protocols: ExpressibleByArrayLiteral, ExpressibleByNilLiteral, ExpressibleByIntegerLiteral, ExpressibleByFloatLiteral, ExpressibleByBooleanLiteral, ExpressibleByDictionaryLiteral.\nP/s: Not until now do I know this protocol. Kind of late :)\n","href":"/tech/swift-expressiblebystringliteral/","title":"Swift: ExpressibleByStringLiteral"},{"content":" I used to spend a lot of time reading documentations of ReactiveCocoa (Framework overview, design guidlines, basic operators\u0026hellip;) but, unfortunately, missed this one.\nI strongly agree that debugging is not quite easy in the async world. Printing log is my common way to deal with it :D. And yes, I didn\u0026rsquo;t know that RAC provides such a built-in logger.\nActually, I also have my own extensions (logWhenStarted, logWhenNext, logWhenFailed, logWhenCompleted\u0026hellip;) to log events. But I have to call N functions instead. Ex:\nproducer .logWhenStarted(\u0026#34;Started\u0026#34;) .logWhenCompleted(\u0026#34;Completed\u0026#34;) .logWhenFailed(\u0026#34;Failed\u0026#34;) Let\u0026rsquo;s look at that of RAC\nHow to use it? func racLog(identifier: String, event: String, fileName: String, functionName: String, lineNumber: Int) { NSLog(\u0026#34;\\(identifier)--\u0026gt; event: \\(event)\u0026#34;) } loginProducer(username, password) .logEvents(identifier: \u0026#34;DemoLogEvent\u0026#34;, events: [.Started, .Next, .Completed, .Failed], logger: racLog) .start() For more convenience, we could make a default logEvents function (nt_logEvents) that uses other parameters as of RACLog\nloginProducer(username, password) .nt_logEvents(identifier: \u0026#34;LoginViewModel\u0026#34;) .start() Well, perfect except\u0026hellip; Sometimes we desire to print the next value in a custom way. I think the event Next should be treated as a special case and need a closure to turn a next value into a string. It seems my function (logWhenNext) is more handy in this case\nfunc logWhenNext(logText: String) -\u0026gt; SignalProducer\u0026lt;Value, Error\u0026gt; func logWhenNext(log: Value -\u0026gt; String) -\u0026gt; SignalProducer\u0026lt;Value, Error\u0026gt;","href":"/tech/log-events-in-reactivecocoa/","title":"Log events in ReactiveCocoa"},{"content":"This article is to introduce a freestyle way to set up views in iOS (by code).\nNormally, a view is set up like this\nlabel = UILabel() label.text = \u0026#34;Hello, It\u0026#39;s raining outside. Enjoy?\u0026#34; label.textAlignment = .Center label.font = .headerFont() label.textColor = .headerColor() view.addSubview(label) Configuring a view sometimes includes a sequence of steps. We can rougly call it \u0026ldquo;chaining actions\u0026rdquo;. \u0026ldquo;Chaining actions\u0026rdquo;, in the general perception, is the execution of multiple actions on the same actor.\nactor.doSomething() .doNextStep() .doFinalStep()\t Based on that premise, we could think of this implementation\nlabel = UILabel() .config { $0.text = \u0026#34;Hello, It\u0026#39;s raining outside. Enjoy?\u0026#34; $0.textAlignment = .Center $0.font = .headerFont() $0.textColor = .headerColor() } .addTo(view) And\nview.addSubview(label, withConfig: { $0.text = \u0026#34;Hello, It\u0026#39;s raining outside. Enjoy?\u0026#34; $0.textAlignment = .Center $0.font = .headerFont() $0.textColor = .headerColor() }) .addSubview(button, withConfig: { $0.setTitle(\u0026#34;Enjoy\u0026#34;, forState: .Normal) $0.addTarget(self, action: #selector(tapYes), forControlEvents: .TouchUpInside) }) In fact, this style consumes more lines of code than the conventional approach. Yet, it reflects the idea more clearly. Those inside a closure config implicitly mean they are in the same context, making the code more structured and readable.\nNow, let\u0026rsquo;s codeeee\nBasically, we would make some extensions over UIView\nextension UIView { func config(@noescape closure: UIView -\u0026gt; Void) -\u0026gt; UIView { closure(self) return self } func addTo(parent: UIView) -\u0026gt; Self { parent.addSubview(self.nt_view) return self } } Sadly, the closure is not generic enough to config a UILabel since it takes a UIView as the parameter (‚ü∂ You cannot declare $0.text = \u0026quot;...\u0026quot; because $0 is a UIView. Do not think of casting it to UILabel :D)\nYou may think of the keyword Self to make the compiler infer the input\u0026rsquo;s type. Yes, you\u0026rsquo;re on the right way. However, it\u0026rsquo;s a classic problem that Self is only valid for protocol extensions (Remember: implementing extensions with so-called generic things is kind of limited)\nTo overcome this issue, we create a protocol NTViewType which requires a properties nt_view: UIView. The idea is quite simple. We perform extensions on this protocol and the detail implementation operates on nt_view. And the value nt_view of UIView is just itself.\nprotocol NTViewType { var nt_view: UIView { get } } extension UIView: NTViewType { var nt_view: UIView { return self } } extension NTViewType { func config(@noescape closure: Self -\u0026gt; Void) -\u0026gt; Self { closure(self) return self } func addTo(parent: UIView) -\u0026gt; Self { parent.addSubview(nt_view) return self } func addSubview\u0026lt;T: NTViewType\u0026gt;(subview: T, @noescape config: T -\u0026gt; Void) -\u0026gt; Self { nt_view.addSubview(subview.nt_view) config(subview) return self } } Have fun and make your own styleeeee\n","href":"/tech/a-freestyle-way-to-config-uiview/","title":"A freestyle way to config UIView"},{"content":"Gi·ªù nghe t·ªõi ch·ªØ To√°n l√† ƒë·∫ßu √≥c lo·∫°n c√†o c√†o l√™n v·ªõi h√¨nh ·∫£nh d·∫•u t√≠ch ph√¢n, lu·ªπ th·ª´a, logarit\u0026hellip; ch·ª© h·ªìi c·∫•p 2 t√¥i th√≠ch h·ªçc To√°n v√¥ c√πng üòÄ\n[1] Thu·ªü ƒë√≥, m·∫•y ƒë·ª©a h·ªçc sinh tr∆∞·ªùng huy·ªán t·ª•i t√¥i kh√¥ng c√≥ ƒëi·ªÅu ki·ªán ƒë·ªÉ ti·∫øp x√∫c v·ªõi nhi·ªÅu ngu·ªìn t√†i li·ªáu. M·ªói l·∫ßn ba ch·ªü t√¥i xu·ªëng nh√† s√°ch th·ªã x√£ mua s√°ch, t√¥i h·∫ßu nh∆∞ ch·ªâ l·ª±a c√≥ m·ªói cu·ªën s√°ch ‚ÄúN√¢ng cao v√† ph√°t tri·ªÉn To√°n‚Äù (h√¨nh h·ªçc v√† ƒë·∫°i s·ªë) c·ªßa V≈© H·ªØu B√¨nh. S·ª± th·∫≠t l√†, ƒë·ª©a n√†o h·ªçc To√°n c≈©ng ƒë·ªÅu xem ƒë√¢y l√† cu·ªën s√°ch g·ªëi ƒë·∫ßu gi∆∞·ªùng. V√¨ h∆°i k√©n ch·ªçn s√°ch (1 ph·∫ßn c≈©ng l√† do gu ch·ªçn s√°ch, kh√¥ng th√≠ch m·∫•y cu·ªën gi·∫•y m√†u tr·∫Øng, d√†y, b√¨a s√°ng lo√°ng\u0026hellip;), t√¥i th·∫•y r·∫•t ƒë√≥i s√°ch. (√Äh, m·∫•y s√°ch Ti·∫øng anh, Ng·ªØ vƒÉn\u0026hellip; t√¥i kh√¥ng mua ƒë√¢u :v)\n[2] H·ªìi ƒë√≥ nƒÉm l·ªõp 8-9, c√≥ 1 v√†i ƒë·ª©a b·∫°n n√≥ ƒë·∫∑t mua t·∫°p ch√≠ ‚ÄúTo√°n tu·ªïi th∆°‚Äù (TTT) v√† ‚ÄúTo√°n h·ªçc tu·ªïi tr·∫ª‚Äù (THTT). Thi·∫øu th·ªën b√†i t·∫≠p (ch·ªß y·∫øu b√†i t·∫≠p l√† t·ª´ m·∫•y ch·ªó d·∫°y th√™m v√† t·ª´ [2]), 2 t·∫°p ch√≠ n√†y nh∆∞ c∆°n m∆∞a r√†o gi·ªØa m√πa h·∫°, c·ª©u t·ª•i t√¥i kh·ªèi c∆°n kh√°t nh·ªØng b√†i to√°n hay.\n[3] M·ªói l·∫ßn TTT v√† THTT ra l√≤, t·ª•i t√¥i li·ªÅn ƒëi sƒÉn ƒë√≥n. Kho·∫£ng ng√†y 17, 18 m·ªói th√°ng, ch√∫ng t√¥i ƒë·∫°p xe ra b∆∞u ƒëi·ªán huy·ªán ƒë·ªÉ mua. C·∫ßm tr√™n tay c√°i t·∫°p ch√≠ m·ªõi toanh, c√≤n ph·∫£ng ph·∫•t m√πi m·ª±c in, c·∫£m gi√°c r·∫•t ph·∫•n kh√≠ch.\nM·ªôt s·ªë ra c·ªßa t·∫°p ch√≠ ƒë·ªÅu c√≥ 1 ph·∫ßn g·ªçi l√† ‚Äúƒë·ªë k·ª≥ n√†y‚Äù ƒë·ªÉ ƒë·ªôc gi·∫£ gi·∫£i. Nh·ªØng b√†i gi·∫£i g·ª≠i v·ªÅ to√† so·∫°n c·ªßa c√°c b·∫°n h·ªçc sinh s·∫Ω ƒë∆∞·ª£c ch·∫•m v√† l·ª±a ra kho·∫£ng m∆∞·ªùi m·∫•y bai ch·ª•c b√†i, ƒëƒÉng t√™n d∆∞·ªõi m·ªói b√†i trong m·ª•c ‚Äúgi·∫£i ƒë√°p k·ª≥ tr∆∞·ªõc‚Äù ·ªü s·ªë ra th√°ng sau. T·ª•i t√¥i h√¨ h·ª•c gi·∫£i r·ªìi g·ª≠i b√†i v·ªÅ to√† so·∫°n. T√¥i nh·ªõ h·ªìi ƒë√≥, gi·∫£i ƒë∆∞·ª£c b√†i n√†o l√† t√¥i l·∫•y t·ªù gi·∫•y A4 ra, k·∫ª d√≤ng ƒë√†ng ho√†ng, r·ªìi ghi l·ªùi gi·∫£i v√†o, r·∫•t n·∫Øn n√≥t, r·∫•t c·∫©n th·∫≠n. C·ª© m·ªói k·ª≥ ra, t·ª•i t√¥i th∆∞·ªùng hay soi trong m·ª•c ‚Äúgi·∫£i ƒë√°p k·ª≥ tr∆∞·ªõc‚Äù, ph√≠a d∆∞·ªõi c√≥ ƒëƒÉng t√™n m√¨nh kh√¥ng, r·ªìi ti·∫øp t·ª•c gi·∫£i b√†i, g·ª≠i to√†n so·∫°n. B√†i ƒëƒÉng tr√™n TTT th√¨ d·ªÖ ƒë·∫°t h∆°n, c√≤n THTT th√¨ kh√≥ nu·ªët h∆°n v√† d√π gi·∫£i ra c≈©ng √≠t ƒë∆∞·ª£c ƒëƒÉng h∆°n. M·ªói l·∫ßn m√† th·∫•y t√™n m√¨nh l√† l√≤ng ph∆°i ph·ªõi, c√≤n h∆°n c·∫£ v√†i con 10 ki·ªÉm tra.\n[4] C√≥ m·ªôt k·ª∑ ni·ªám v·ªõi TTT c≈©ng kh√° th√∫ v·ªã. M·ªôt l·∫ßn, tr√™n TTT c√≥ gi·ªõi thi·ªáu 1 cu·ªën s√°ch tuy·ªÉn t·∫≠p nh·ªØng b√†i to√°n hay v√† k√™u g·ªçi ƒë·ªôc gi·∫£ mua. T√¥i kh√¥ng c√≤n nh·ªõ t·ª±a ƒë·ªÅ c·ªßa n√≥, ch·ªâ nh·ªõ n√≥ c√≥ c√°i b√¨a m√†u xanh ƒë·ªçt chu·ªëi. Xem gi·ªõi thi·ªáu th·∫•y r·∫•t ∆∞ng √Ω, t√¥i xin ti·ªÅn ba mua. R·ªìi g·ª≠i ti·ªÅn v√¥ phong b√¨, k√®m theo b·ª©c th∆∞ ki·ªÉu nh∆∞ ‚Äúem r·∫•t mu·ªën mua cu·ªën s√°ch n√†y, cho em mua m·ªôt cu·ªën‚Äù, g·ª≠i k√®m b√†i gi·∫£i v·ªÅ to√†n so·∫°n. Sau ƒë√≥ m·ªõi bi·∫øt l√† m√¨nh h·ªèk ƒë∆∞·ª£c g·ªüi ti·ªÅn trong b∆∞u ph·∫©m. V·ª´a kh√¥ng c√≥ s√°ch, v·ª´a kh√¥ng l·∫•y l·∫°i ƒë∆∞·ª£c ti·ªÅn, t√¥i v·ª´a ti·∫øc 20 ng√†n ƒë·ªìng, v·ª´a th·∫ßm lo l√† c√°i b∆∞u ph·∫©m ƒë√≥ kh√¥ng h·ª£p l·ªá n√™n ng∆∞·ªùi ta kh√¥ng g·ª≠i b√†i c·ªßa t√¥i ƒë·∫øn to√†n so·∫°n üòî.\n[5] Kh√¥ng bi·∫øt gi·ªù TTT v√† THTT n√≥ ra ƒë·∫øn s·ªë m·∫•y r·ªìi. M√† t·ª´ ng√†y v√¥ SG, th·∫•y m·∫•y b·∫°n tr·∫ª trong n√†y c√≥ ƒëi·ªÅu ki·ªán qu√°, ch·ªâ c·∫ßn 1 c√∫ click chu·ªôt l√† ƒë√£ c√≥ c·∫£ kho t√†i li·ªáu ng∆∞·ªùi ta t√≠ch g√≥p v√†i nƒÉm. H·ªèk bi·∫øt m·∫•y b·∫°n h·ªçc sinh TP c√≥ th∆∞·ªùng tham gia s√¢n ch∆°i n√†y kh√¥ng.\n[6] C∆° b·∫£n l√† c√≥ m·ªôt th·ªùi k·ª≥ v√†ng son trong h·ªçc t·∫≠p nh∆∞ v·∫≠y. L√™n ƒë·∫°i h·ªçc th√¨ than √¥i, th·∫•y ƒë·∫°o h√†m, t√≠ch ph√¢n l√† ch√°n ng√°n. T√¥i nghƒ© r·∫±ng, s·ªü dƒ© m√¨nh ch√°n kh√¥ng ph·∫£i ch·ªß y·∫øu do n√≥ qu√° kh√≥ (dƒ© nhi√™n n√≥ kh√≥ thi·ªát, v√† dƒ© nhi√™n ƒë√¥i l√∫c n√≥ kh√¥ng ƒë√∫ng c√°i m√¨nh th√≠ch), m√† quan tr·ªçng l√† m√¨nh kh√¥ng tham gia v√†o m·ªôt c·ªông ƒë·ªìng h·ªçc thu·∫≠t c·ªßa lƒ©nh v·ª±c ƒë√≥.\nV√≠ nh∆∞ b√¢y gi·ªù, trong qu√° tr√¨nh t√¥i h·ªçc v√† l√†m iOS c√≥ follow up m·ªôt s·ªë newsletters, technical blogs, ƒë·ªçc b√†i vi·∫øt c·ªßa h·ªç l√†m m√¨nh c·∫£m th·∫•y r·∫•t h·ª©ng th√∫. Nh·ªØng l√∫c b·∫≠n b·ªãu, h·ªèk ƒë·ªçc newsletters trong kho·∫£ng ch·ª´ng 2-3 tu·∫ßn l√† th·∫•y m√¨nh ch√°n code li·ªÅn. Dƒ© nhi√™n t√¥i kh√¥ng ph·ªß nh·∫≠n l√† c√≥ nhi·ªÅu nguy√™n nh√¢n kh√°c khi·∫øn m√¨nh ch√°n, nh∆∞ng vi·ªác tham gia v√†o m·ªôt c·ªông ƒë·ªìng nh∆∞ v·∫≠y qu·∫£ th·∫≠t gi√∫p t√¥i b∆∞·ªõc qua ƒë√™m tr∆∞·ªùng :v\nS√†i G√≤n, The very last day of holi...day... ","href":"/misc/toan-tuoi-tho-toan-hoc-tuoi-tre/","title":"Chuy·ªán h·ªçc: To√°n tu·ªïi th∆° - To√°n h·ªçc tu·ªïi tr·∫ª"},{"content":"[1] D·∫°o n√†y c·ª© c√°ch v√†i tu·∫ßn, c√¥ng ty c√≥ th√™m v√†i ng∆∞·ªùi m·ªõi. C√≥ m·ªôt anh b·∫°n (nh·ªè h∆°n m√¨nh 1 tu·ªïi) c≈©ng m·ªõi v√†o nh∆∞ng ·ªü team kh√°c. Ku c·∫≠u l√† ng∆∞·ªùi ho·∫°t kh·∫©u, mi·ªáng n√≥i li·∫øng tho·∫Øng. M√¨nh ng·ªìi ƒë·ªëi di·ªán nhi·ªÅu l√∫c c≈©ng c·∫£m th·∫•y h∆°i ng·ªôp tai.\nAnh ch√†ng hay c√≥ nh·ªØng th·∫Øc m·∫Øc v·ªÅ c√¥ng vi·ªác r·∫•t th∆∞·ªùng xuy√™n. H·∫ßu h·∫øt nh·ªØng c√¢u h·ªèi ƒë·∫∑c tr∆∞ng m√† m√¨nh nghe (m·ªôt c√°ch b·ªã ƒë·ªông) l√† nh·ªØng c√¢u h·ªèi ki·ªÉu m·∫´u Why: \u0026ldquo;t·∫°i sao l·∫°i l√†m v·∫ßy?\u0026rdquo;, \u0026ldquo;t·∫°i sao A l·∫°i c√≥ thu·ªôc t√≠nh B?\u0026rdquo;\u0026hellip; M·ªôt l·∫ßn, b·∫£n t·ª± h·ªèi ch√≠nh m√¨nh, r·ªìi quay sang h·ªèi m·∫•y ƒë·ª©a b·∫°n xung quanh:¬†\u0026ldquo;ch·∫≥ng hi·ªÉu t·∫°i sao ABC l·∫°i d√πng XYZ? C√°i n√†y kh√¥ng make sense. ƒê√°ng nh·∫Ω ph·∫£i d√πng DEF m·ªõi ƒë√∫ng ch·ª© nh·ªâ\u0026rdquo;. Nhi·ªÅu ƒë·ª©a kh√°c nghƒ©: \u0026ldquo;th·∫±ng n√†y ng·ªô, d√πng XYZ th√¨ c≈©ng c√≥ b·ªã sao ƒë√¢u. H·ªèi ri·∫øt, bi·∫øt ch·ª´ng n√†o l√†m xong\u0026rdquo;. M√¨nh ƒë√¥i l√∫c c≈©ng n·∫±m trong ƒë√°m ƒë√¥ng ·∫•y. Th·∫ø nh∆∞ng kh√¥ng ph·∫£i t·∫•t c·∫£ nh·ªØng c√¢u h·ªèi b·∫°n ·∫•y ƒë·∫∑t ra ƒë·ªÅu v√¥ l√Ω.Nhi·ªÅu l√∫c tranh lu·∫≠n v·ªõi b·∫£n m·ªôt h·ªìi, tui c≈©ng th·∫Øc m·∫Øc y chang b·∫°n ·∫•y. Nh·ªØng ƒëi·ªÅu ch√∫ng ta coi l√† hi·ªÉn nhi√™n, ch∆∞a ch·∫Øc l√† ƒë√∫ng, ch∆∞a h·∫≥n s·∫Ω ƒë√∫ng trong t∆∞∆°ng lai\u0026hellip;\n[2] N√≥i v·ªÅ t√≠nh ƒë√∫ng sai, m·ªçi th·ª© ƒë·ªÅu ƒë√∫ng trong ph·∫°m vi √°p d·ª•ng c·ªßa n√≥. Ngay c·∫£ nh·ªØng ƒëi·ªÅu hi·ªÉn nhi√™n, vd: \u0026ldquo;m·ªôt ng∆∞·ªùi b√¨nh th∆∞·ªùng kh√¥ng c√≥ kh·∫£ nƒÉng nh·∫£y cao qu√° 15m n·∫øu kh√¥ng c√≥ s·ª± tr·ª£ gi√∫p c·ªßa m√°y m√≥c\u0026rdquo;, c≈©ng c√≥ th·ªÉ sai ·ªü m·ªôt b·ªëi c·∫£nh kh√°c, vd: ng∆∞·ªùi ƒë√≥ s·ªëng tr√™n sao Ho·∫£.\n[3] Quay tr·ªü l·∫°i ch√†ng dev. M√¨nh cho r·∫±ng vi·ªác ƒë·∫∑t ra c√¢u h·ªèi l√† r·∫•t ƒë√°ng tuy√™n d∆∞∆°ng. M√¨nh r·∫•t th√≠ch nh·ªØng ng∆∞·ªùi hay ƒë·∫∑t c√¢u h·ªèi, ƒë·∫∑t bi·ªát l√† nh·ªØng c√¢u h·ªèi v·ªÅ nh·ªØng th·ª© quen thu·ªôc xung quanh m√¨nh nh∆∞:\n \u0026ldquo;T·∫°i sao ng∆∞·ªùi ta ch·ªçn m√†u c·ªßa ƒë√®n giao th√¥ng l√† xanh, ƒë·ªè, v√†ng m√† kh√¥ng ph·∫£i 3 m√†u kh√°c?\u0026rdquo; \u0026ldquo;T·∫°i sao l·∫°i l√† 3 m√†u m√† kh√¥ng ph·∫£i 2 m√†u?\u0026rdquo; \u0026ldquo;T·∫°i sao b√°nh xe h√¨nh tr√≤n m√† kh√¥ng ph·∫£i h√¨nh b√°t gi√°c?\u0026rdquo; \u0026ldquo;T·∫°i sao khi g·∫∑p ph·∫£i 1 c·ª≠a k√≠nh k√©o/ƒë·∫©y, ng∆∞·ªùi ta hay ƒë·∫©y (push) h∆°n l√† k√©o (pull)?\u0026rdquo; \u0026ldquo;T·∫°i sao m·∫•y ly cafe nh·ª±a th∆∞·ªùng l√† h√¨nh tr√≤n m√† kh√¥ng ph·∫£i h√¨nh vu√¥ng (theo m·∫∑t c·∫Øt ngang)?\u0026rdquo; \u0026hellip;  H·ªìi ƒë√≥ m√¨nh th√≠ch t√¨m hi·ªÉu v·ªÅ UX c≈©ng l√† mu·ªën ƒë∆∞·ª£c tho·∫£ m√£n t√≠nh t√≤ m√≤ v·ªÅ √Ω nghƒ©a c·ªßa s·ª± v·∫≠t, s·ª± vi·ªác\u0026hellip;\n[4] Tr√≠ch d·∫´n m·ªôt c√°i tweet c·ªßa Andy Matuschak m√† m√¨nh r·∫•t th√≠ch:\n People laugh about children who ask ‚Äúwhy?‚Äù all the time but not about the adults who never do.\n People laugh about children who ask ‚Äúwhy?‚Äù all the time but not about the adults who never do.\n\u0026mdash; Andy Matuschak (@andy_matuschak) October 11, 2015 \nT·∫°m d·ªãch: Ng∆∞·ªùi ta c∆∞·ªùi nh·∫°o nh·ªØng ƒë·ª©a tr·∫ª hay h·ªèi \u0026ldquo;t·∫°i sao\u0026rdquo; su·ªët m√† kh√¥ng ph·∫£i l√† nh·ªØng ng∆∞·ªùi kh√¥ng bao gi·ªù ƒë·∫∑t c√¢u h·ªèi n√†y.\n","href":"/misc/tan-man-chuyen-cau-hoi/","title":"T·∫£n m·∫°n: Chuy·ªán c√¢u h·ªèi"},{"content":"G·∫ßn ƒë√¢y, tr√™n c√¥ng ty th∆∞·ªùng hay x·∫£y ra nh·ªØng cu·ªôc tranh lu·∫≠n trong d·ª± √°n m√† ƒëa s·ªë c√°c tr∆∞·ªùng h·ª£p l√† do kh√¥ng th·ªëng nh·∫•t trong vi·ªác hi·ªÉu m·ªôt kh√°i ni·ªám. L√†m m√¨nh nh·ªõ l·∫°i, th·∫•m th√≠a nh·ªØng c√¢u ch·ªØ c·ªßa th·∫ßy Phan D≈©ng vi·∫øt v·ªÅ \u0026ldquo;ƒê·ªãnh nghƒ©a kh√°i ni·ªám\u0026rdquo; trong cu·ªën \u0026ldquo;T∆∞ duy Logic, bi·ªán ch·ª©ng v√† h·ªá th·ªëng\u0026rdquo;.\n1 Tr√≠ch l∆∞·ª£c t·ª´ s√°ch \u0026ldquo;T∆∞ duy Logic, bi·ªán ch·ª©ng v√† h·ªá th·ªëng\u0026rdquo;\nTheo nghƒ©a chung nh·∫•t, ƒë·ªãnh nghƒ©a kh√°i ni·ªám l√† thao t√°c logic gi·∫£i th√≠ch ƒë·∫ßy ƒë·ªß n·ªôi h√†m (t·∫•t c·∫£ c√°c t√≠nh ch·∫•t m√† ƒë·ªëi t∆∞·ª£ng ngo·∫°i di√™n c·ªßa kh√°i ni·ªám c·∫ßn ƒë·ªãnh nghƒ©a ƒë·ªÅu c√≥) c·ªßa kh√°i ni·ªám ƒë√≥.\nƒê·ªãnh nghƒ©a kh√°i ni·ªám cho tr∆∞·ªõc l√† gi·∫£i th√≠ch kh√°i ni·ªám ƒë√≥ th√¥ng qua c√°c kh√°i ni·ªám ƒë√£ bi·∫øt.\nM·ª•c ƒë√≠ch c·ªßa vi·ªác ƒë·ªãnh nghƒ©a m·ªôt kh√°i ni·ªám:\n X√°c ƒë·ªãnh (gi√∫p nh·∫≠n ra) ƒë·ªëi t∆∞·ª£ng ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a Ph√¢n bi·ªát ƒë·ªëi t∆∞·ª£ng v·ªõi c√°c ƒë·ªëi t∆∞·ª£ng kh√°c  M·ªôt trong nh·ªØng y√™u c·∫ßu quan tr·ªçng c·ªßa kh√°i ni·ªám l√† l√†m r√µ b·∫£n ch·∫•t c·ªßa ƒë·ªëi t∆∞·ª£ng. Nhi·ªÅu v·∫•n ƒë·ªÅ x·∫£y ra khi m·ªôt kh√°i ni·ªám kh√¥ng tho·∫£ m√£n y√™u c·∫ßu n√†y, g√¢y ra s·ª± nh·∫≠p nh·∫±ng trong vi·ªác ti·∫øp nh·∫≠n 1 kh√°i ni·ªám. L·ªãch s·ª≠ ƒë√£ ch·ª©ng ki·∫øn nhi·ªÅu cu·ªôc tranh lu·∫≠n xung quanh v·∫•n ƒë·ªÅ kinh ƒëi·ªÉn n√†y.¬†Plato, tri·∫øt gia Hy L·∫°p ·ªü th·∫ø k·ª∑ th·ª© 4 TCN, ƒë√£ ƒë∆∞a ra ƒë·ªãnh nghƒ©a v·ªÅ con ng∆∞·ªùi nh∆∞ sau: \u0026ldquo;Con ng∆∞·ªùi l√† sinh v·∫≠t kh√¥ng c√≥ l√¥ng v≈©, ƒëi b·∫±ng 2 ch√¢n\u0026rdquo;. Sau ƒë√≥, Diogenes - m·ªôt tri·∫øt gia c√πng th·ªùi - ƒë√£ v·∫∑t s·∫°ch l√¥ng m·ªôt con g√†, mang ƒë·∫øn ch·ªó Plato v√† n√≥i: \u0026ldquo;ƒê√¢y l√† con g√† c·ªßa Plato\u0026rdquo; =]].\n2 Ng∆∞·ªùi ta hay ƒë√≤i h·ªèi nh·ªØng ƒë·ªãnh nghƒ©a ch·∫∑t ch·∫Ω m·∫∑c d·∫ßu s·ª± ch·∫∑t ch·∫Ω th∆∞·ªùng ƒëi k√®m theo 1 s·ªë th·ª© bonus kh√°c nh∆∞ s·ª± tr·ª´u t∆∞·ª£ng, s·ª± kh√≥ hi·ªÉu. ƒê√¥i l√∫c h·ªç c≈©ng kh√¥ng bi·∫øt r·∫±ng ch·∫∑t ch·∫Ω c√≥ ph·∫£i l√† ƒëi·ªÅu h·ªç c·∫ßn trong tr∆∞·ªùng h·ª£p ƒë√≥ hay kh√¥ng.\n3 Ch·ªØ \u0026ldquo;ch·∫∑t ch·∫Ω\u0026rdquo; ·ªü [2] c≈©ng c·∫ßn ƒë∆∞·ª£c l√†m r√µ ƒë·ªÉ tr√°nh nh·∫ßm l·∫´n v·ªõi \u0026ldquo;k√©m linh ƒë·ªông\u0026rdquo;.\n4 C√°ch th√¥ng d·ª•ng ng∆∞·ªùi ta hay d√πng ƒë·ªÉ ƒë·ªãnh nghƒ©a KN l√† li·ªát k√™ ra nh·ªØng t√≠nh ch·∫•t m√† ƒë·ªëi t∆∞·ª£ng ƒë√≥ c√≥. VD: \u0026ldquo;m∆∞a l√† m·ªôt d·∫°ng ng∆∞ng t·ª• c·ªßa h∆°i n∆∞·ªõc, abcxyz\u0026hellip;\u0026rdquo;\nNh∆∞ng d√πng c√°ch n√†y ƒë·ªÉ ƒë·ªãnh nghƒ©a 1 ng∆∞·ªùi c·ª• th·ªÉ n√†o ƒë√≥, Einstein ch·∫≥ng h·∫°n, th√¨ kh√≥ qu√°. Khi ƒë√≥ ng∆∞·ªùi ta ch·ªâ c·∫ßn quƒÉng 1 t·∫•m h√¨nh c·ªßa √¥ng v√† k√™u \u0026ldquo;√ä, ƒë√≥ l√† Einstein ƒë√≥\u0026rdquo;.\nM·ªôt c√°ch ƒë·ªãnh nghƒ©a kh√°c l√† ch·ªâ ra t·∫•t c·∫£ nh·ªØng ƒë·ªëi t∆∞·ª£ng c·ªßa kh√°i ni·ªám ƒë√≥. V√≠ d·ª• l·ªõp To√°n 0710 l√† t·∫≠p h·ª£p th·∫±ng A, con B, th·∫±ng-con C\u0026hellip;\nC√≤n c√°ch n√†o kh√°c ƒë·ªÉ ƒë·ªãnh nghƒ©a kh√°i ni·ªám? Ph√¢n chia c√°c kh√°i ni·ªám nh∆∞ th·∫ø n√†o?\nTh√¥i m·ªçi ng∆∞·ªùi mua s√°ch th·∫ßy D≈©ng v·ªÅ m√† ƒë·ªçc!\n","href":"/misc/tan-man-chuyen-khai-niem/","title":"T·∫£n m·∫°n: Chuy·ªán kh√°i ni·ªám"},{"content":" In this article, we would look into how to implement a generic protocol. A few lacks of language support (Swift version prior to 3.0) would be also pointed out for discussion.\nLet\u0026rsquo;s get started with an example. We are writing a bunch of code to implement data fetching used for a specific screen. We expect to use the same behavior for different types of data, different screens. Here\u0026rsquo;s the protocol:\nprotocol DataFetchingType { associatedtype DataType func fetchFromLocal(from from: NSDate, to: NSDate, completion: [DataType]? -\u0026gt; Void) func fetchFromServer(from from: NSDate, to: NSDate, completion: [DataType]? -\u0026gt; Void) } The protocol should have an associated type DataType which is particular for an api service.\nOK! The next step is to create concrete classes that implement this protocol.\nclass EventsFetcher: DataFetchingType { typealias DataType = Event func fetchFromLocal(from from: NSDate, to: NSDate, completion: [DataType]? -\u0026gt; Void) { // Implementation goes here } func fetchFromServer(from from: NSDate, to: NSDate, completion: [DataType]? -\u0026gt; Void) { // Implementation goes here } } class OrdersFetcher: DataFetchingType { typealias DataType = Event func fetchFromLocal(from from: NSDate, to: NSDate, completion: [DataType]? -\u0026gt; Void) { // Implementation goes here } func fetchFromServer(from from: NSDate, to: NSDate, completion: [DataType]? -\u0026gt; Void) { // Implementation goes here } } So far, it\u0026rsquo;s good. Now we put a data fetcher in a view model which is also generic.\nclass ViewModel\u0026lt;DataType\u0026gt; { var fetcher: DataFetchingType ... } Actually, XCode yields an error, complaining that DataFetchingType is a generic protocol and thus cannot be used in such a way like that. More painfully, the current version of Swift does not yet support writing it similarly to generic class\nvar fetcher: DataFetchingType\u0026lt;DataType\u0026gt; Solution Here comes the trick to overcome this problem. The idea is simple, we use a generic class to wrap the protocol.\nclass GenericDataFetcher\u0026lt;DT\u0026gt;: DataFetchingType { typealias DataType = DT ............ } class ViewModel\u0026lt;DataType\u0026gt; { var fetcher: GenericDataFetcher\u0026lt;DataType\u0026gt; } It\u0026rsquo;s still generic and the compiler would not complain. And the hard part remaining is to make GenericDataFetcher flexible that we WOULD NOT write EventFetcher as a subclass of GenericDataFetcher (subclassing is not really a good idea here).\nA solution: init GenericDataFetcher from a protocol, store the required functions, properties of that protocol.\nclass GenericDataFetchingType\u0026lt;DT\u0026gt;: DataFetchingType { typealias DataType = DT private var _fetchFromLocal: (from: NSDate, to: NSDate, completion: [DT]? -\u0026gt; Void) -\u0026gt; Void private var _fetchFromServer: (from: NSDate, to: NSDate, completion: [DT]? -\u0026gt; Void) -\u0026gt; Void init\u0026lt;DF: DataFetchingType where DF.DataType == DT\u0026gt;(fetcher: DF) { self._fetchFromLocal = fetcher.fetchFromLocal(from:to:completion:) self._fetchFromServer = fetcher.fetchFromServer(from:to:completion:) } func fetchFromLocal(from from: NSDate, to: NSDate, completion: [DataType]? -\u0026gt; Void) { _fetchFromLocal(from: from, to: to, completion: completion) } func fetchFromServer(from from: NSDate, to: NSDate, completion: [DataType]? -\u0026gt; Void) { _fetchFromServer(from: from, to: to, completion: completion) } }class ViewModel\u0026lt;DataType\u0026gt; { var fetcher: GenericDataFetcher\u0026lt;DataType\u0026gt; init\u0026lt;DF: DataFetchingType where DF.DataType == DataType\u0026gt;(fetcher: DF) { self.fetcher = GenericDataFetcher(fetcher) } } let eventsViewModel = ViewModel(fetcher: EventsFetcher()) P/s: I wish we would not need this trick any more in the near future.\nReference  http://krakendev.io/blog/generic-protocols-and-their-shortcomings https://milen.me/writings/swift-generic-protocols https://github.com/apple/swift-evolution/tree/master/proposals (with keywords: generic, protocol :D)  Have fun!\n","href":"/tech/swift-generic-protocol-p1/","title":"Swift: Generic protocol (p.1)"},{"content":"Suppose you are writing a language-translation app. The requirement is quite simple: Given a word, translate it from a language into another language.\nHere‚Äôs a simple approach. We define a protocol TranslatorType as follows\nclass Language { var words: [Word] = [] } class VI_Language: Language { } class EN_Language: Language { } protocol TranslatorType { var sourceLanguage: Language { get } var destLanguage: Language { get } func translate(word: Word) -\u0026gt; Word } The VI_EN_Translator (which translates Vietnamese into English) should conform to that protocol with sourceLanguage as VI_Language and destLanguage as EN_Language.\nclass VI_EN_Translator: TranslatorType { private(set) var sourceLanguage = VI_Language() private(set) var destLanguage = EN_Language() func translate(word: Word) -\u0026gt; Word { ... } } It seems reasonable. Unfortunately, I got an error from XCode: ‚ÄúType VI_EN_Translator does not conform to protocol TranslatorType‚Äù despite the fact that VI_Language is a subclass of Language. I don‚Äôt want to change sourceLanguage to Language and cast it to VI_Language every I use it.\nNot sure wheter we should blame Swift/XCode/Apple for that. Here‚Äôs a tip to overcome this issue:\nclass VI_EN_Translator: TranslatorType { private var _sourceLanguage = VI_Language() private var _destLanguage = EN_Language() var sourceLanguage: Language { return _sourceLanguage } var destLanguage: Language { return _destLanguage } func translate(word: Word) -\u0026gt; Word { ... } } This code still satisfies the protocol requirements and also allows us to use particular properties/functions of the concrete types via _sourceLanguage, _destLanguage.\n","href":"/tech/swift-concrete-types-in-protocol/","title":"Swift: Concrete types in Protocol"},{"content":"S√°ng nay l√† m·ªôt bu·ªïi s√°ng ƒë·∫πp tr·ªùi. Ch·∫Øc v√¨ c∆°n m∆∞a ƒë√™m ƒë√£ r·ª≠a sach b·∫ßu tr·ªùi m√πa h·∫°. S√°ng nay t√¥i ƒë·∫°p xe ƒëi l√†m. M·ªôt d·ªãp t·ªët ƒë·ªÉ qu·∫•t 1 t√¥ b√∫n b√≤ tr∆∞·ªõc khi ƒë·∫°p g·∫ßn ch·ª•c c√¢y s·ªë ƒë·∫øn c√¥ng ty.\n\u0026hellip;\nT√¨nh c·ªù t√¥i g·∫∑p 1 √¥ng ch√∫ (b√† con) c≈©ng ƒÉn ·ªü qu√°n. V·ª´a d·ª±ng xe, ng·ªìi g·∫ßn c·∫°nh, ch√∫ li·ªÅn h·ªèi:\n‚Äì ƒêi t·∫≠p th·ªÉ d·ª•c h·∫£ con?\n‚Äì D·∫° con ƒëi l√†m\nTh·∫•y t√¥i m·∫∑c qu·∫ßn ƒë√πi (ƒë·ªÉ ƒë·∫°p xe cho tho·∫£i m√°i), c√≥ v·∫ª ch√∫ h∆°i b·∫•t ng·ªù, li·ªÅn h·ªèi:\n‚Äì ·ª¶a ƒëi l√†m m√† m·∫∑c ƒë·ªì v·∫´y n√™?\n‚Äì D·∫° con c√≥ ƒëem theo ƒë·ªì ƒë·ªÉ thay m√†\n\u0026hellip;\n‚Äì ƒêi l√†m ch·ªó n√†o, Thi√™n?\n‚Äì D·∫°, qu·∫≠n 4 √° ch√∫\nM·ªôt ng∆∞·ªùi ph·ª• n·ªØ ng·ªìi ƒë·ªëi di·ªán, v·ªõi 1 v·∫ª ng·∫°c nhi√™n, n√≥i:\n‚Äì Chu choa, t·ª´ ƒë√¢y ƒë·∫°p xe t·ªõi t·∫≠n qu·∫≠n 4. Gi·ªèi thi·ªát!\nKh√¥ng ƒë·ª£i t√¥i ph√¢n bua, ch√∫ gi·∫£i th√≠ch:\n‚Äì Ui! t·ª•i tr·∫ª b√¢y gi·ªù n√≥ ph·∫£i c√≥ ch√∫t g√¨ ƒë√≥ ƒëi√™n ƒëi√™n ch√∫t! Con b√© Trang nh√† tui n√≥ c≈©ng ƒë·∫°p xe t·ªõi qu·∫≠n 7 v·ªõi m·∫•y ƒë·ª©a b·∫°n ho√†i. ƒê·∫°p t·ªõi c·∫ßu Ph√∫ M·ªπ g√¨ √°\nM·ªôt ng∆∞·ªùi ƒë√†n √¥ng kh√°c, tr·∫°c t·ª© tu·∫ßn, ng·ªìi g·∫ßn ƒë·∫•y c≈©ng tranh lu·∫≠n:\n‚Äì C√°i n√†y l√† ƒëi√™n 2, 3 ph·∫ßn g√¨ ƒë√≥ ch·ª© ch√∫t ch√∫t g√¨ n·ªØa\n\u0026hellip;\nM·ªçi ng∆∞·ªùi ai n·∫•y chƒÉm ch√∫ ƒÉn t√¥ b√∫n c·ªßa m√¨nh.\n‚Äì ·ª¶a m√†, m·∫•y b·ªØa nay facebook n√≥ b·ªã ch·∫∑n ph·∫£i hok Thi√™n? Ch√∫ v√¥ ho√†i m√† h·ªèk ƒë∆∞·ª£c\n‚Äì ·ªÄ, tui c≈©ng v√¥ h·ªèk ƒë∆∞·ª£c √¥ng ∆°i. ‚Äì Ng∆∞·ªùi ph·ª• n·ªØ l·∫°i b·∫Øt tr√∫ng ch·ªß ƒë·ªÅ\nNghe n√≥i v·ªÅ vi·ªác ch·∫∑n facebook, c√¥ b√°n b√∫n b√≤ nh∆∞ c≈©ng c√≥ chung 1 n·ªói b·ª©c x√∫c, li·ªÅn n√≥i:\n‚Äì ·ªú! tui c≈©ng v√¥ ƒë∆∞·ª£c ƒë√¢u.\nM√¨nh th·∫ßm nghƒ© trong b·ª•ng: ‚Äútr·ªùi ∆°i, sao m·∫•y c√¥ m·∫•y ch√∫ b·∫Øt k·ªãp th·ªùi ƒë·∫°i qu√° v·∫≠y‚Äù\n\u0026hellip; (ƒêo·∫°n n√†y n√≥i v√¨ sao l·∫°i c√≥ v·ª• ch·∫∑n facebook, v√† nh·ªØng ph·ªèng ƒëo√°n r·∫±ng n√≥ s·∫Ω c√≤n k√©o d√†i trong bao l√¢u)\n\u0026hellip;\n‚Äì M·∫•y ƒë·ª©a b√¢y gi·ªù t·ª•i n√≥ ghi·ªÅn facebook √¥ng ∆°i.\nNg∆∞·ªùi ƒë√†n √¥ng t·ª© tu·∫ßn kia nh∆∞ g·∫∑p ƒë√∫ng ch·ªß ƒë·ªÅ chuy√™n m√¥n:\n‚Äì Ch·∫£ hi·ªÉu n·ªïi! Th·∫•y g√¨ m√†\u0026hellip; T·ª•i n√≥ nh·∫Øn tin, c√≥ 1 ch·ªØ c≈©ng g·ªüi qua g·ªüi l·∫°i\n‚Äì N√≥i c√¢u c√∫ h·ªèk ch·ªânh chu, to√†n c√¢u c·ª•t c√¢u qu√®. ‚Äì Ch√∫ ·∫•y gi·∫£i th√≠ch ‚Äì M√† th·∫•y gi·ªù t·ª•i n√≥ quen m·ªõi c√≥ m·∫•y ng√†y\u0026hellip; m√† k√™u v·ª£ k√™u ch·ªìng n√†y n·ªç. Tui c∆∞·ªõi v·ª£ tui hai m∆∞∆°i nƒÉm m√† c√≥ k√™u ‚Äúv·ª£‚Äù mi·∫øng n√†o ƒë√¢u.\nM·∫•y ng∆∞·ªùi ng·ªìi xung quanh ƒë·ªÅu c∆∞·ªùi s·∫£ng kho√°i. Ng∆∞·ªùi ph·ª• n·ªØ kia, li·ªÅn ch·ª•p h·ªèi:\n‚Äì H·ªèk k√™u v·ª£ ch·ª© k√™u c√°i g√¨ √¥ng?\n‚Äì Th√¨ k√™u b√†, tui ch·ª© k√™u g√¨\n\u0026hellip;\n","href":"/misc/tan-man-chuyen-bun-bo/","title":"T·∫£n m·∫°n: Chuy·ªán b√∫n b√≤"},{"content":" This topic (aka Currying) has been mentioned as a part of Functional programming. Though it‚Äôs kind of fun to use currying, we often see it on the list of what-must-not-be-named (along with functors, applicative, monads\u0026hellip;) LOL. In this article, I‚Äôll show you a couple of ways to have fun with currying.\nWhat is currying? Roughly speaking, currying is the act of translating a single function of N arguments into N functions of a single argument. For those who did not know what it is, take a look at this link. Suppose we a have a function multiply:\nfunc mutiply(op1: Int, op2: Int) -\u0026gt; Int { return op1 * op2 } The type of multiply is: (Int, Int) -\u0026gt; Int. Currying this function results in another function which is of type: Int -\u0026gt; Int -\u0026gt; Int. And this is how to get the result using the curried function:\nlet result = curriedMultiply(2)(3) Note that the result of curriedMultiply(2) is a function Int -\u0026gt; Int. This function take an integer x as a parameter and return 2 * x, equivalent to making a number double. Similarly, we could create lots of derived functions:\nlet makeDouble = curriedMultiply(2)\t// Int -\u0026gt; Int let makeTriple = curriedMultiply(3)\t// Int -\u0026gt; Int let makeFourTimes = curriedMultiply(4)\t// Int -\u0026gt; Int What\u0026rsquo;s the difference? We transform the values before passing them as the parameters of a function on a very regular basis. In other words, we often use a function like this:\nlet result = f(g(a), h(b), k(c)) In this scenario, isolating the parameters make the function more flexible \u0026amp; reusable.\nExamples Write function \u0026ldquo;curry\u0026rdquo; First of all, lets write a function to curry a function:\nfunc curry(f: (A, B) -\u0026gt; R) -\u0026gt; A -\u0026gt; B -\u0026gt; R { return { a in { b in f(a, b) } } } Similarly, you could write more implementations of curry for functions that have 3, 4, 5 parameters\nfunc curry(f: (A, B, C) -\u0026gt; R) -\u0026gt; A -\u0026gt; B -\u0026gt; C -\u0026gt; R func curry(f: (A, B, C, D) -\u0026gt; R) -\u0026gt; A -\u0026gt; B -\u0026gt; C -\u0026gt; D -\u0026gt; R func curry(f: (A, B, C, D, E) -\u0026gt; R) -\u0026gt; A -\u0026gt; B -\u0026gt; C -\u0026gt; D -\u0026gt; E -\u0026gt; R Now, lets curry a function\nfunc addWithScale(op1: Int, op2: Int, scale: Int) -\u0026gt; Int { return (op1 + op2) * scale } let curriedAddWithScale = curry(addWithScale) let result1 = curriedAddWithScale(1)(2)(3)\t// result1 = 9 let scaleMySum = curriedAddWithScale(1)(2)\t// scaleMySum: Int -\u0026gt; Int let result2 = scaleMySum(3)\t// result2 = 9 Use with custom operators |\u0026gt; To make the code more readable, lets define an operator |\u0026gt; (we read it as \u0026ldquo;apply\u0026rdquo;) that calculates the result of a specific function:\ninfix operator |\u0026gt; { associativity left } func |\u0026gt; \u0026lt;A, R\u0026gt;(f: A -\u0026gt; R, x: A) -\u0026gt; R { return f(x) } Now, use it with curriedAddWithScale:\nlet result1 = curriedAddWithScale |\u0026gt; 1 |\u0026gt; 2 |\u0026gt; 3 let scaleMySum = curriedAddWithScale |\u0026gt; 1 |\u0026gt; 2 let result2 = scaleMySun |\u0026gt; 3  Still the same? Hold on, you could add some argument labels like this:\nlet result1 = curriedAddWithScale |\u0026gt; (op1: 1)\t// You could omit the label \u0026#34;op1\u0026#34; if you want |\u0026gt; (op2: 2)\t// You could omit the label \u0026#34;op2\u0026#34; if you want |\u0026gt; (scale: 3)\t// You could omit the label \u0026#34;scale\u0026#34; if you want Use with Apple Swift functions Have a look at the init methods of UIColor. How to get the right init function. We only want to curry this init method:\nUIImage.init(red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat) Try this:\nlet curriedColorInit = curry(UIColor.init(red:green:blue:alpha:)) let orangeWithAlpha = curriedColorInit |\u0026gt; 0.945 |\u0026gt; 0.353 |\u0026gt; 0.133 let orange1 = orangeWithAlpha |\u0026gt; 0.9 let orange2 = orangeWithAlpha |\u0026gt; 0.3 Refactor closure Suppose we have a function fetchData as follows:\nfunc fetchData(path: String, successfulHandler: NSData? -\u0026gt; Void, failedHandler: NSError? -\u0026gt; Void) { ... } I believe you have been a bit frustrated with this sort of functions because of the ugly caller like this:\nfetchData(\u0026#34;www.mysite.com\u0026#34;, successfulHandler: { data in // Handle success }, failedHandler: { error in // Handle failure }) or this\nfetchData(\u0026#34;www.mysite.com\u0026#34;, successfulHandler: { data in // Handle success }) { error in // Handle failure } The successfulHandler and failedHandler should have the same indent, right? Moreover, the syntax to write the path and successfulHandler in the same line makes us hard to read.\nNow, with the combination of curry and operator |\u0026gt; we could write it in such a readable manner like this:\nlet fetchDataWithHandlers = curry(fetchData) |\u0026gt; \u0026#34;www.mysite.com\u0026#34; fetchDataWithHandlers |\u0026gt; (successful: { data in // Handle success }) |\u0026gt; (failed: { error in // Handle failure })let curriedAnimate = curry(UIView.animateWithDuration(_:animations:completion:)) curriedAnimate |\u0026gt; (duration: 0.25) |\u0026gt; (animation: { _ in // Animation here }) |\u0026gt; (completion: nil) It seems better looking now!\nHave fun!\nThe playground could be found here\n","href":"/tech/swift-currying/","title":"Swift: Currying"},{"content":" There are a number of cases in which we would like to initialize an object with some parameters but what we currently have (i.e. these parameters), unfortunately, are Optional Type. For instance, we have a urlString with the type String? (or Optional), and we want to get a url from urlString.\nBasically, we expect to get a url of NSURL? (or Optional). If urlString == nil, the url should be nil as well.\nHowever, the initialization of NSURL requires a string of String (which is already unwrapped).\nclass NSURL { init?(string URLString: String) } Here comes a very popular way to deal with this type-incompatibility:\n// let urlString: String? = \u0026#34;www.myurl.com\u0026#34; if let urlString = urlString { let url = NSURL(string: urlString) // Do stuff } In case we wish to use the url outside the if-let block, it‚Äôs quite common that we make url mutable and assign its value inside the condition block.\n// let urlString: String? = \u0026#34;www.myurl.com\u0026#34; var url: NSURL? if let urlString = urlString { url = NSURL(string: urlString) } This looks acceptable but:\n A few lines of code should have not been added for such a circumstance like this The only reason to change url from immutable to mutable (from let ‚Ä¶ to var ‚Ä¶) is merely this type-incompatibility  Map is coming for the rescue Luckily, we have a function map on Optional. (If Swift does not support, we could define it :D). I am quite sure you also have used map on an Array a lot, right?\nFor the sake of better understanding, I removed some unnecessary keywords that are not directly relevant to this topic.\nenum Optional\u0026lt;Wrapped\u0026gt; { map\u0026lt;U\u0026gt;(f: (Wrapped) -\u0026gt; U) -\u0026gt; U? } Now, we could init an object with a parameter of Optional, like this:\n// let urlString: String? = \u0026#34;www.myurl.com\u0026#34; let url = urlString.map { NSURL(string: $0 } Of course we could use this tip with other functions apart from initializations\n// let urlString: String? = \u0026#34;www.myurl.com\u0026#34; let data = urlString.map { fetchDataFromPath($0 } // data: NSData? How about a function with 2 parameters? fetchDataFromPath(path: String, withToken: String) We can come up with the idea to turn a 2 optionals into an optional of Tuple. Lets define an *operator *\u0026lt;\u0026amp;\u0026gt; to combine 2 optionals\ninfix operator \u0026lt;\u0026amp;\u0026gt; { associativity left } func \u0026lt;\u0026amp;\u0026gt;\u0026lt;T, U\u0026gt; (left: Optional\u0026lt;T\u0026gt;, right: Optional\u0026lt;U\u0026gt;) -\u0026gt; Optional\u0026lt;(T, U)\u0026gt; { if let left = left, right = right { return (left, right) } return nil } Or we could define it in a more concise way using flatMap on Optional.\ninfix operator \u0026lt;\u0026amp;\u0026gt; { associativity left } func \u0026lt;\u0026amp;\u0026gt;\u0026lt;T, U\u0026gt; (left: Optional\u0026lt;T\u0026gt;, right: Optional\u0026lt;U\u0026gt;) -\u0026gt; Optional\u0026lt;(T, U)\u0026gt; { return left.flatMap { x in right.flatMap { y in (x, y) } } } And this is how we use it:\n// let urlString: String? = \u0026#34;www.myurl.com\u0026#34; // let token: String? = \u0026#34;token\u0026#34; let data = (urlString \u0026lt;\u0026amp;\u0026gt; token).map { fetchDataFromPath($0, withToken: $1) } Have fun!\n","href":"/tech/swift-optional-map/","title":"Swift: Optional ‚Äî map"},{"content":"Suy nghƒ© b√¢ng qu∆° nh·ªØng ng√†y t·∫øt \u0026amp; c·∫≠n t·∫øt B√≠nh Th√¢n\u0026hellip;\n\u0026hellip;\nC√≥ l·∫Ω m·ªôt trong nh·ªØng nh·ªØng ƒë·ªÅ t√†i ƒë∆∞·ª£c nh·∫Øc ƒë·∫øn nhi·ªÅu nh·∫•t nƒÉm nay l√† c√°i th·ªùi ti·∫øt l·∫°nh bu·ªët d·ªãp t·∫øt.\nT·ª´ ng√†y v·ªÅ t√¥i c√≥ ƒë·∫øm nh·ªØng l·∫ßn m·∫∑t tr·ªùi h·ª≠ng n·∫Øng nh∆∞ng con s·ªë ·∫•y c≈©ng ch∆∞a ƒë·∫øn s·ªë ƒë·ªët tr√™n m·ªôt ng√≥n tay. Tr·ªùi QN l√∫c 7h s√°ng v√† 12h tr∆∞a c≈©ng ch·∫≥ng kh√°c bi·ªát nhi·ªÅu, xam x√°m m√†u b√™ t√¥ng (c·ª° t√¥ng m√†u 0x666666). C√°i l·∫°nh len l·ªèi nh·ªØng ng√≥c ng√°ch, x√≥ x·ªânh t·ª´ gian nh√† ra ngo√†i ƒë∆∞·ªùng c√°i, l√†m cho khung c·∫£nh l√†ng qu√™ nh∆∞ m·ªôt b·ª©c tranh tƒ©nh v·∫≠t mang m√†u bu·ªìn. Ng∆∞·ªùi ta n√≥i c√°i l·∫°nh l√†m m·ªçi th·ª© tr·ªü n√™n ch·∫≠m l·∫°i, qu·∫£ th·∫≠t l√† ƒë√∫ng\n\u0026hellip;\nT·∫øt ƒë·∫øn r·ªìi ƒëi, h·ªØng h·ªù nh∆∞ nh√†nh hoa n·ªü r·ªìi l·∫°i t√†n, nh∆∞ v√≠ ti·ªÅn ƒë·∫ßy r·ªìi l·∫°i v∆°i\u0026hellip;\n ‚Äú\u0026hellip;\nXu√¢n ƒëang t·ªõi, nghƒ©a l√† xu√¢n ƒëang qua\nXu√¢n c√≤n non nghƒ©a l√† xu√¢n s·∫Ω gi√†\u0026hellip;‚Äù\n‚Äì V·ªôi v√†ng [Xu√¢n Di·ªáu]\n \u0026hellip;\nC≈©ng nh·ªØng ng∆∞·ªùi c≈© nh∆∞ng c√≥ v·∫ª nh∆∞ c√°i n·∫Øng gi√≥ c·ªßa mi·ªÅn Trung v√† n·∫Øng gi√≥ c·ªßa cu·ªôc s·ªëng ƒë√£ b√†o m√≤n s·ª± tr·∫ª trung tr√™n nh·ªØng khu√¥n m·∫∑t ·∫•y. R·ªìi s·∫Ω c√≥ m·ªôt ng√†y n√†o ƒë√≥, b·∫°n b√® m√¨nh c≈©ng nh√¨n v√†o m·∫∑t m√¨nh v√† t√¨m th·∫•y c√°i √Ω nghƒ© t∆∞∆°ng t·ª±.\n\u0026hellip;\nNh·ªõ nh·ªØng nƒÉm tr∆∞·ªõc c·ª© ƒë√∫ng l√∫c giao th·ª´a tr·ªü v·ªÅ khuya, ƒëi·ªán tho·∫°i c·ª© li√™n t·ª•c reo v√¨ c√≥ tin nh·∫Øn ƒë·∫øn. NƒÉm nay th√¨ kh√°c h·∫≥n, ch·ªâ nh·∫≠n ƒë√∫ng m·ªôt tin nh·∫Øn. C√≥ m·ªôt s·ª± chuy·ªÉn d·ªãch nh·∫π t·ª´ vi·ªác ch√∫c t·∫øt b·∫±ng SMS sang ch√∫c tr√™n Facebook üòÉ\n\u0026hellip;\nD·ª± ƒë·ªãnh ch·∫°y xe m√°y ƒëi ƒë√¢u ƒë√≥ ch∆°i xa nh∆∞ ƒê√† N·∫µng ho·∫∑c Quy Nh∆°n. Nh∆∞ng n·∫øu c√°i bu·ªët gi√° v·∫´n c·ª© n·∫±m ng·ªß ·ªü Qu·∫£ng Ng√£i nh∆∞ th·∫ø n√†y th√¨ b·ªÉ k√®o m·∫•t. Ch·∫°y xe ch∆∞a ƒë·∫øn n∆°i th√¨ ƒë√£ qu√©o c√†ng m·∫•t r·ªìi :))\n\u0026mdash; Qu·∫£ng Ng√£i\n","href":"/misc/tan-man-mung-1-tet-2016/","title":"T·∫£n m·∫°n m√πng 1 t·∫øt 2016"},{"content":"Link: https://www.youtube.com/watch?v=eyuNrm4VK2w\nƒê√¢y l√† m·ªôt b·ªô phim ho·∫°t h√¨nh d·ª±a tr√™n ti·ªÉu thuy·∫øt ‚ÄúFlatland: A Romance of Many Dimensions‚Äù c·ªßa Edwin Abbot. B·ªô phim n√†y v·ªÅ m·∫∑t k·ªπ x·∫£o th√¨ kh√¥ng c√≥ g√¨ ƒë√°ng k·ªÉ (n·∫øu kh√¥ng mu·ªën n√≥i l√† h∆°i x·∫•u), nh∆∞ng c√°i l√¥i cu·ªën ng∆∞·ªùi xem ch√≠nh l√† c√°i √Ω t∆∞·ªüng ƒë·ªôc ƒë√°o c·ªßa phim. ƒê√∫ng ra th√¨ l·ªùi khen n√†y n√™n d√†nh t·∫∑ng cho Abbot, t√°c gi·∫£ cu·ªën s√°ch.\n[1] B·ªô phim l·∫•y b·ªëi c·∫£nh m·ªôt v∆∞∆°ng qu·ªëc, l√† m·ªôt v√πng ƒë·∫•t ph·∫≥ng (m·∫∑t ph·∫≥ng ‚Äì theo thu·∫≠t ng·ªØ To√°n h·ªçc). Nh·ªØng c√¥ng d√¢n c·ªßa v∆∞∆°ng qu·ªëc l√† nh·ªØng ƒë·ªëi t∆∞·ª£ng h√¨nh h·ªçc ph·∫≥ng nh∆∞: h√¨nh vu√¥ng, h√¨nh l·ª•c gi√°c, h√¨nh tam gi√°c, h√¨nh tr√≤n\u0026hellip;\nB·ªô phim k·ªÉ v·ªÅ h√†nh tr√¨nh nh·∫≠n th·ª©c c·ªßa m·ªôt anh ch√†ng ‚Äúh√¨nh vu√¥ng‚Äù (g·ªçi l√† A-Square) khi bi·∫øt v√† ch·∫•p nh·∫≠n s·ª± t·ªìn t·∫°i c·ªßa ‚Äúkh√¥ng gian ba chi·ªÅu‚Äù. L√∫c b·∫•y gi·ªù ‚Äúchi·ªÅu th·ª© 3‚Äù c·ªßa kh√¥ng gian ƒë∆∞·ª£c xem l√† ƒëi·ªÅu c·∫•m k·ªµ trong v∆∞∆°ng qu·ªëc. B·∫•t k·ª≥ ai nh·∫Øc ƒë·∫øn n√≥ ƒë·ªÅu ƒë∆∞·ª£c xem l√† ‚Äúk·∫ª ngo·∫°i ƒë·∫°o‚Äù v√† ph·∫£i b·ªã thanh tr·ª´ng.\n[2] Tuy l√† m·ªôt th·∫ø gi·ªõi g·ªìm c√°c ƒë·ªëi t∆∞·ª£ng to√°n h·ªçc nh∆∞ng n√≥ m√¥ t·∫£ r·∫•t ch√¢n th·ª±c x√£ h·ªôi c·ªßa con ng∆∞·ªùi. T·ª´ nh·ªØng cu·ªôc chi·∫øn tranh gi·ªØa c√°c v∆∞∆°ng qu·ªëc, cho ƒë·∫øn nh·ªØng ƒë·ªãnh ki·∫øn v√† r√†o c·∫£n trong vi·ªác ch·∫•p nh·∫≠n m·ªôt t∆∞ t∆∞·ªüng m·ªõi.\n[3] M·ªôt t√¨nh ti·∫øt trong b·ªô phim m√† m√¨nh cho r·∫±ng ƒë·∫Øt gi√° nh·∫•t ch√≠nh l√† l√∫c A-Square nghƒ© ƒë·∫øn ‚Äúkh√¥ng gian 4 chi·ªÅu‚Äù. T∆∞ t∆∞·ªüng n√†y b·ªã A-Sphere (h√¨nh c·∫ßu) xem l√† m·ªôt suy nghƒ© v·ªõ v·∫©n v√¨ ch·∫≥ng c√≥ chi·ªÅu th·ª© 4 n√†o c·∫£. (A-Sphere l√† 1 c√¥ng d√¢n c·ªßa 1 v∆∞∆°ng qu·ªëc 3D ƒë√£ gi√∫p A-Square nh·∫≠n th·ª©c ƒë∆∞·ª£c chi·ªÅu th·ª© 3 c·ªßa kh√¥ng gian). ƒêi·ªÅu n√†y cho th·∫•y, ngay c·∫£ nh·ªØng hi·ªÉu bi·∫øt am t∆∞·ªùng nh·∫•t ƒë·ªÅu c√≥ th·ªÉ b·ªã th√°ch th·ª©c. Ranh gi·ªõi gi·ªØa c√°i ‚Äúv√¥ l√Ω‚Äú v√† c√°i ‚Äúv∆∞·ª£t xa th·ªùi ƒë·∫°i‚Äù ƒë√¥i l√∫c c≈©ng tr·ªü n√™n m·∫≠p m·ªù.\n[4] M√¨nh nh·ªõ nƒÉm l·ªõp 12, th·∫ßy Thanh D≈©ng c√≥ chia s·∫ª cho l·ªõp m·ªôt v√≠ d·ª• gi·ªëng nh∆∞ c√¢u chuy·ªán tr√™n:\n‚Äì Gi·∫£ s·ª≠ c√≥ m·ªôt ƒëi·ªÉm n·∫±m tr√™n 1 m·∫∑t ph·∫≥ng v√† b·ªã v√¢y k√≠n b·ªüi 1 ƒë∆∞·ªùng tr√≤n (t·ª©c ƒëi·ªÉm n√†y n·∫±m b√™n trong ƒë∆∞·ªùng tr√≤n). ƒêi·ªÉm n√†y kh√¥ng c√≥ c√°ch n√†o ƒëi t·ª´ trong ra ngo√†i ƒë∆∞·ªùng tr√≤n ho·∫∑c ng∆∞·ª£c l·∫°i. Nh∆∞ng ch√∫ng ta, ng∆∞·ªùi s·ªëng trong kh√¥ng gian 3 chi·ªÅu, c√≥ th·ªÉ di chuy·ªÉn ng√≥n tay t·ª´ trong ra ngo√†i m·ªôt c√°ch d·ªÖ d√†ng v√† ng∆∞·ª£c l·∫°i.\n‚Äì T∆∞∆°ng t·ª±, m·ªôt ng∆∞·ªùi (s·ªëng trong kh√¥ng gian 3D) kh√¥ng th·ªÉ chui v√†o ho·∫∑c tho√°t ra kh·ªèi m·ªôt c√°i l·ªìng k√≠n. Nh∆∞ng m·ªôt ng∆∞·ªùi s·ªëng trong kh√¥ng gian 4D c√≥ th·ªÉ l√†m ƒë∆∞·ª£c ƒëi·ªÅu ƒë√≥. C√≥ th·ªÉ bi·∫øn m·∫•t v√† xu·∫•t hi·ªán d·ªÖ nh∆∞ th·ªü.\nTh·∫ßy k·∫øt th√∫c c√¢u chuy·ªán nh∆∞ v·∫≠y nh∆∞ th·ªÉ cung c·∫•p m·ªôt g·ª£i √Ω ƒë·ªÉ t·ª´ng ƒë·ª©a chi√™m nghi·ªám theo c√°ch ri√™ng c·ªßa m√¨nh.\n[6] M·∫∑c d√π coi l·∫°i l·∫ßn 2 r·ªìi nh∆∞ng v·∫´n th·∫•y th√≠ch\u0026hellip; Ph·∫ßn k·∫øt b·ªô phim c√≥ ch√∫t kh√≥ hi·ªÉu nh·∫π @@.\n","href":"/misc/flatland-vung-dat-phang/","title":"Flatland (V√πng ƒë·∫•t ph·∫≥ng)"},{"content":"L∆∞u √Ω: ·ªû ƒë√¢y m√¨nh kh√¥ng ƒë·ªãnh h·ªá th·ªëng hay thu·∫≠t l·∫°i nh·ªØng g√¨ cu·ªën s√°ch n√≥i, m√† ch·ªâ n√™u ra nh·ªØng ƒëi·ªÅu t√¢m ƒë·∫Øc c·ªßa c√° nh√¢n sau khi ƒë·ªçc.\nTony Bu·ªïi S√°ng kh√¥ng c√≤n l√† c√°i t√™n xa l·∫° g√¨ v·ªõi c√°c b·∫°n tr·∫ª. M√¨nh c≈©ng l√† m·ªôt ng∆∞·ªùi r·∫•t th√≠ch phong c√°ch vi·∫øt c·ªßa d∆∞·ª£ng m·∫∑c d√π kh√¥ng th∆∞·ªùng xuy√™n ƒë·ªçc m·∫•y post c·ªßa d∆∞·ª£ng tr√™n fanpage.\nL√† t·∫≠p h·ª£p c√°c b√†i vi·∫øt ƒë∆∞·ª£c ch·ªçn l·∫°i ƒë·ªÉ xu·∫•t b·∫£n th√†nh s√°ch, cu·ªën ‚ÄúTr√™n ƒë∆∞·ªùng bƒÉng‚Äù c≈©ng c√≥ khuynh h∆∞·ªõng vi·∫øt v·ªõi n·ªôi dung v√† h√¨nh th·ª©c gi·ªëng nh∆∞ cu·ªën ‚ÄúCafe c√πng Tony‚Äù ƒë∆∞·ª£c xu·∫•t b·∫£n tr∆∞·ªõc ƒë√≥. V·ª´a d√≠ d·ªèm, h√†i h∆∞·ªõc v·ª´a th·∫•m th√≠a th√¥ng ƒëi·ªáp truy·ªÅn t·∫£i m·ªôt c√°ch nh·∫π nh√†ng v√† d·ªÖ ch·ªãu.\n[1] H·∫≥n ai c≈©ng bi·∫øt, cu·ªën s√°ch l√† t·∫≠p h·ª£p nh·ªØng m·∫©u chuy·ªán ƒë·ªùi th∆∞·ªùng, c√≥ ph·∫ßn th·∫≠t ‚Äì c√≥ ph·∫ßn h∆∞ c·∫•u, nh∆∞ng t·ª±u chung l√† th√¥ng tin h·ªØu √≠ch. V√¨ l√† t·∫≠p h·ª£p nh·ªØng m·∫©u chuy·ªán n√™n c√≥ th·ªÉ l·∫≠t h√∫ ho·∫° m·ªôt m·ª•c n√†o ƒë√≥ ƒë·ªçc, kh√¥ng nh·∫•t thi·∫øt ph·∫£i theo th·ª© t·ª± trang s√°ch. Nh∆∞ng c√≥ m·ªôt b·∫•t l·ª£i c·ªßa l·ªëi vi·∫øt n√†y, l√†: c√≥ th·ªÉ g√¢y c·∫£m gi√°c nh√†m nh√°n cho ng∆∞·ªùi ƒë·ªçc. Theo th·ª±c t·∫ø c√° nh√¢n m√¨nh th√¨ 1\u0026frasl;3 ƒë·∫ßu ti√™n c·ªßa cu·ªën s√°ch c√≥ c·∫£m gi√°c h∆°i gi·ªëng nhau. Nh∆∞ng 2\u0026frasl;3 c√≤n l·∫°i th√¨ m√¨nh th·∫•y th√∫ v·ªã, do t√¨m th·∫•y ƒë∆∞·ª£c s·ª± x√¢u chu·ªói v·ªõi 1\u0026frasl;3 ƒë·∫ßu ti√™n.\n[2] Ch·∫Øc ai c≈©ng nh·∫≠n th·∫•y Tony lu√¥n nh·∫Øc ƒëi nh·∫Øc l·∫°i ch·ªØ ‚Äúh√†o s·∫£ng‚Äù trong cu·ªën n√†y. H√†o s·∫£ng ‚Äì theo Tony ‚Äì ‚Äúƒë∆°n gi·∫£n l√† s·ª± cho ƒëi m√† kh√¥ng t√≠nh to√°n, l√† s·ª± bu√¥ng b·ªè ƒë·ªÉ l√†m l·∫°i t·ª´ ƒë·∫ßu. H√†o s·∫£ng l√† kh√¥ng tham lam, kh√¥ng √≠ch k·ª∑, kh√¥ng c√° nh√¢n ch·ªß nghƒ©a‚Äù. Theo c√° nh√¢n m√¨nh, ƒë√¢y l√† m·ªôt t·ª´ r·∫•t ki√™u v√† ƒë·∫Øt gi√°, nghe c≈©ng r·∫•t h√†o s·∫£ng :)).\n[3] M·ªôt t·ª´ kh√°c c≈©ng ƒë∆∞·ª£c nh·∫•n m·∫°nh nhi·ªÅu l·∫ßn l√† ‚Äúti·ªÉu n√¥ng‚Äù. C√≥ 3 m·∫´u chuy·ªán n√≥i v·ªÅ c√°i t∆∞ t∆∞·ªüng ti·ªÉu n√¥ng m√† m√¨nh th·∫•y hay, ƒë√≥ l√†: ‚ÄúB·ªánh to√°n l·ªõp m·ªôt‚Äù, ‚ÄúB·ªánh con ngh√©‚Äù v√† ‚ÄúCon c√≤ c·ªßa m·∫π‚Äù\u0026hellip; C√≥ nh·ªØng l√∫c trong ƒë·ªùi s·ªëng, m√¨nh g·∫∑p nh·ªØng tr∆∞·ªùng h·ª£p t∆∞∆°ng t·ª± m√† ch·∫≥ng bi·∫øt d√πng t·ª´ g√¨ ƒë·ªÉ m√¥ t·∫£, b√®n d√πng c·ª•m t·ª´ ‚Äút·∫ßm nh√¨n h·∫°n ch·∫ø‚Äù . Nh∆∞ng trong l√≤ng v·∫´n th·∫•y ch∆∞a tho·∫£ m√£n v√¨ n√≥ ch∆∞a ƒë√∫ng √Ω l·∫Øm. Gi·ªù th√¨ c√≥ t·ª´ th√≠ch h·ª£p cho nh·ªØng case ƒë√≥ r·ªìi :).\n[4] ‚ÄúC√° m·∫≠p th√¨ qu√¢y qu·∫ßn d∆∞·ªõi ƒë√°y s√¢u. C√° l√≤ng tong th√¨ nhao nhao tr√™n m·∫∑t n∆∞·ªõc‚Äù. M√¨nh th√≠ch c√°i l·ªëi suy nghƒ© theo ki·ªÉu h∆°i ‚Äúb·∫•t m√†ng s·ª± ƒë·ªùi‚Äù. C·∫ßn ƒë·ªÉ √Ω, quan s√°t nh∆∞ng kh√¥ng ƒë√°nh gi√°, quy ch·ª•p hay nh·∫£y c·∫´ng l√™n v√¨ m·ªôt th·ª© g√¨ ƒë√≥ x·∫•u xa, t·ªìi t·ªá. C·ª© ch·∫•p nh·∫≠n m·ªôt th·ª±c t·∫ø r·∫±ng nh∆∞ ƒë√¥i l√∫c ng∆∞·ªùi ta c√≥ suy nghƒ© ‚Äúti·ªÉu n√¥ng‚Äù, kh√¥ng c·∫ßn ƒë·∫∑t n·∫∑ng v·∫•n ƒë·ªÅ t√¨m ra c√°i n√†o ƒë√∫ng, c√°i n√†o sai. ƒê·ªÉ gi√†nh th·ªùi gian v√† s·ª± quan t√¢m c·ªßa m√¨nh v√†o nh·ªØng vi·ªác c√≥ √≠ch h∆°n.\n[5] Tony c√≥ cung c·∫•p m·ªôt s·ªë th√¥ng tin h·ªØu √≠ch v·ªÅ l·ªãch s·ª≠, vƒÉn ho√° c·ªßa c√°c n∆∞·ªõc kh√°c nh∆∞ ch·ªß nghƒ©a ho√†n h·∫£o c·ªßa n∆∞·ªõc ƒê·ª©c, vi·ªác h·ªçc c·ªßa ng∆∞·ªùi Nh·∫≠t, tinh th·∫ßn d√¢n t·ªôc c·ªßa ng∆∞·ªùi H√†n Qu·ªëc\u0026hellip; Nh·ªØng c√°i n√†y ch·∫Øc kh√¥ng ph·∫£i xu·∫•t ph√°t t·ª´ s·ª± h∆∞ c·∫•u v√† tr√≠ t∆∞·ªüng t∆∞·ª£ng c·ªßa d∆∞·ª£ng ƒë√¢u.\n[6] ƒê·ªçc s√°ch c·ªßa Tony th·∫•y h·ªçc ƒë∆∞·ª£c Ti·∫øng Vi·ªát kh√° nhi·ªÅu. C√≥ nhi·ªÅu t·ª´, c·ª•m t·ª´, th√†nh ng·ªØ ƒë∆∞·ª£c d√πng r·∫•t s·ªëng ƒë·ªông.\n[7] C√≥ nh·ªØng ƒëo·∫°n ƒë·ªçc ph√° l√™n c∆∞·ªùi v√¨ s·ª± d√≠ d·ªèm c·ªßa Tony c≈©ng kh√¥ng k√©m ch·ªã chi ng∆∞·ªùi Thanh Ho√° m√† thi Th√°ch Th·ª©c danh h√†i nh·∫≠n ƒë∆∞·ª£c 100 tri·ªáu. Ph·∫£i h√†o s·∫£ng nh∆∞ ch·ªâ nghe ch∆∞a :))\nP/s: Xong cu·ªën s√°ch ƒë·∫ßu ti√™n c·ªßa nƒÉm 2016.\n","href":"/misc/review-sach-tren-duong-bang/","title":"Review s√°ch: Tr√™n ƒë∆∞·ªùng bƒÉng"},{"content":"","href":"/tags/book-review/","title":"book-review"},{"content":"","href":"/tags/reading/","title":"reading"},{"content":"NƒÉm 2 ƒê·∫°i h·ªçc, tui c√≥ h·ªçc m√¥n C∆° s·ªü tr√≠ tu·ªá nh√¢n t·∫°o. Bu·ªïi h·ªçc ƒë·∫ßu ti√™n, th·∫ßy gi√°o c√≥ n√™u ra m·ªôt c√¢u h·ªèi nh∆∞ sau: ‚Äút√¨m v√† ki·∫øm kh√°c nhau nh∆∞ th·∫ø n√†o?‚Äù. S·ª± th·∫≠t l√† kh√¥ng c√≥ ai trong s·ªë l≈© sinh vi√™n t·ª•i tui tr·∫£ l·ªùi c√¢u h·ªèi ƒë√≥. C√≥ th·ªÉ c√≥ ƒë·ª©a bi·∫øt c√¢u tr·∫£ l·ªùi hay √≠t nh·∫•t c√≥ m·ªôt nh·∫≠n ƒë·ªãnh n√†o ƒë√≥, c√≤n tui th√¨ m·∫∑t th·ªôn ra, gi·ªëng nh∆∞ khi b·ªã h·ªèi v·ªÅ ƒë·ªãnh nghƒ©a c·ªßa nh·ªØng kh√°i ni·ªám tr·ª´u t∆∞·ª£ng ki·ªÉu nh∆∞: ‚Äút√¨nh y√™u l√† g√¨?‚Äù, ‚Äú√Ω th·ª©c l√† g√¨?‚Äù.\n·ªû ƒë√¢y, thu·∫≠t ng·ªØ ti·∫øng Anh t∆∞∆°ng ·ª©ng c·ªßa ‚Äút√¨m‚Äù v√† ‚Äúki·∫øm‚Äù l√† ‚Äúfind‚Äù v√† ‚Äúsearch‚Äù. S·ª± phi√™n d·ªãch thu·∫≠t ng·ªØ n√†y mang t√≠nh c√° nh√¢n, nh∆∞ng c·ªët y·∫øu l√† tui mu·ªën so s√°nh s·ª± kh√°c nhau gi·ªØa find v√† search.\nM·ªôt s·ªë √Ω ki·∫øn v·ªÅ s·ª± kh√°c nhau nh∆∞ sau:\n Search: ta kh√¥ng bi·∫øt tr∆∞·ªõc li·ªáu ƒë·ªëi t∆∞·ª£ng ƒë√≥ c√≥ t·ªìn t·∫°i hay kh√¥ng (trong m·ªôt ph·∫°m vi kh√¥ng gian ‚Äì th·ªùi gian n√†o ƒë√≥). Find: ta bi·∫øt tr∆∞·ªõc v·ªÅ s·ª± t·ªìn t·∫°i c·ªßa ƒë·ªëi t∆∞·ª£ng.  VD: Search: ki·∫øm ng∆∞·ªùi y√™u, ki·∫øm tr·∫ª l·∫°c. M√¨nh kh√¥ng bi·∫øt ƒë∆∞·ª£c ƒë·ª©a tr·∫ª b·ªã l·∫°c ƒëang ·ªü trong qu·∫≠n/huy·ªán n√†y hay kh√¥ng. VD: Find: t√¨m l·∫°i cu·ªën s√°ch Harry Potter m√† b·∫°n ƒë√£ c·∫•t tr√™n k·ªá s√°ch. M√¨nh bi·∫øt ch·∫Øc ch·∫Øn l√† n√≥ c√≥ tr√™n k·ªá s√°ch, nh∆∞ng kh√¥ng nh·ªõ n√≥ n·∫±m ·ªü v·ªã tr√≠ n√†o.  Search: ta kh√¥ng c√≥ m·ªôt ƒë·ªëi t∆∞·ª£ng m·∫´u, ta ch·ªâ c√≥ c√°c ti√™u ch√≠. Find: ta c√≥ h·∫≥n m·ªôt ƒë·ªëi t∆∞·ª£ng m·∫´u.  VD: Search: t√¨m ra nh·ªØng ng∆∞·ªùi trong l·ªõp h·ªçc c√≥ chi·ªÅu cao tr√™n 1m70. VD: Find: t√¨m ra th·∫±ng Nguy·ªÖn Nh·∫≠t Nam, MSSV: 101010.  Search: k·∫øt qu·∫£ l√† m·ªôt danh s√°ch (list) c√°c ƒë·ªëi t∆∞·ª£ng. Find: k·∫øt qu·∫£ tr·∫£ v·ªÅ th∆∞·ªùng l√† m·ªôt ƒë·ªëi t∆∞·ª£ng nh·∫•t ƒë·ªãnh n√†o ƒë√≥.  ·ªû ƒë√¢y tui kh√¥ng ƒë·ªãnh ƒë∆∞a ra m·ªôt ƒë√°p √°n ch√≠nh x√°c nh·∫•t cho c√¢u h·ªèi n√†y? M√† ch·ªâ mu·ªën lu·∫≠n v·ªÅ c√°c v·∫•n ƒë·ªÅ linh tinh.\n\u0026hellip;\u0026hellip;\n[1] Th·ª±c t·∫ø th√¨ trong vƒÉn n√≥i ti·∫øng Vi·ªát ng∆∞·ªùi ta √≠t d√πng t·ª´ ‚Äúki·∫øm‚Äù m√† thay v√†o ƒë√≥ d√πng t·ª´ ‚Äút√¨m ki·∫øm‚Äù. S·ª± thay th·∫ø n√†y v√¥ h√¨nh chung l√†m cho s·ª± kh√°c bi·ªát gi·ªØa ‚Äút√¨m‚Äù v√† ‚Äúki·∫øm‚Äù ƒë√£ kh√¥ng r√µ r√†ng, ng√†y c√†ng kh√¥ng r√µ r√†ng h∆°n. Th·∫≠m ch√≠ ng∆∞·ªùi ta c√≤n l·∫°m d·ª•ng t·ª´ ‚Äút√¨m ki·∫øm‚Äù nh∆∞ m·ªôt s·ª± thay th·∫ø hoa mƒ© v·ªÅ m·∫∑t ng√¥n t·ª´ cho c·∫£ 2 thu·∫≠t ng·ªØ ‚Äút√¨m‚Äù v√† ‚Äúki·∫øm‚Äù.\n[2] S·ª± kh√°c nhau gi·ªØa 2 kh√°i ni·ªám n√†o ƒë√≥ ƒë∆∞·ª£c nh·∫≠n th·ª©c th√¥ng qua t∆∞ duy c·ªßa con ng∆∞·ªùi. Tuy nhi√™n t∆∞ duy l√† m·ªôt ƒë·ªëi t∆∞·ª£ng tr·ª´u t∆∞·ª£ng. ƒê·ªÉ nh·∫≠n th·ª©c ƒë∆∞·ª£c, n√≥ ph·∫£i ƒë∆∞·ª£c th·ªÉ hi·ªán th√¥ng qua m·ªôt h√¨nh th√°i n√†o ƒë√≥. V√† ng√¥n ng·ªØ ch√≠nh l√† h√¨nh th√°i ph·ªï bi·∫øn nh·∫•t c·ªßa t∆∞ duy. (Ng√¥n ng·ªØ ·ªü ƒë√¢y ƒë∆∞·ª£c hi·ªÉu l√† t·∫≠p h·ª£p nh·ªØng k√Ω hi·ªáu, ch·ªØ c√°i, c√¢u t·ª´ m√† khi gh√©p l·∫°i nhau ch√∫ng th·ªÉ hi·ªán m·ªôt √Ω nghƒ©a n√†o ƒë√≥). Ch·∫±ng h·∫°n, ƒë·ªÉ ng∆∞·ªùi kh√°c hi·ªÉu ƒë∆∞·ª£c b√†i to√°n (v·∫•n ƒë·ªÅ) m√† m√¨nh g·∫∑p ph·∫£i, ta th∆∞·ªùng hay di·ªÖn ƒë·∫°t b√†i to√°n (v·∫•n ƒë·ªÅ) ƒë√≥ th√¥ng qua l·ªùi n√≥i ho·∫∑c ch·ªØ vi·∫øt.\nDo ƒë√≥ s·ª± l·∫•p li·∫øm trong ng√¥n ng·ªØ c≈©ng d·∫´n ƒë·∫øn s·ª± l·∫•p li·∫øm trong t∆∞ duy. ƒê√¢y l√† l√Ω do t·∫°i sao nh·ªØng t√†i li·ªáu khoa h·ªçc ng∆∞·ªùi ta th∆∞·ªùng d√πng t·ª´ v·ªõi ƒë·ªô chu·∫©n x√°c cao, √≠t t·ª´ nh·∫≠p nh·∫±ng, t·ªëi nghƒ©a.\n[3] V√¨ ƒë·∫∑c th√π ng√¥n ng·ªØ c·ªßa c√°c qu·ªëc gia kh√°c nhau n√™n m·ª©c ƒë·ªô ch√≠nh x√°c c·ªßa vi·ªác di·ªÖn t·∫£ m·ªôt kh√°i ni·ªám trong c√°c ng√¥n ng·ªØ c≈©ng kh√°c nhau. Ch·∫≥ng h·∫°n trong ti·∫øng Vi·ªát ng∆∞·ªùi ta c√≥ th·ªÉ gh√©p t·ª´ ‚Äút√¨m‚Äù v√† ‚Äúki·∫øm‚Äù th√†nh t·ª´ ‚Äút√¨m ki·∫øm‚Äù, nh∆∞ng trong ti·∫øng Anh ng∆∞·ªùi ta kh√¥ng th·ªÉ gh√©p t·ª´ ‚Äúfind‚Äù v√† ‚Äúsearch‚Äù l·∫°i th√†nh t·ª´ ‚Äúfind search‚Äù hay ‚Äúsearch find‚Äù. Nh√¨n r·ªông h∆°n, ta th·∫•y r·∫±ng c√°c ng√¥n ng·ªØ kh√¥ng ƒë·ªìng nh·∫•t trong vi·ªác di·ªÖn t·∫£ kh√°i ni·ªám, v√† do ƒë√≥ c≈©ng kh√¥ng ƒë·ªìng nh·∫•t trong vi·ªác m√¥ t·∫£ t∆∞ duy con ng∆∞·ªùi. S·ª± phi√™n d·ªãch gi·ªØa c√°c ng√¥n ng·ªØ, v·ªÅ m·∫∑t b·∫£n ch·∫•t, kh√¥ng ph·∫£i l√† m·ªôt song √°nh (hay ch∆∞a ch·∫Øc th·ªÉ hi·ªán s·ª± t∆∞∆°ng ƒë∆∞∆°ng). Do ƒë√≥, n·ªó l·ª±c phi√™n d·ªãch sang c√°c ng√¥n ng·ªØ kh√°c c√≥ th·ªÉ k√®m theo s·ª± m·∫•t m√°t ho·∫∑c thay ƒë·ªïi th√¥ng tin. ƒê√¢y c≈©ng l√† l√Ω do v√¨ sao ng∆∞·ªùi ta khuy√™n n√™n ƒë·ªçc s√°ch nguy√™n b·∫£n thay v·ªã ƒë·ªçc s√°ch d·ªãch.\nTh·∫•y b·∫Øt ƒë·∫ßu n√≥i x√†m r·ªìi‚Ä¶\n","href":"/reasoning/tap-luan-tiem-vs-kiem/","title":"T·∫°p lu·∫≠n: t√¨m vs. ki·∫øm"},{"content":"","href":"/tags/logic/","title":"logic"},{"content":"One day, a piece of cake meant for Eric went missing. His parents, Mr. and Mrs. Tan, suspected that one of his siblings ate the piece of cake and so questioned them. Here were their answers:\nAlfred said, ‚ÄúIt wasn‚Äôt Charles. It was Darius.‚Äù\nBrenda said, ‚ÄúIt wasn‚Äôt Darius. It was Alfred.‚Äù\nCharles said, ‚ÄúIt wasn‚Äôt Brenda. It was Darius.‚Äù\nDarius said, ‚ÄúIt wasn‚Äôt Alfred. It wasn‚Äôt Charles.‚Äù\nExactly four of the eight statements were true. Who ate the piece of cake?\nTr√≠ch: https://brilliant.org/problems/greedy-pig-detective-you-have-a-harder-time-now\n\nƒê·ªÉ ƒë∆°n gi·∫£n, ta ƒë·∫∑t t√™n c√°c m·ªánh ƒë·ªÅ nh∆∞ sau:\nA = ‚ÄúIt was Charles‚Äù ‚Äì\u0026gt; ‚ÄúIt wasn‚Äôt Charles‚Äù = not(A) (ph·ªß ƒë·ªãnh c·ªßa A)\nB = ‚ÄúIt was Darius‚Äù ‚Äì\u0026gt; ‚ÄúIt wasn‚Äôt Darius‚Äù = not(B)\nC = ‚ÄúIt was Alfred‚Äù ‚Äì\u0026gt; ‚ÄúIt wasn‚Äôt Alfred‚Äù = not\u0026copy;\nD = ‚ÄúIt was Brenda‚Äù ‚Äì\u0026gt; ‚ÄúIt wasn‚Äôt Brenda‚Äù = not(D)\n·ªû ƒë√¢y, trong 4 m·ªánh ƒë·ªÅ A, B, C, D, ch·ªâ c√≥ 1 m·ªánh ƒë·ªÅ ƒë√∫ng v√¨ ch·ªâ c√≥ m·ªôt ng∆∞·ªùi ƒë√£ ƒÉn mi·∫øng b√°nh.\nTheo ƒë·ªÅ, 4 trong t·∫≠p 8 m·ªánh ƒë·ªÅ sau l√† ƒë√∫ng, 4 m·ªánh ƒë·ªÅ c√≤n l·∫°i l√† sai:\nS = { not(A), B, not(B), C, not(D), B, not\u0026copy;, not(A) }\nS c√≥ th·ªÉ chia th√†nh 2 t·∫≠p con:\nS1 = { B, not(B), C, not\u0026copy; }\nS2 = { not(A), not(A), not(D), B }\nD·ªÖ d√†ng nh·∫≠n th·∫•y, t·∫≠p S1 c√≥ ƒë√∫ng 2 m·ªánh ƒë·ªÅ ƒë√πng v√† 2 m·ªánh ƒë·ªÅ sai. Do ƒë√≥ t·∫≠p S2 c≈©ng ph·∫£i c√≥ ƒë√∫ng 2 m·ªánh ƒë·ªÅ ƒë√∫ng, 2 m·ªánh ƒë·ªÅ sai.\nNgo√†i ra, not(A) v√† not(A) c√πng ch√¢n tr·ªã (c√πng ƒë√∫ng ho·∫∑c c√πng sai)‚Äì\u0026gt; not(D) v√† B c≈©ng c√πng ch√¢n tr·ªã.\nV√¨ not(D) v√† B c√≥ c√πng ch√¢n tr·ªã n√™n 1 trong 2 m·ªánh ƒë·ªÅ B, D s·∫Ω c√≥ 1 m·ªánh ƒë·ªÅ ƒë√∫ng, 1 m·ªánh ƒë·ªÅ sai. Suy ra, A kh√¥ng th·ªÉ ƒë√∫ng (theo ƒëi·ªÅu ki·ªán ·ªü tr√™n)\n‚Äì\u0026gt; not(A) = ƒê√∫ng\n‚Äì\u0026gt; not(D) = B = Sai ‚Äì\u0026gt; D = ƒê√∫ng\n‚Äì\u0026gt; Brenda l√† ng∆∞·ªùi ƒë√£ ƒÉn mi·∫øng b√°nh.\n","href":"/reasoning/dong-nao-who-ate-the-cake/","title":"ƒê·ªông n√£o: Who ate the cake?"},{"content":"C√≥ l·∫Ω ai c≈©ng ƒë·ªÅu c√≥ 1 ch√∫t k·ª∑ ni·ªám nho nh·ªè v·ªõi m∆∞a. T√¥i c≈©ng kh√¥ng ph·∫£i m·ªôt ngo·∫°i l·ªá\u0026hellip;\nH√¥m nay tr·ªùi m∆∞a to. Tr√™n ƒë∆∞·ªùng ch·∫°y v·ªÅ nh√†, t√¥i nh·ªõ ƒë·∫øn Qu·∫£ng Ng√£i.\nT√¥i cho r·∫±ng Qu·∫£ng Ng√£i n√≥i ri√™ng, v√† mi·ªÅn trung n√≥i chung, c√≥ kh√≠ h·∫≠u kh·∫Øc nghi·ªát h∆°n 1 ch√∫t so v·ªõi S√†i G√≤n. Ri√™ng v·ªÅ m√πa m∆∞a th√¨ Qu·∫£ng Ng√£i c√≥ 2 ti·∫øt m∆∞a ƒëi·ªÉn h√¨nh: m∆∞a ‚Äúgi√¥ng‚Äù t·ª´ ƒë·∫ßu h·∫° ƒë·∫øn t·∫ßm th√°ng 8 v√† m∆∞a ‚Äúd·∫ßm‚Äù t·ª´ kho·∫£ng th√°ng 11 ƒë·∫øn c·∫≠n t·∫øt. M√† c√≥ l·∫Ω, ng∆∞·ªùi d√¢n x·ª© Qu·∫£ng, ai ƒëi xa c≈©ng kh√¥ng th·ªÉ n√†o qu√™n c√°i c∆°n m∆∞a d·∫ßm k√©o d√†i su·ªët th√°ng ƒë∆∞·ª£c.\n\u0026hellip;\nƒê√≥ l√† c∆°n m∆∞a l·∫•t ph·∫•t, nh·∫π h·∫°t. Th∆∞·ªùng th√¨ b·ªçn t√¥i r·∫•t gh√©t th·ªÉ lo·∫°i m∆∞a n√†y. ƒê∆°n gi·∫£n v√¨ n√≥ kh√¥ng ƒë√°ng ƒë·ªÉ ph·∫£i m·∫∑c √°o m∆∞a. M·∫∑c v√†o th√¨ n√≥ng n·ª±c, m√† kh√¥ng m·∫∑c th√¨ ƒë·∫°p xe ƒë·∫øn tr∆∞·ªùng th·∫ø n√†o c≈©ng ∆∞·ªõt √°o s∆° s∆°, r·∫•t kh√≥ ch·ªãu. Nh∆∞ng n√≥ l·ª£i h·∫°i ·ªü ch·ªó c·ª© √¢m ·ªâ su·ªët, ph·∫£i ƒë·∫øn v√†i ng√†y m·ªõi d·ª©t. Nhi·ªÅu khi t√¥i ch·∫≥ng ph√¢n bi·ªát n·ªói bu·ªïi s√°ng v√† bu·ªïi chi·ªÅu. Nh√¨n ra ngo√†i ch·ªâ to√†n th·∫•y m√†u x√°m x·ªãt. M·ªôt s·ª± b·ªÅn b·ªâ ƒë·∫øn n√£o n·ªÅ!\n\u0026hellip;\nƒê√¥i l√∫c ƒë√≥ c≈©ng l√† nh·ªØng c∆°n m∆∞a d·∫ßm, kh√¥ng l·∫•t ph·∫•t nh∆∞ng c≈©ng kh√¥ng n·∫∑ng h·∫°t. T√¥i ƒëo√°n r·∫±ng t·ª•i h·ªçc sinh ch·∫Øc kh√¥ng qu√™n th·ªÉ lo·∫°i m∆∞a n√†y. T√¥i c√≤n nh·ªõ h·ªìi ƒë√≥ h·ªçc c·∫•p 2, c·ª© m·ªói m√πa m∆∞a ƒë·∫øn l√† tr√™n th√†nh c·ª≠a, c√°nh c·ª≠a ƒë·ªÅu treo v·∫Øt v·∫ªo ƒë·ªß th·ªÉ lo·∫°i √°o m∆∞a xanh, ƒë·ªè, t√≠m, v√†ng, ch·∫•m bi\u0026hellip; M·ªói l·∫ßn mu·ªën ƒëi ƒë√¢u qua ph√≠a b√™n kia s√¢n tr∆∞·ªùng, l√† c·ª© 1 c√°i √°o m∆∞a che c·∫£ ƒë√°m bƒÉng qua s√¢n tr∆∞·ªùng. ƒê·ª©a x√¥ ƒë·ª©a ƒë·∫©y, c∆∞·ªùi r√¥m r·∫£.\n\u0026hellip;\nƒê·ªçc ƒë∆∞·ªùng t√¥i ƒëi h·ªçc c√≥ 1 con s√¥ng nh·ªè t√™n l√† s√¥ng B·∫øn ƒê√°. M√πa m∆∞a d·∫ßm √πa v·ªÅ, m·ªói l·∫ßn ƒë·∫°p xe ƒëi h·ªçc t√¥i ƒë·ªÅu d√≤m xem n∆∞·ªõc s√¥ng d√¢ng l√™n cao bao nhi√™u, ch·∫£y m·∫°nh kh√¥ng, v√† ∆∞·ªõc t√≠nh xem s·∫Ω l·ª•t hay kh√¥ng. N·∫øu l·ª•t th√¨ s·∫Ω c√≥ nhi·ªÅu tr√≤ vui. √çt nh·∫•t l√† s·∫Ω ƒë∆∞·ª£c ngh·ªâ h·ªçc.\n\u0026hellip;\nM∆∞a lu√¥n g·ª£i nh·ªõ l·∫°i trong m·ªói ch√∫ng ta m·ªôt k·ª∑ ni·ªám n√†o ƒë√≥. ƒê·ªëi v·ªõi m·ªôt s·ªë ng∆∞·ªùi, ƒë√≥ l√† 1 c√¢u chuy·ªán t√¨nh l√£ng m·∫°n d∆∞·ªõi tr·ªùi m∆∞a. M·ªôt s·ªë kh√°c, l√† nh·ªØng l·∫ßn cu·ªôn m√¨nh v√†o chƒÉn m·ªôt c√°ch s·∫£ng kho√°i. Nh∆∞ng ƒë·ªëi v·ªõi t√¥i, ƒë√≥ l√† h√¨nh ·∫£nh qu√™ h∆∞∆°ng! C√≥ ch√∫t bu·ªìn, c√≥ ch√∫t lam l≈©!\nhttp://mp3.zing.vn/album/Tinh-Khuc-Chieu-Mua-Vinh-Tam/ZWZ9AIF0.html?st=11\n","href":"/misc/chuyen-mua/","title":"Chuy·ªán m∆∞a"},{"content":"Ch√∫ng ta th∆∞·ªùng hay ƒë∆∞·ª£c khuy√™n r·∫±ng n√™n c√≥ 1 cu·ªën s·ªï ghi ch√∫ b√™n m√¨nh ph√≤ng khi c√≥ 1 √Ω t∆∞·ªüng r·ªì d·∫°i n√†o ch·ª£t ƒë·∫øn. T√¥i c≈©ng ƒë√£ theo l·ªùi khuy√™n ·∫•y, c≈©ng c√≥ cu·ªën s·ªï c·ªßa ri√™ng m√¨nh, m√† th·∫≠t ra l√† nhi·ªÅu cu·ªën s·ªï.\nT√¥i l√† m·ªôt ng∆∞·ªùi chu·ªông ghi ch√©p. Th·∫≠m ch√≠ t√¥i ghi ch√©p c·∫£ nh·ªØng c√¢u ƒë√πa c·ªßa ng∆∞·ªùi kh√°c\u0026hellip; N·∫øu ai ƒë√£ t·ª´ng m∆∞·ª£n t·∫≠p gi·∫£i t√≠ch B2 c·ªßa t√¥i ·∫Øt h·∫≥n v·∫´n c√≤n b·∫Øt g·∫∑p m·∫•y c√¢u n√≥i b·∫•t h·ªß c·ªßa th·∫ßy Vi√™m: ‚Äúabc l√† con g√†, xyz l√† con ch√≥, kh√¥ng th·ªÉ so s√°nh g√† ‚Äì ch√≥ v·ªõi nhau ƒë∆∞·ª£c‚Äù. Hay c√≥ nhi·ªÅu l√∫c t√¥i ƒë·ªçc s√°ch c√≥ g√¨ kh√≥ hi·ªÉu t√¥i c≈©ng l·∫•y b√∫t d√°nh d·∫•u h·ªèi k√®m theo m·∫•y c·ª•m t·ª´ nh∆∞: ‚Äúk·ª≥ v·∫≠y ta?‚Äù, ‚Äúhok hi·ªÉu g√¨ h·∫øt tr·ªùi!‚Äù.\nK·ªÉ t·ª´ khi h·ªçc xong AYP, t√¥i s·∫Øm cho m√¨nh m·ªôt cu·ªën s·ªï k·∫ø ho·∫°ch tu·∫ßn. K√®m theo ƒë√≥ l√† 1 cu·ªën kh√°c g·ªçi l√† ‚Äúnh·∫≠t k√Ω‚Äù. T√¥i l∆∞u gi·ªØ trong ƒë√≥ nhi·ªÅu th·ª©, ngay c·∫£ nh·ªØng quan s√°t nh·ªè nh·∫∑t nh·∫•t. ƒê√¥i khi ch·ªâ ng·∫Øn g·ªçn, x√∫c t√≠ch nh∆∞: ‚ÄúH√¥m nay ch·∫°y tr√™n ƒë∆∞·ªùng Nguy·ªÖn Th·ªã Minh Khai, nghe m√πi c·ªè m·ªõi c·∫Øt th∆°m ng·∫°t ng√†o, l√†m m√¨nh nh·ªõ ƒë·∫øn qu√™ nh√†‚Äù\u0026hellip; ƒê√¥i khi l·∫°i d√†i l√™ th√™ nh∆∞ nghe ai ƒë√≥ than th·ªü, k·ªÉ chuy·ªán ƒë·ªùi. R·ªìi cu·ªën s·ªï c≈©ng ƒë·∫ßy. T√¥i ƒëi nh√† s√°ch sƒÉn t√¨m nh·ªØng cu·ªën m·ªõi. Th√∫ th·∫≠t l√† vi·ªác c√≥ trong tay nh·ªØng cu·ªën s·ªï n·∫±m v·ª´a l√≤ng b√†n tay hay nh·ªØng cu·ªën c√≥ gi·∫•y m√†u ng·∫£ v√†ng nh√¨n c·ªï c·ªï\u0026hellip; mang l·∫°i cho t√¥i m·ªôt ni·ªÅm h∆∞ng ph·∫•n l·∫° l√πng.\nTh·∫≠t ra k·ªπ nƒÉng ghi ch√∫ l√† m·ªôt ƒë·ªÅ t√†i ƒë∆∞·ª£c thi√™n h·∫° khai th√°c kh√° l√¢u v√† hi·ªáu qu·∫£. H·ªá qu·∫£, hi·ªán nay ƒë√£ c√≥ r·∫•t nhi·ªÅu th·ªÉ lo·∫°i ghi ch√∫, nhi·ªÅu thi·∫øt b·ªã, ph·∫ßn m·ªÅm gi√∫p cho ng∆∞·ªùi s·ª≠ d·ª•ng c√≥ th·ªÉ ghi ch√∫ d·ªÖ d√†ng, ti·ªán d·ª•ng. Nh∆∞ng ƒë·ªëi v·ªõi t√¥i, ghi ch√∫ theo c√°ch c·ªï ƒëi·ªÉn, v·ªõi 1 cu·ªën s·ªï ghi ch√∫ v·∫´n ƒëem l·∫°i nh·ªØng tr·∫£i nghi·ªám kh√°c bi·ªát. Nh√¨n nh·ªØng d√≤ng ch·ªØ nghu·ªách ngo·∫°t, kho·∫£ng c√°ch d√≤ng, vi·∫øt nghi√™ng, d·ªçc, v·∫Ω v·ªùi\u0026hellip; Style c·ªßa m·ªói ng∆∞·ªùi v·∫´n l√† duy nh·∫•t!\n[M·ªôt ch√∫t lu·∫≠n]\nT·∫°i sao ch√∫ng ta c·∫ßn m·ªôt cu·ªën s·ªï? C√≥ m·ªôt th·ª±c t·∫ø l√†: tr√≠ nh·ªõ con ng∆∞·ªùi ƒë·ªÅu c√≥ gi·ªõi h·∫°n. Qu√™n l√† b·∫£n nƒÉng c·ªßa con ng∆∞·ªùi ƒë·ªÉ nh·ªõ ƒë∆∞·ª£c nhi·ªÅu th·ª© kh√°c quan tr·ªçng h∆°n. N√™n ta ƒë·ªÅu c·∫ßn 1 ph·ª• t√°, nh·∫Øc nh·ªü nh·ªØng g√¨ ta ƒë√£ qu√™n. S·ªï ghi ch√∫ ƒë∆∞·ª£c sinh ra ƒë√∫ng v·ªõi m·ª•c ƒë√≠ch nh∆∞ v·∫≠y.\nS·ªï, n√≥i 1 c√°ch v√≠ von, c√≤n l√† m·ªôt m·ªôt ng∆∞·ªùi b·∫°n, lu√¥n s·∫µn s√†ng l·∫Øng nghe v√¥ ƒëi·ªÉu ki·ªán. Kh√¥ng lu·∫≠n b√†n, ph√°n x√©t cho d√π nh·ªØng g√¨ ƒë∆∞·ª£c ghi v√†o n√≥ l√† nh·ªØng t·ªôi l·ªói x·∫•u xa. Nh·ªØng l√∫c g·∫∑p nh·ªØng kh√≥ khƒÉn trong cu·ªôc s·ªëng, con ng∆∞·ªùi ta hay c√≥ nhi·ªÅu chuy·ªán mu·ªën gi·∫£i b√†y. C√≥ ng∆∞·ªùi t√¨m ƒë·∫øn b·∫°n b√® t√¢m s·ª±. C√≥ ng∆∞·ªùi t√¨m ƒë·∫øn n∆°i n√†o ƒë√≥ x·∫£ stress. Nh∆∞ng c≈©ng c√≥ ng∆∞·ªùi ch·ªâ c·∫ßn t√¨m ƒë·∫øn b·∫•t k·ªÉ c√°i g√¨ ƒë·ªÉ cho con ch·ªØ c√≥ th·ªÉ m·∫∑c s·ª©c lƒÉn x·∫£.\nNh∆∞ng b·∫°n bi·∫øt kh√¥ng? Kh√¥ng ph·∫£i c√°i n√†o ƒë√£ vi·∫øt ra gi·∫•y ƒë·ªÅu s·∫Ω ƒë∆∞·ª£c ƒë·ªçc l·∫°i. T√¥i cho r·∫±ng trong s·ªë nh·ªØng nh·ªØng th·ª© t·∫°p nham ch√∫ng ta ghi ch√∫ l·∫°i, c√≥ nh·ªØng th√¥ng tin th·ª±c s·ª± c·∫ßn ƒë∆∞·ª£c ghi nh·ªõ, c≈©ng c√≥ nh·ªØng th√¥ng tin ƒë∆∞·ª£c ghi ra ch·ªâ b·ªüi v√¨ ch√∫ng ta ham mu·ªën nhi·ªÅu th√¥ng tin h∆°n m√† th√¥i!\n","href":"/misc/vai-dong-ve-cuon-so/","title":"V√†i d√≤ng v·ªÅ cu·ªën s·ªï"},{"content":"Alisa: ‚ÄúChu·ªôt n√†o ƒëi b·∫±ng 2 ch√¢n?‚Äù\nBernard: ‚ÄúChu·ªôt Mickey‚Äù\nAlisa: ‚ÄúV·ªãt n√†o ƒëi b·∫±ng 2 ch√¢n?‚Äù\nBernard: ‚ÄúV·ªãt Donald‚Äù\nTh·ª±c t·∫ø th√¨ t·∫•t c·∫£ nh·ªØng con v·ªãt ƒë·ªÅu ƒëi b·∫±ng 2 ch√¢n. V·∫≠y ƒë·ªÅu g√¨ ƒë√£ khi·∫øn cho Bernard ƒë∆∞a ra ƒë√°p √°n sai cho m·ªôt c√¢u h·ªèi b√¨nh th∆∞·ªùng nh∆∞ v·∫≠y. Hi·ªáu ·ª©ng m·ªìi (priming effect) ch√≠nh l√† c√¢u tr·∫£ l·ªùi.\nHi·ªáu ·ª©ng m·ªìi (priming effect) l√† m·ªôt hi·ªáu ·ª©ng t√¢m l√Ω di·ªÖn ra trong n√£o b·ªô con ng∆∞·ªùi, khi k·∫øt qu·∫£ h√†nh ƒë·ªông c·ªßa m·ªôt ng∆∞·ªùi b·ªã ·∫£nh h∆∞·ªüng b·ªüi m·ªôt v√†i th√¥ng tin ng∆∞·ªùi ƒë√≥ ti·∫øp nh·∫≠n ƒë∆∞·ª£c tr∆∞·ªõc ƒë√≥. Trong v√≠ d·ª• tr√™n, Bernard sau khi tr·∫£ l·ªùi ƒë√∫ng c√¢u h·ªèi th·ª© nh·∫•t, v·∫´n c√≤n l∆∞u gi·ªØ m·∫£nh th√¥ng tin li√™n quan ƒë·∫øn chu·ªôt Mickey. ƒêi·ªÅu n√†y khi·∫øn c√¢u tr·∫£ l·ªùi cho c√¢u h·ªèi ti·∫øp theo c√≥ xu h∆∞·ªõng li√™n quan ƒë·∫øn th√¥ng tin v·ª´a nh·∫≠n ƒë∆∞·ª£c. C·ª• th·ªÉ, khi tr·∫£ l·ªùi c√¢u h·ªèi th·ª© nh·∫•t, h√¨nh ·∫£nh ch√∫ chu·ªôt Mickey xu·∫•t hi·ªán trong ƒë·∫ßu b·∫°n m·ªôt c√°ch ng·∫´u nhi√™n, s·ªëng ƒë·ªông. Th·∫≠m ch√≠, s·ª± li√™n t∆∞·ªüng c√≤n khi·∫øn b·∫°n nghƒ© ƒë·∫øn Disneyland, c√≥ C√¥ng ch√∫a, Ho√†ng t·ª≠, Tinkerbell, l√¢u ƒë√†i‚Ä¶ Vi·ªác li√™n t∆∞·ªüng n√†y th√∫c ƒë·∫©y c√¢u tr·∫£ l·ªùi th·ª© 2 c√≥ li√™n quan ƒë·∫øn Disneyland. Do ƒë√≥, s·∫Ω kh√¥ng ng·∫°c nhi√™n n·∫øu v·ªãt Donald xu·∫•t hi·ªán ƒë·∫ßu ti√™n trong ƒë·∫ßu c·ªßa b·∫°n.\nƒê√£ c√≥ nhi·ªÅu th√≠ nghi·ªám ƒë∆∞·ª£c th·ª±c hi·ªán ƒë·ªÉ ki·ªÉm ch·ª©ng hi·ªáu ·ª©ng t√¢m l√Ω n√†y.\nTh·∫≠p ni√™n 80, nh·ªØng nh√† t√¢m l√Ω h·ªçc ƒë√£ ph√°t hi·ªán ra 1 ƒëi·ªÅu th√∫ v·ªã. N·∫øu m·ªôt ng∆∞·ªùi tr∆∞·ªõc ƒë√≥ th·∫•y t·ª´ ‚ÄúEAT‚Äù (ƒÉn) ho·∫∑c ƒë∆∞·ª£c xem nh·ªØng h√¨nh ·∫£nh v·ªÅ ƒë·ªì ƒÉn, th·ª©c u·ªëng‚Ä¶ th√¨ khi ƒë∆∞·ª£c giao cho c√¢u ƒë·ªë ƒëi·ªÅn v√†o ch·ªó tr·ªëng ‚ÄúSO_P‚Äù, nhi·ªÅu ng∆∞·ªùi cho ra k·∫øt qu·∫£ l√† ‚ÄúSOUP‚Äù (canh) h∆°n l√† ‚ÄúSOAP‚Äù (x√† ph√≤ng). Ng∆∞·ª£c l·∫°i, nh·ªØng ng∆∞·ªùi tr∆∞·ªõc ƒë√≥ th·∫•y t·ª´ ‚ÄúWASH‚Äù ho·∫∑c c√°c h√¨nh ·∫£nh v·ªÅ d·∫ßu g·ªôi ƒë·∫ßu, ph√≤ng t·∫Øm‚Ä¶ s·∫Ω c√≥ xu h∆∞·ªõng cho ra k·∫øt qu·∫£ l√† ‚ÄúSOAP‚Äù, h∆°n l√† ‚ÄúSOUP‚Äù.\nM·ªôt th√≠ nghi·ªám kh√°c, ng∆∞·ªùi ta y√™u c·∫ßu nh·ªØng ng∆∞·ªùi tham gia nghe th√¥ng ƒëi·ªáp b·∫±ng m·ªôt ƒë√¥i tai nghe m·ªõi v√† cho bi·∫øt m·ª•c ƒë√≠ch c·ªßa th√≠ nghi·ªám n√†y l√† th·ª≠ ch·∫•t l∆∞·ª£ng c·ªßa thi·∫øt b·ªã √¢m thanh. Nh·ªØng ng∆∞·ªùi tham gia ƒë∆∞·ª£c y√™u c·∫ßu ra hi·ªáu b·∫±ng c√°ch s·ª≠ d·ª•ng ƒë·∫ßu m·ªói khi nghe th·∫•y b·∫•t c·ª© √¢m thanh m√©o n√†o. M·ªôt n·ª≠a s·ªë ng∆∞·ªùi tham gia ƒë∆∞·ª£c y√™u c·∫ßu g·∫≠t ƒë·∫ßu l√™n xu·ªëng, s·ªë c√≤n l·∫°i ƒë∆∞·ª£c y√™u c·∫ßu l·∫Øc qua l·∫Øc l·∫°i. Th√¥ng ƒëi·ªáp m√† h·ªç nghe th·∫•y l√† m·ªôt b·∫£n tin tr√™n ƒë√†i ph√°t thanh. Nh·ªØng ng∆∞·ªùi g·∫≠t ƒë·∫ßu c√≥ xu h∆∞·ªõng ch·∫•p nh·∫≠n th√¥ng ƒëi·ªáp m√† h·ªç nghe th·∫•y, nh∆∞ng nh·ªØng ng∆∞·ªùi l·∫Øc ƒë·∫ßu c√≥ xu h∆∞·ªõng b√°c b·ªè th√¥ng tin‚Äù.\nM·ªôt v√†i v√≠ d·ª•\n B·∫°n th·∫•y v√†i ƒë·ª©a b·∫°n ƒëi Singapore qua nh·ªØng t·∫•m h√¨nh post tr√™n facebook. Sau ƒë√≥, c√≥ m·ªôt ng∆∞·ªùi b·∫°n r·ªß b·∫°n ƒëi du l·ªãch v√† Singapore n·∫£y ra tr∆∞·ªõc ti√™n trong ƒë·∫ßu b·∫°n.\n Sau khi nghe nh·∫°c Tr·ªãnh C√¥ng S∆°n, b·∫°n hay c√≥ c·∫£m gi√°c bu·ªìn bu·ªìn.\n B·∫°n ƒë·ªãnh l√¨ x√¨ cho 1 ƒë·ª©a tr·∫ª. Tr∆∞·ªõc ƒë√≥, ƒë·ª©a tr·∫ª n√†y ƒë√£ ƒë∆∞·ª£c m·ªôt ng∆∞·ªùi kh√°c l√¨ x√¨ 50.000 ƒë·ªìng. B·∫°n c√≥ xu h∆∞·ªõng l√¨ x√¨ v·ªõi s·ªë ti·ªÅn l·ªõn h∆°n ho·∫∑c b·∫±ng 50.000 ƒë·ªìng.\n B·∫°n th·∫•y ng∆∞·ªùi kh√°c ng√°p. Sau ƒë√≥, b·∫°n c≈©ng c·∫£m th·∫•y h∆°i bu·ªìn ng·ªß.\n B·∫°n th·∫•y ng∆∞·ªùi kh√°c c∆∞·ªùi v√¨ m·ªôt l·ªùi n√≥i ƒë√πa, b·∫°n c≈©ng c∆∞·ªùi theo m√† v·∫´n ch∆∞a k·ªãp hi·ªÉu √Ω nghƒ©a c·ªßa l·ªùi n√≥i ƒë√πa ƒë√≥.\n B·∫°n nh√¨n v√†o m·ªôt b·ª©c tranh x·∫•u t·ªá, sau ƒë√≥ nh√¨n v√†o m·ªôt b·ª©c tranh b√¨nh th∆∞·ªùng kh√°c v√† th·∫•y n√≥ ƒë·∫πp h∆°n so v·ªõi tr∆∞·ªùng h·ª£p kh√¥ng nh√¨n v√†o b·ª©c tranh x·∫•u kia.\n \u0026hellip;  Priming effect ·∫£nh h∆∞·ªüng ƒë·∫øn ch√∫ng ta nh∆∞ th·∫ø n√†o\nN√£o b·ªô lu√¥n ti·∫øp nh·∫≠n th√¥ng tin t·ª´ m√¥i tr∆∞·ªùng b√™n ngo√†i, k·ªÉ c·∫£ vi·ªác ƒë√≥ kh√¥ng ph·∫£i ch·ªß ƒë√≠ch c·ªßa ch√∫ng ta. Do ƒë√≥, m·ªçi th·ª© xung quanh ƒë·ªÅu c√≥ th·ªÉ ·∫£nh h∆∞·ªüng ƒë·∫øn ch√∫ng ta, v·ªõi nh·ªØng m·ª©c ƒë·ªô kh√°c nhau. Nh·ªØng th·ª© quen thu·ªôc h∆°n ƒëem l·∫°i t·∫ßn su·∫•t t∆∞∆°ng t√°c v·ªõi ch√∫ng ta nhi·ªÅu h∆°n, n√™n c√≥ ·∫£nh h∆∞·ªüng nhi·ªÅu h∆°n nh·ªØng th·ª© kh√°c. B·∫°n c√≥ nghƒ© r·∫±ng:\n N√™n ƒë·ªïi m√†n h√¨nh ƒëi·ªán tho·∫°i, m√†n h√¨nh m√°y t√≠nh th√†nh m·ªôt h√¨nh n√†o ƒë√≥ gi√∫p b·∫°n k√≠ch th√≠ch s·ª± s√°ng t·∫°o?\n Hay ƒë·∫∑t nh·ªØng cu·ªën s√°ch v·ªÅ Productivity t·∫°i g√≥c l√†m vi·ªác?  L·ªùi k·∫øt\nPriming effect n√≥i r·∫±ng h√†nh ƒë·ªông c·ªßa b·∫°n ƒëang c√≥ s·ª± chi ph·ªëi c·ªßa nh·ªØng g√¨ b·∫°n nh√¨n th·∫•y, nghe th·∫•y. Tuy ch·ªâ l√† micro-effect nh∆∞ng n√≥ l·∫°i hi·ªán h·ªØu r·∫•t th∆∞·ªùng xuy√™n xung quanh ch√∫ng ta. T√¥i r·∫•t t√¢m ƒë·∫Øc hi·ªáu ·ª©ng n√†y b·ªüi v√¨ n√≥ ch·ªâ ra r·∫±ng ‚Äúm·ªçi th·ª© ƒë·ªÅu c√≥ √Ω nghƒ©a c·ªßa n√≥‚Äù‚Ä¶ Ch√∫ng ta v√† m√¥i tr∆∞·ªùng xung quanh, c√≥ bi·∫øt bao nhi√™u s·ª£i d√¢y li√™n k·∫øt c√°c s·ª± v·∫≠t, s·ª± vi·ªác v·ªõi nhau. H·∫ßu h·∫øt trong s·ªë ch√∫ng ƒë·ªÅu v√¥ h√¨nh. C√≥ l·∫Ω ƒë√≥ l√† m·ªôt sai s√≥t c·ªßa Ch√∫a Tr·ªùi khi t·∫°o ra th·∫ø gi·ªõi ƒë·∫ßy nh·ªØng th·ª© b·∫•t ƒë·ªãnh (uncertain) nh∆∞ v·∫≠y. Nh∆∞ng theo t√¥i, ƒë√≥ l·∫°i l√† s·ª± ho√†n h·∫£o nh·∫•t.\nTham kh·∫£o\n Daniel Kahneman, Thinking, Fast and Slow  ","href":"/reasoning/hieu-ung-moi-priming-effect/","title":"Hi·ªáu ·ª©ng m·ªìi (Priming effect)"},{"content":"","href":"/tags/psychological-efffects/","title":"psychological-efffects"},{"content":" M·ªôt ng∆∞·ªùi ƒëi k√©n v·ª£, v√† ƒë·ªãnh ch·ªçn m·ªôt trong ba c√¥ g√°i Alice, Beatrice v√† Cynthia r·ªìi c∆∞·ªõi. Bi·∫øt r·∫±ng m·ªói c√¥ g√°i ƒë·ªÅu lu√¥n n√≥i d·ªëi ho·∫∑c lu√¥n n√≥i th·∫≠t. M·ªôt trong ba c√¥ g√°i l√† ph√π th·ªßy nh∆∞ng kh√¥ng bi·∫øt r·∫±ng ph√π th·ªßy lu√¥n n√≥i d·ªëi hay lu√¥n n√≥i th·∫≠t. D∆∞·ªõi ƒë√¢y l√† nh·ªØng ƒëi·ªÅu m√† c√°c c√¥ g√°i n√≥i v·ªõi ch√†ng trai.\n- Alice: Cynthia l√† ph√π th·ªßy.\n- Betrice: T√¥i kh√¥ng l√† ph√π th·ªßy.\n- Cynthia: Nhi·ªÅu nh·∫•t l√† m·ªôt ng∆∞·ªùi trong ba ch√∫ng t√¥i n√≥i th·∫≠t.\nH·ªèi ch√†ng trai ph·∫£i ch·ªçn ai (trong s·ªë ba ng∆∞·ªùi tr√™n) l√†m c√¥ d√¢u ƒë·ªÉ kh√¥ng c∆∞·ªõi ph·∫£i ph√π th·ªßy?\n\u0026mdash; Tr√≠ch Mathematical Young Talent Search 2015 (MYTS) \u0026mdash;\n\nT√≥m t·∫Øt ‚Äì Trong 3 c√¥ g√°i, c√≥ 1 c√¥ l√† ph√π thu·ª∑, 2 c√¥ c√≤n l·∫°i l√† ng∆∞·ªùi th∆∞·ªùng.\n‚Äì M·ªói c√¥ ƒë·ªÅu c√≥ th·ªÉ n√≥i th·∫≠t ho·∫∑c n√≥i d·ªëi.\n‚Äì C·∫ßn ch·ªçn c√¥ n√†o ch·∫Øc ch·∫Øn l√† ng∆∞·ªùi th∆∞·ªùng.\nPh√¢n t√≠ch Xu·∫•t ph√°t t·ª´ gi·∫£ thi·∫øt 3:\n(1) TH1: N·∫øu Cynthia n√≥i th·∫≠t\n\u0026ndash;\u0026gt; ‚ÄúNhi·ªÅu nh·∫•t 1 ng∆∞·ªùi n√≥i th·∫≠t‚Äù, v√† ƒë√≥ c≈©ng ch√≠nh l√† Cynthia \u0026ndash;\u0026gt; Alice v√† Betrice n√≥i d·ªëi\n\u0026ndash;\u0026gt; Suy ra:\n+ Cynthia kh√¥ng ph·∫£i ph√π thu·ª∑\n+ Betrice l√† ph√π thu·ª∑\n(2) TH2: N·∫øu Cynthia n√≥i d·ªëi\n\u0026ndash;\u0026gt; ‚ÄúC√≥ \u0026gt;= 2 ng∆∞·ªùi n√≥i th·∫≠t‚Äù \u0026ndash;\u0026gt; C·∫£ Alice v√† Betrice n√≥i th·∫≠t\n\u0026ndash;\u0026gt; Suy ra:\n+ Cynthia l√† ph√π thu·ª∑\n+ Betrice kh√¥ng ph·∫£i ph√π thu·ª∑\nT·ªïng h·ª£p ‚Äì TH1: Betrice l√† ph√π thu·ª∑. Alice v√† Cynthia l√† ng∆∞·ªùi th∆∞·ªùng\n‚Äì TH2: Cynthia l√† ph√π thu·ª∑. Alice v√† Betrice l√† ng∆∞·ªùi th∆∞·ªùng\nTrong c·∫£ 2 tr∆∞·ªùng h·ª£p th√¨ Alice ƒë·ªÅu l√† ng∆∞·ªùi th∆∞·ªùng.\n\u0026ndash;\u0026gt; C∆∞·ªõi Alice l√† l·ª±a ch·ªçn t·ªët nh·∫•t.\n","href":"/reasoning/dong-nao-alice-betrice-cynthia/","title":"ƒê·ªông n√£o: Alice, Betrice or Cynthia?"},{"content":"M√¨nh r·∫•t th√≠ch ƒëi cafe m·∫∑c d√π ƒëa s·ªë nh·ªØng tr∆∞·ªùng h·ª£p ƒë·ªÅu ch·ªâ c√≥ 1 th√¢n 1 c√µi :D. M√¨nh c≈©ng l√† ƒë·ª©a t√≤ m√≤, hay c√≥ c√¢u h·ªèi v·ªÅ nh·ªØng th·ª© xung quanh nh∆∞ ‚Äúsao c√°nh c·ª≠a n√†y k·ª≥ k·ª≥?‚Äù, ‚Äúsao c√°i bi·ªÉn hi·ªáu n√†y l·∫°i treo ·ªü ƒë√¢y?‚Äù hay ‚Äúsao l√∫c ƒëi thang cu·ªën ng∆∞·ªùi ta hay v·ªãn tay v√†o thang‚Äù \u0026hellip; T√¨nh c·ªù m·ªôt h√¥m ƒëi cafe v·ªõi ƒë·ª©a b·∫°n, m√¨nh c√≥ 1 ph√°t hi·ªán nh·ªè v·ªÅ vi·ªác branding tr√™n ly cafe take-away.\nN√≥i v·ªÅ branding, ai c≈©ng ƒë·ªìng √Ω r·∫±ng n√≥ c√≥ t·∫ßm quan tr·ªçng r·∫•t l·ªõn ƒë·ªëi v·ªõi vi·ªác ph√°t tri·ªÉn 1 th∆∞∆°ng hi·ªáu. Hi·ªÉu n√¥m na th√¨ branding l√† l√†m cho ng∆∞·ªùi d√πng nh·ªõ ƒë·∫øn th∆∞∆°ng hi·ªáu c·ªßa m√¨nh. C√≥ nhi·ªÅu ti√™u ch√≠ ƒëo hi·ªáu qu·∫£ branding. M·ªôt trong nh·ªØng ti√™u ch√≠ ·∫•y l√† s·ª± ch√∫ √Ω c·ªßa ng∆∞·ªùi d√πng v√†o logo/nh√£n hi·ªáu. V√† tr√™n th·ª±c t·∫ø, ng∆∞·ªùi ta ƒë√£ ti√™u t·ªën √≠t nhi·ªÅu l∆∞·ª£ng ch·∫•t x√°m ƒë·ªÉ ƒë·∫°t ƒë∆∞·ª£c ƒëi·ªÅu n√†y.\nC√°ch d·ªÖ nh·∫•t, t·ª± nhi√™n nh·∫•t ƒë·ªÉ n√¢ng cao t·∫ßn su·∫•t ch√∫ √Ω c·ªßa ng∆∞·ªùi d√πng l√† ƒë·∫∑t logo/nh√£n hi·ªáu ·ªü v·ªã tr√≠ th√≠ch h·ª£p, ti·ªán l·ª£i cho vi·ªác nh√¨n. Theo tr·ª±c gi√°c, ta c√≥ th·ªÉ suy ra v·ªã tr√≠ ti·ªán l·ª£i nh·∫•t cho vi·ªác nh√¨n l√† ‚Äúngay t·∫ßm m·∫Øt‚Äù.\nTr·ªü l·∫°i v·ªõi ly cafe :D. Th√¥ng th∆∞·ªùng, vƒÉn ho√° cafe ng∆∞·ªùi Vi·ªát ch·ªß y·∫øu l√† ng·ªìi u·ªëng, ly cafe ƒë·∫∑t tr√™n b√†n. ƒê·ªìng th·ªùi, nh·ªØng l√∫c ng∆∞·ªùi u·ªëng t∆∞∆°ng t√°c v·ªõi ly cafe bao g·ªìm:\n L√∫c qu∆° tay n·∫Øm l·∫•y ly, ƒë∆∞a l√™n mi·ªáng U·ªëng ƒê·∫∑t ly xu·ªëng b√†n  Trong c·∫£ 3 tr∆∞·ªùng h·ª£p tr√™n th√¨ m·∫Øt h·∫ßu nh∆∞ l√∫c n√†o c≈©ng ·ªü v·ªã tr√≠ cao h∆°n so v·ªõi ly. ƒêi·ªÅu n√†y cho ta 1 gi·∫£ thuy·∫øt: v·ªã tr√≠ d·ªÖ quan s√°t nh·∫•t (ngang t·∫ßm m·∫Øt) tr√™n ly ch√≠nh l√† n·∫Øp ch·ª•p, ch·ª© kh√¥ng ph·∫£i th√†nh ly.\n Nh∆∞ v·∫≠y, n·∫øu logo/nh√£n hi·ªáu ƒë∆∞·ª£c in tr√™n n·∫Øp ly, hi·ªáu qu·∫£ branding c√≥ tƒÉng l√™n h∆°n hay kh√¥ng?\n ","href":"/reasoning/luan-ux-ly-cafe/","title":"Lu·∫≠n UX: Ly cafe take-away"},{"content":"","href":"/tags/ux/","title":"ux"},{"content":" Note: This code is written in Swift 1.2 and not yet validated in Swift 2.0\nDespite that value types in general (and enum/struct in particular) bring a lot of advantages, there are several limitations remaining. In particular: - Both enum and struct do not support recursive data structure - Enum with a type-parameterized case is not allowed\nAnd Box is a micro framework to deal with the painful facts above.\nWhy? First of all, lets find out the reasons for fact 1 and fact 2. We shall begin with an example: implementing a very familiar data struct: LIST.\nA list could consist of a head and a tail, which is also a list. A list could be nothing as well.\nUnfortunately, this code throws a compiler error. In fact, when XCode allocates memory for List\u0026lt;Int\u0026gt; ‚Äî for example, it couldn‚Äôt estimate how much is enough for Cons(Int, List\u0026lt;Int\u0026gt;) because it does not yet figure out the memory capacity for List\u0026lt;Int\u0026gt; in Cons(Int, List\u0026lt;Int\u0026gt;).\nSecondly, it does not accept a type-parameterized associated value: Cons(T, List\u0026lt;T\u0026gt;). ‚Üê For this, I still don‚Äôt know why.\nHow to overcome? Luckily, Box is coming for the rescue. The idea is very simple: make it non-recursive, non-type-paramaterized by using another data structure. The new data structure‚Äôs responsibility is wrapping the value in a box. And when you need the value, just unwrap the box.\nclass Box\u0026lt;T\u0026gt; { var value: T init(_ value: T) { self.value = value } } enum List\u0026lt;T\u0026gt; { case Cons(Box\u0026lt;T\u0026gt;, Box\u0026lt;List\u0026lt;T\u0026gt;\u0026gt;) case Nil init(_ head: T, _ tail: List\u0026lt;T\u0026gt;) { self = Cons(Box(head), Box(tail)) } } By this, List\u0026lt;T\u0026gt; is not recursive anymore. But of course, it‚Äôs still logically a recursion :D. The compiler won‚Äôt complain about the memory allocation problem because it can estimate how much memory a box takes.\nOther examples If you use ReactiveCocoa 3.0, you will see Box as a submodule of it. In fact, RAC 3.0 includes another submodule called Result. This micro framework also use Box, too.\n/// This is excerpted from the framework Result /// Ref: https://github.com/antitypical/Result/blob/swift1.2/Result/Result.swift public enum Result\u0026lt;T, Error\u0026gt;: Printable, DebugPrintable { case Success(Box\u0026lt;T\u0026gt;) case Failure(Box\u0026lt;Error\u0026gt;) ... } /// This is excerpted from the framework ReactiveCocoa /// Ref: https://github.com/ReactiveCocoa/ReactiveCocoa/blob/swift-1.2/ReactiveCocoa/Swift/Event.swift public enum Event\u0026lt;T, E: ErrorType\u0026gt; { /// A value provided by the signal. case Next(Box\u0026lt;T\u0026gt;) case Error(Box\u0026lt;E\u0026gt;) case Completed case Interrupted ... } Now you can define your own recursive data structure using this trick.\nThe full demonstration can be found here.\nUpdated: Swift 2.1 has come with the support for recursive enums. Bravo! Checkout the keyword: indirect.\nHave fun!\n","href":"/tech/swift-box-with-recursive-data-structure/","title":"Swift: Box with recursive data structure"},{"content":"NƒÉng Khi·∫øu, ngo√†i nh·ªØng c√¢u chuy·ªán ‚ÄúOlympic To√°n qu·ªëc t·∫ø‚Äù, ‚ÄúC·∫ßu truy·ªÅn h√¨nh Olympia‚Äù\u0026hellip; c√≤n c√≥ nh·ªØng c√¢u chuy·ªán ƒë·ªùi th∆∞·ªùng ‚Äì v·ªÅ nh·ªØng ng∆∞·ªùi b√¨nh th∆∞·ªùng ‚Äì v√† ƒë∆∞·ª£c vi·∫øt b·ªüi nh·ªØng ng∆∞·ªùi t·∫ßm th∆∞·ªùng.\nNi√™n h·ªçc cu·ªëi c·∫•p, ni√™n h·ªçc c·ªßa s·ª± chia tay, c≈©ng l√† l√∫c m√† c√°c b√†i h√°t ‚ÄúMong ∆∞·ªõc k·ª∑ ni·ªám x∆∞a‚Äù, ‚ÄúKh√∫c y√™u th∆∞∆°ng‚Äù ƒë∆∞·ª£c c·∫•t l√™n nhi·ªÅu h∆°n v√† th·ªëng thi·∫øt h∆°n bao gi·ªù h·∫øt.\nL√† ni√™n h·ªçc c·ªßa √°p l·ª±c, ai c≈©ng ch√∫ t√¢m v√†o vi·ªác h·ªçc t·∫≠p, h·∫°n ch·∫ø ho·∫°t ƒë·ªông ƒêo√†n H·ªôi h·∫øt m·ª©c. T√¥i l·∫°i lao v√†o ·ª©ng c·ª≠ l√†m B√≠ th∆∞. Sau khi tr√∫ng c·ª≠, t√¥i ch√∫ √Ω h∆°n v·ªÅ h√†nh ƒë·ªông c·ªßa b·∫£n th√¢n.\nM·ªôt bu·ªïi s√°ng n·ªç, t√¥i c√≥ 1 √Ω t∆∞·ªüng k·ª≥ l·∫°: ‚Äúh√¥m nay t√¥i s·∫Ω qu√©t l·ªõp‚Äù. T√¥i kh√¥ng nh·ªõ ƒëi·ªÅu g√¨ ƒë√£ ƒë∆∞a ƒë·∫©y m√¨nh ƒë·∫øn v·ªõi c√°i √Ω nghƒ© ƒë√≥. Ch·ªâ nh·ªõ n√≥ ƒë·∫øn r·∫•t t·ª± nhi√™n nh∆∞ th·ªÉ m·ªôt bu·ªïi s√°ng th·ª©c d·∫≠y, b·∫°n quy·∫øt ƒë·ªãnh s·∫Ω t·ª± m√¨nh pha 1 t√°ch cafe ƒë·ªÉ nh√¢m nhi, th∆∞·ªüng th·ª©c. V√† tr√™n th·ª±c t·∫ø ƒë√£ x·∫£y ra m·ªôt s·ª± k·ª≥ l·∫° h∆°n th·∫ø n·ªØa: ‚Äút√¥i qu√©t l·ªõp t·ª´ h√¥m ƒë√≥ ƒë·∫øn h·∫øt nƒÉm h·ªçc‚Äù.\nC√≥ l·∫Ω b·∫°n ƒëang th·∫Øc m·∫Øc: qu√©t l·ªõp th√¨ c√≥ g√¨ k·ª≥ l·∫°? Th√∫ th·∫≠t t√¥i c≈©ng ƒë√£ t·ª´ng neo c√¢u h·ªèi n√†y trong ƒë·∫ßu khi m·ªõi v√†o S√†i G√≤n. L√∫c h·ªçc c·∫•p 2 ngo√†i qu√™, h·ªçc sinh trong l·ªõp ƒë·ªÅu t·ª± ph√¢n l·ªãch tr·ª±c nh·∫≠t (d√π mu·ªën hay kh√¥ng). M·ªói ƒë·ª©a ƒë·ªÅu ƒë·ªÉ l·∫°i v·ªát ch·ªïi √≠t nh·∫•t 1 ng√≥c ng√°ch n√†o ƒë√≥ trong l·ªõp. V√†o S√†i G√≤n r·ªìi t√¥i m·ªõi bi·∫øt c√≥ 1 c√¥ng vi·ªác t√™n l√† ‚Äúlao c√¥ng‚Äù. Kh√¥ng bi·∫øt nh·ªØng tr∆∞·ªùng kh√°c ra sao, nh∆∞ng ·ªü NƒÉng Khi·∫øu, t√¥i ch·ªâ th·∫•y m·∫•y c√¥ qu√©t d·ªçn th√¥i.\n\u0026hellip;\nN·∫øu t√¥i nh·ªõ kh√¥ng nh·∫ßm th√¨ NƒÉng Khi·∫øu h·ªìi ƒë√≥ c√≥ 4 c√¥ lao c√¥ng lu√¢n phi√™n nhau c√¥ng vi·ªác qu√©t d·ªçn v√† gi·ªØ xe. Trong ƒë√≥ c√≥ 1 c√¥ ng∆∞·ªùi Nam v√† 3 c√¥ ng∆∞·ªùi B·∫Øc (qu√™ ·ªü Th√°i B√¨nh th√¨ ph·∫£i). T√¥i th√¢n v·ªõi 3 c√¥ kia h∆°n. Th∆∞·ªùng th√¨ m·∫•y c√¥ qu√©t d·ªçn v√†o bu·ªïi s√°ng s·ªõm (khi trong l·ªõp l√°t ƒë√°t c√≥ v√†i ƒë·ª©a), v√† ƒë·∫ßu gi·ªù chi·ªÅu (nh·ªØng bu·ªïi l·ªõp ch·ªâ h·ªçc bu·ªïi s√°ng). Kh√¥ng hi·ªÉu sao l·ªõp h·ªçc NƒÉng Khi·∫øu, sau m·ªôt bu·ªïi h·ªçc l√† ƒë·∫ßy nh·ªëc r√°c trong h·ªçc b√†n. N√†o khƒÉn gi·∫•y, n√†o h·ªôp x√¥i, n√†o ly n∆∞·ªõc\u0026hellip; Trong toilet c≈©ng kh√¥ng ph·∫£i ngo·∫°i l·ªá. B·ªüi v·∫≠y n√™n khi ƒëi d·ªçn d·∫πp, th·∫•y m·∫•y ƒë·ª©a b·ªè r√°c b·ª´a, m·∫•y c√¥ hay r·∫ßy t·ª•i n√≥. T·ª•i n√≥ th·∫•y v·∫≠y c≈©ng m·∫∑c k·ªá, b·ªè qua ch·ª© kh√¥ng ph·∫£n ·ª©ng g√¨. Nh∆∞ng t√¥i bi·∫øt trong l√≤ng t·ª•i n√≥ c≈©ng ·∫•m ·ª©c v√† kh√¥ng ∆∞a g√¨ m·∫•y c·ªï.\n\u0026hellip;\nT√¥i v·∫´n qu√©t l·ªõp. C√†ng qu√©t t√¥i c√†ng gh√©t c√°i b·ª´a b·ªôn, nh·ªïn nhang c·ªßa nh·ªØng m·∫£nh r√°c. C√≥ nh·ªØng bu·ªïi t√¥i qu√©t n·ª≠a ch·ª´ng th√¨ c√¥ lao c√¥ng v√†o. C√¥ c·∫£m ∆°n r·ªìi khƒÉng khƒÉng gi√†nh qu√©t ‚Äúcon h·ªçc b√†i ƒëi, ƒë·ªÉ c√¥ l√†m cho‚Äù. Nhi·ªÅu l·∫ßn nh∆∞ v·∫≠y, ƒë·∫∑c bi·ªát l√† nh·ªØng bu·ªïi tr∆∞a chi·ªÅu, t√¥i c√≥ nh·ªØng cu·ªôc tr√≤ chuy·ªán ng·∫Øn v·ªÅ gia ƒë√¨nh, c√¥ng vi·ªác c·ªßa c√°c c√¥. Ch·∫Øc c√≥ l·∫Ω hi·∫øm hoi l·∫Øm m·ªõi c√≥ s·ª± ƒë·ªìng c·∫£m c·ªßa ƒë√°m h·ªçc sinh, n√™n m·∫•y c·ªï k·ªÉ c≈©ng nhi·ªát t√¨nh l·∫Øm. Khi ƒë√≥, t√¥i ƒë·ªß ki√™n nh·∫´n ƒë·ªÉ nghe h·∫øt nh·ªØng c√¢u than th·ªü c·ªßa c√°c c√¥. T·ª´ chuy·ªán m·∫π gi√† ƒë·∫øn chuy·ªán th·∫±ng con trai, chuy·ªán c·ª±c kh·ªï m∆∞u sinh\u0026hellip;\n\u0026hellip;\nC√≥ 1 bu·ªïi tr∆∞a, t√¥i mua c∆°m v√†o, l·∫°i b√†n ng·ªìi ƒÉn chung v·ªõi m·∫•y c√¥. C√¥ tr·ª±c ph√≤ng y t·∫ø ƒë·∫øn ƒÉn chung, th·∫•y l·∫° li·ªÅn h·ªèi:\n‚Äì ‚ÄúEm n√†y h·ªçc l·ªõp n√†o v·∫≠y nh·ªâ?‚Äù.\n‚Äì ‚ÄúD·∫° em l·ªõp 12 To√°n ·∫°‚Äù ‚Äì t√¥i ƒë√°p.\n‚Äì ‚ÄúEm n√†y l√† ngoan nh·∫•t tr∆∞·ªùng r·ªìi ƒë·∫•y ch·ªã‚Äù ‚Äì m·ªôt trong s·ªë c√°c c√¥ ƒë√°p l·∫°i. Nghe xong, t√¥i th·∫•y m√°t l√≤ng nh∆∞ th·ªÉ t√¥i l√† ƒë·ª©a h·ªçc gi·ªèi nh·∫•t tr∆∞·ªùng hay t√¥i ƒë·∫πp trai nh·∫•t tr∆∞·ªùng v·∫≠y :v.\n\u0026hellip;\nSau khi c√≥ k·∫øt qu·∫£ thi ƒê·∫°i h·ªçc, t√¥i v√†o l·∫°i S√†i G√≤n. T√¥i ƒë·∫°p xe v·ªÅ thƒÉm NƒÉng Khi·∫øu, mang theo v√†i b·ªãch c·ªëm rang cho m·∫•y ƒë·ª©a b·∫°n th√¢n. C√≥ 1 b·ªãch t√¥i ƒë·ªÉ d√†nh ri√™ng t·∫∑ng c√°c c√¥. T√¥i ƒëi l√™n c·∫ßu thang, nom th·∫•y 1 c√¥ ƒëang lau s√†n h√†nh lang. ƒê∆∞a b·ªãch c·ªëm rang cho c√¥, t√¥i th·∫•y l√≤ng m√¨nh h·∫°nh ph√∫c\u0026hellip; T√¥i c≈©ng th·∫•y ni·ªÅm vui hi·ªán l√™n tr√™n g∆∞∆°ng m·∫∑t lam l≈© c·ªßa c√¥.\n","href":"/misc/chuyen-nang-khieu-co-lao-cong/","title":"Chuy·ªán NƒÉng Khi·∫øu: c√¥ lao c√¥ng"},{"content":"[M·ªôt v√†i √Ω vi·∫øt t·∫°p nham]\nƒê√£ 6 nƒÉm k·ªÉ t·ª´ l√∫c l·ªõp To√°n 0710 b∆∞·ªõc sang ni√™n h·ªçc cu·ªëi c·∫•p. H·∫ßu nh∆∞ ai c≈©ng t·∫•t b·∫≠t cho k·ª≥ thi ƒë·∫°i h·ªçc\u0026hellip;\nH·ªìi ƒë√≥ trong l·ªõp c√≥ m·ªôt h√¨nh th·ª©c h·ªçc nh√≥m t·ª± ph√°t r·∫•t hay. Kh·ªüi ƒë·∫ßu l√† m·ªôt nh√≥m (c·ªßa t·ªï 3) v·ªõi √Ω t∆∞·ªüng so·∫°n ƒë·ªÅ thi v√† t·ªï ch·ª©c thi th·ª≠ ƒë·ªÉ m·ªçi ng∆∞·ªùi quen d·∫ßn v·ªõi k·ª≥ thi ƒë·∫°i h·ªçc. Nh√≥m l·∫•y t√™n YRMUPTP, l√† vi·∫øt t·∫Øt c·ªßa You raise me up g√¨ g√¨ ƒë√≥. Nh∆∞ng m·ªçi ng∆∞·ªùi trong l·ªõp th√¨ v·∫´n quen n√≥ h∆°n v·ªõi c·ª•m t·ª´ ‚ÄúYou raise me up, ph√™ v√† t·ª± ph√™‚Äù.\nThu·ªü ban ƒë·∫ßu, nh√≥m ·ªü l·∫°i (l√∫c cu·ªëi gi·ªù) v√†o 1 bu·ªïi trong tu·∫ßn l√†m ƒë·ªÅ thi. C√≥ canh th·ªùi gian gi·ªëng nh∆∞ 1 k·ª≥ thi th·∫≠t v·∫≠y. Th·∫•y hay, m·ªôt s·ªë kh√°c trong l·ªõp c≈©ng ƒëƒÉng k√Ω tham gia. YRMUPTP k·ªÉ t·ª´ ƒë√≥ b·∫Øt ƒë·∫ßu m·ªü r·ªông d·∫ßn.\nM·ªôt th·ªùi gian sau, m·ªçi ng∆∞·ªùi c·∫£m th·∫•y vi·ªác gi·∫£i ƒë·ªÅ t·∫≠p trung, tr·∫£i nghi·ªám c·∫£m gi√°c √°p l·ª±c nh∆∞ k·ª≥ thi kh√¥ng ph√π h·ª£p. T·ª´ ƒë√≥, nh√≥m chuy·ªÉn sang h√¨nh th·ª©c ph√¢n ph√°t ƒë·ªÅ v√† t·ª± gi·∫£i. M·ªçi ng∆∞·ªùi c√≥ th·ªÉ gi·∫£i b·∫•t c·ª© th·ªùi gian n√†o ph√π h·ª£p nh·∫•t.\nM√¥ h√¨nh n√†y ƒë∆∞·ª£c h∆∞·ªüng ·ª©ng r·∫•t t·ªët, c√≥ nhi·ªÅu b·∫°n ƒëƒÉng k√Ω nh·∫≠n ƒë·ªÅ h∆°n. M·ªçi ng∆∞·ªùi, ƒë·∫∑c bi·ªát l√† trong t·ªï 3 tƒÉng c∆∞·ªùng trao ƒë·ªïi v·ªõi nhau nhi·ªÅu h∆°n. C√≥ nhi·ªÅu cu·ªôc th·∫£o lu·∫≠n ƒëi·ªÉn h√¨nh nh∆∞: ‚ÄúC√¢u n√†y m√†y c√≥ cho ƒë·ªÅ sai ko?‚Äù, ‚ÄúGi·∫£i ho√†i c√¢u n√†y h·ªèk ƒë∆∞·ª£c m√†y!‚Äù, ‚ÄúKh√¥ng sai ƒë√¢u, ch·∫Øc ch·∫Øn!‚Äù, ‚ÄúCoi ch·ª´ng b·ªã m·∫Øc l·ª´a ak‚Äù\u0026hellip;\n\u0026hellip;\nT·∫øt nƒÉm ƒë√≥, nh√≥m c√≥ s∆∞u t·∫ßm v√† xu·∫•t b·∫£n m·ªôt t·∫≠p t√†i li·ªáu, g·ªìm 5 m√¥n: Ho√°, Sinh, To√°n, L√Ω, Anh. R·ªìi ƒë·∫∑t cho n√≥ 1 c√°i t√™n c≈©ng kh√° o√°ch ‚ÄúT√†i li·ªáu m·ª´ng xu√¢n ‚Äì YRMUPTP‚Äù. B·ªçn m√¨nh qua m·∫•y l·ªõp 12 Sinh, 12 Ho√°, 12 Tin\u0026hellip; v·∫≠n ƒë·ªông mua t√†i li·ªáu, v√† k·∫øt qu·∫£ l√† c≈©ng kh√° nhi·ªÅu ng∆∞·ªùi ƒëƒÉng k√Ω mua. Kh√¥ng bi·∫øt c√°c b·∫°n ·∫•y c√≥ ƒë·ª•ng v√†o trang n√†o kh√¥ng n·ªØa, nh∆∞ng nh∆∞ v·∫≠y c≈©ng l√† qu√° tuy·ªát v·ªùi r·ªìi\u0026hellip; YRMUPTP v·∫´n ti·∫øp t·ª•c ho·∫°t ƒë·ªông ƒë·∫øn g·∫ßn cu·ªëi ni√™n h·ªçc\u0026hellip; M·ªçi ng∆∞·ªùi l·∫°i b·∫≠n r·ªôn d·ªìn s·ª©c v√†o 2 k·ª≥ thi\u0026hellip;\n\u0026hellip;\nM·ªôt ng√†y n·ªç c·ªßa 6 nƒÉm sau ƒë√≥, t√¥i search tr√™n m·∫°ng c·ª•m t·ª´ YRMUPTP ƒë·ªÉ coi c√°i blog c≈© c·ªßa t·ªï c√≤n kh√¥ng\u0026hellip; T√¥i th·∫•y c·ª•m t·ª´ ·∫•y xu·∫•t hi·ªán tr√™n di·ªÖn ƒë√†n To√°n Tin K10 ƒêH-KHTN. ƒê√≥ c≈©ng l√† 1 group chia s·∫ª ki·∫øn th·ª©c trong h·ªçc t·∫≠p\u0026hellip; V·∫´n c√≤n ng∆∞·ªùi nh·ªõ ƒë·∫øn YRMUPTP :\n","href":"/misc/chuyen-nang-khieu-yrmuptp/","title":"Chuy·ªán NƒÉng Khi·∫øu: YRMUPTP"},{"content":" In this post, we will have a look at an example on how to use ReactiveCocoa (v3.0) to handle a simple Login workflow.\nAn example First of all, you may wonder why we should use it. Let‚Äôs have a look at the following example.\nAlmost every app needs authentication, which is simply implemented by login with email and password. It is not only a network task, but also a task requiring interactions with a server. But the problem is: ‚Äúevery task may fail‚Äù. This leads to the fact that sometimes we spend more time handling failures than successful cases. These failures include network failures and server-interaction failures.\nTraditional version func tapLoginButton() { ... YourAPI.login(loginParameters) { (result, error) in if error != nil { switch error.type { case .NetworkError: // Handle network failure case .IncorrectEmailOrPassword: // Handle failure case .InvalidInformation: // Handle failure // ‚Ä¶ } else { // Handle success } } } } This code has a few disadvantages:\n The handling implementation is put inside a closure. If we have 10 tasks that need to be executed immediately after logging in, they have to be placed in this closure. Ugly and hard to debug, right? Assume we need chaining tasks: If login task is done ‚Üí execute task 1. If task 1 is done ‚Üí execute task 2‚Ä¶ In that case, each task need a closure:  func task1(completion: (SuccessType) -\u0026gt; ()) func task2(completion: (SuccessType) -\u0026gt; ())  Errors and successful results don‚Äôt exist simultaneously. The parameters declaration (result, error) seems redundant.  How to refactor? Replace closures by Signals or SignalProducers. We will discuss the differences between Signal and SignalProducer later.\nclass API { static func login(loginParameters: LoginParameters) -\u0026gt; SignalProducer\u0026lt;SuccessType, ErrorType\u0026gt; { let signalProducer = SignalProducer\u0026lt;SuccessType, ErrorType\u0026gt; { sink, disposable in // For now, dont care much about `sink` and `disposable` // Send request // Validate request if networkErrorOccured() { let error = makeUpNetworkError() sendError(sink, error) } else if serverErrorOccured() { let error = makeUpServerError() sendError(sink, error) } else { let successResult = parseJsonAndGetSuccessResult() sendNext(sink, successResult) sendCompleted(sink) } } } } func tapLoginButton() { let loginParameters = LoginParameters(username, password) let loginSignalProducer = API.login(loginParameters) // Task 1 loginSignalProducer |\u0026gt; start(error: { error in handleErrorTask1() }, next { successfulResult in handleSuccessTask1() }) // Task 2 loginSignalProducer |\u0026gt; observe(error: { error in handleErrorTask2() }, next { successfulResult in handleSuccessTask2() }) ‚Ä¶ // Task 10 loginSignalProducer |\u0026gt; observe(error: { error in handleErrorTask10() }, next { successfulResult in handleSuccessTask10() }) } This implementation looks more elegant since:\n Failure and success are handled separately Each observation is handled separately We dont have to take much care of asynchronous tasks  What makes differences? I think what make sense are the abstract types:\n Result: handles failures Event: handles asynchronous tasks Signal: handles observation for changes along with time  A little explanation If you already heard of FRP (Functional Reactive Programming), this may help you understand more straightforwardly:\n- Result\u0026lt;SuccessType, ErrorType\u0026gt; = Try[SuccessType, ErrorType] - Event\u0026lt;SomeType, ErrorType\u0026gt; = Future[SomeType, ErrorType] - Signal\u0026lt;SomeType, ErrorType\u0026gt; = Observable[SomeType, ErrorType] = a series of Events Conclusion  Don‚Äôt waste your time implementing Observer pattern or manually handling asynchronous tasks. If you‚Äôre in favor of Java, a similar framework could be found as RxJava.  The next blog post, I will come up with a small comparison between RAC 2.0 and RAC 3.0.\n","href":"/tech/rac3-with-login-flow/","title":"RAC 3.0 with Login workflow"},{"content":" I hadn‚Äôt known Topology until a friend of mine gave me a quiz related to it. Though I still have no idea about the mathematical stuff, it has been drawing my attention due to some of its interesting facts.\nWhat is Topology? I found a definition on livescience.com (more understandable than on Wiki)\n Topology is a branch of mathematics that describes mathematical spaces, in particular the properties that stem from a space‚Äôs shape. Many of the shapes topologists deal with are incredibly strange, so much so that practically all everyday objects such as bowls and pets and trees make up a small minority. The word ‚Äútopology‚Äù derives from the Greek words for place (topos) and study (-logy).\n For instance, under Topology‚Äôs perspective, a donut and a coffee cup are the same since they have a similar shape (a solid object with a hole). Similarly, a rubik‚Äôs cube is just a different version of a ball (by somehow, we can mould a cubic object into a sphere).\n Another example is the DNA. After a DNA molecule unwinds, it resembles a ladder. So what are the implications here? Well, basically it means: ‚Äúwith the same transformation to a DNA, we may get the same result to a ladder and vice versa‚Äù. To be specific, we can shrink a ladder with the same principle a huge DNA molecule winds itself into a smaller one.\nFor more typical examples, just have a look at the following videos:\n  We could transform a rubber band to a variety of shapes without cutting or glueing it. There is a sub-branch of Topology studying this kind of homomorphism: ‚ÄúKnot Theory‚Äù Topology - Philosophy From my point of view, there are 2 pieces of philosophy apparently exposed:\n[1] There must be a simple instance of a complex object. Therefore, a complicated problem could be reduced to a simpler one.\n[2] Since objects are in analogy under some aspects of consideration, the similar solutions may lead to the similar results.\nWhy does it draw my attention?  First of all, I love visual objects. Secondly, I love analogy. And finally, I love simplicity.  What matters? I suppose recognizing analogy among objects is not really straightforward. Fortunately, we still have several banches of science on this field, such as Topology, Synectics and so forth.\n","href":"/reasoning/topology/","title":"Topology"},{"content":"I have just read the chapter 5 of the book \u0026ldquo;Functional programming in Swift\u0026rdquo;. This chapter is about \u0026ldquo;Optionals\u0026rdquo;. And there are some interesting things I want to share.\nFirst of all, one of the most frustrating problem that developers have been experiencing is working with nil (or null). Intuitively, nil (or null) implicitly means \u0026ldquo;failure\u0026rdquo;. For instance, you look up in a dictionary but cannot find it, then you got nil:\nlet mutualFriends= [ \u0026#34;Anna\u0026#34;: 137, \u0026#34;Chris\u0026#34;: 222, \u0026#34;Dan\u0026#34;: 80, \u0026#34;Fred\u0026#34;: 152] // mutualFriends: \u0026lt;String, Int?\u0026gt; let x = mutualFriends[\u0026#34;John\u0026#34;] // x = nil As usual, we want to assign x a default value instead of nil. We can customize it in this way:\nvar x: Int = defaultValue if let y= mutualFriends[\u0026#34;John\u0026#34;] { x = y } In fact, Swift supports an operator ?? to make this sort of declaration more concise:\nlet x = mutualFriends[\u0026#34;John\u0026#34;] ?? defaultValue This means: If the left of ?? is nil, then return the value of the right. Let‚Äôs dive a little bit into the operator ??. Roughly speaking it can be defined as follows:\n// Custom ?? function func ??\u0026lt;T\u0026gt;(optional: T?, defaultValue: T) -\u0026gt; T { if let x = optional { return x } else { return defaultValue } } This function works perfectly despite one problem: defaultValue is always computed even if the optional is not nil. Generally, the reason is that it is computed before passing in the function parameters. What we desire is that the computation of the defaultValue is only executed inside the else branch.\nWe can resolve it by passing \u0026ldquo;HOW\u0026rdquo; defaultValue is computed instead of the value computed already. Intuitively, it reminds us of using a function as a parameter. And see what it leads to:\n// Custom ?? function func ??\u0026lt;T\u0026gt;(optional: T?, computeDefaultValue: () -\u0026gt; T) -\u0026gt; T { if let x = optional { return x } else { return computeDefaultValue() } Come back to our example, we can use the operator ?? like this:\nlet x = mutualFriends[\u0026#34;John\u0026#34;] ?? { myDefaultValue } A little ugly with the closure, right? Fortunately, Swift does support \u0026ldquo;autoclosure type attribute\u0026rdquo; to deal with with. Let‚Äôs look at the official function of ??:\n// Swift 1.2 ?? function func ??\u0026lt;T\u0026gt;(optional: T?, @autoclosure defaultValue: () -\u0026gt; T) -\u0026gt; T { ...... } let x = mutualFriends[\u0026#34;John\u0026#34;] ?? myDefaultValue Now, with the @autoclosure annotation, Swift is smart enough to map myDefaultValue to a corresponding function. Everything seems quite natural so far.\n","href":"/tech/optional-functional/","title":"Optional - Functional"},{"content":" B√†i vi·∫øt n√†y ƒë∆∞·ª£c migrated t·ª´ m·ªôt c√°i note tr√™n facebook c√° nh√¢n c·ªßa m√¨nh (v·ªën ch·ªâ gi·ªõi h·∫°n cho b·∫°n b√® xem).\n\u0026hellip;\nM·ªôt l·∫ßn, m√¨nh ƒë·ªçc ph∆∞∆°ng ph√°p ‚ÄúM√¥ h√¨nh h√≥a b√†i to√°n b·∫±ng nh·ªØng ng∆∞·ªùi t√Ω hon‚Äù trong s√°ch c·ªßa th·∫ßy Phan D≈©ng, th·∫•y c√°ch gi·∫£i kh√° ƒë·ªôc ƒë√°o n√™n share c√πng m·ªçi ng∆∞·ªùi. B√†i vi·∫øt n√†y h·∫ßu nh∆∞ l√† vi·∫øt l·∫°i n·ªôi dung m√† th·∫ßy Phan D≈©ng ƒë√£ tr√¨nh b√†y trong s√°ch [1]. Trong b√†i vi·∫øt n√†y, m√¨nh s·ª≠ d·ª•ng c·ª•m t·ª´ ‚Äúng∆∞·ªùi l√πn‚Äù thay v√¨ ‚Äúng∆∞·ªùi t√Ω hon‚Äù ƒë·ªÉ ti·ªán cho vi·ªác ƒë·∫∑t t√™n, nh∆∞ng v·ªÅ √Ω nghƒ©a th√¨ v·∫´n gi·ªëng nhau.\nB√†i to√°n  ‚ÄúD·ª•ng c·ª• ƒë·ªãnh l∆∞·ª£ng ch·∫•t l·ªèng c√≥ d·∫°ng c√°i b·∫≠p b√™nh (xem h√¨nh). Ph·∫ßn b√™n tr√°i l√† ph·∫ßn ƒë·ª±ng ch·∫•t l·ªèng. Khi ph·∫ßn ƒë·ª±ng ƒë∆∞·ª£c ƒë·ªï ƒë·∫ßy ch·∫•t l·ªèng, d·ª•ng c·ª• ƒë·ªãnh l∆∞·ª£ng nghi√™ng v·ªÅ b√™n tr√°i v√† ch·∫•t l·ªèng ƒë∆∞·ª£c ƒë·ªï ra. L√∫c n√†y ph·∫ßn b√™n tr√°i tr·ªü n√™n nh·∫π h∆°n v√† d·ª•ng c·ª• ƒë·ªãnh l∆∞·ª£ng tr·ªü v·ªÅ v·ªã tr√≠ ban ƒë·∫ßu.\nR·∫•t ti·∫øc, d·ª•ng c·ª• ƒë·ªãnh l∆∞·ª£ng n√≥i tr√™n l√†m vi·ªác kh√¥ng th·∫≠t ch√≠nh x√°c. Ch·∫•t l·ªèng kh√¥ng ƒë·ªï ra h·∫øt. B·ªüi v√¨, ch·ªâ c·∫ßn m·ªôt l∆∞·ª£ng ch·∫•t l·ªèng n√†o ƒë√≥ ƒë∆∞·ª£c ƒë·ªï ra, ph·∫©n ƒë·ª±ng c·ªßa d·ª•ng c·ª• ƒë·ªãnh l∆∞·ª£ng ƒë√£ ƒë·ªß nh·∫π ƒë·ªÉ chuy·ªÉn ƒë·ªông v·ªÅ v·ªã tr√≠ ban ƒë·∫ßu, gi·ªØ ch·∫•t l·ªèng c√≤n l·∫°i kh√¥ng cho ch·∫£y ra h·∫øt‚Äù H·ªèi: l√†m th·∫ø n√†o ƒë·ªÉ kh·∫Øc ph·ª•c v·∫•n ƒë·ªÅ tr√™n?\n Ti·∫øp thu th√¥ng tin C√≥ nhi·ªÅu lo·∫°i ch·∫•t l·ªèng kh√°c nhau v·ªÅ kh·ªëi l∆∞·ª£ng ri√™ng, c√¥ng d·ª•ng, ƒë·ªô nh·ªõt‚Ä¶ V·∫≠y l·ªùi gi·∫£i c·ªßa b√†i to√°n ph·∫£i d√πng ƒë∆∞·ª£c cho c√°c lo·∫°i ch·∫•t l·ªèng kh√°c nhau, ch·ª© kh√¥ng ch·ªâ ri√™ng m·ªôt lo·∫°i ch·∫•t l·ªèng nh∆∞ n∆∞·ªõc, r∆∞·ª£u.\n‚ÄúH·ªèi l√†m th·∫ø n√†o?‚Äù c√≥ nghƒ©a l√† ƒë∆∞a ra gi·∫£i ph√°p ƒë·ªÉ d·ª•ng c·ª• ƒë·ªãnh l∆∞·ª£ng ho·∫°t ƒë·ªông ch√≠nh x√°c: ƒê·ªï ch·∫•t l·ªèng ra h·∫øt kh·ªèi ph·∫ßn ƒë·ª±ng, tr·ª´ l·ªõp b√°m v√†o th√†nh v√† ƒë√°y c·ªßa ph·∫ßn ƒë·ª±ng (v√¨ l·ªõp b√°m n√†y l√† nh∆∞ nhau cho m·ªói l·∫ßn ƒë·ªï n√™n kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn ƒë·ªô ch√≠nh x√°c).\nM·ª•c ƒë√≠ch c·∫ßn ƒë·∫°t Ph·∫ßn ƒë·ª±ng c·ªßa d·ª•ng c·ª• ch·ªâ b·∫Øt ƒë·∫ßu chuy·ªÉn ƒë·ªông v·ªÅ v·ªã tr√≠ ban ƒë·∫ßu khi gi·ªçt ch·∫•t l·ªèng cu·ªëi c√πng r∆°i ra kh·ªèi ph·∫ßn ƒë·ª±ng.\nM√¥ h√¨nh h√≥a b√†i to√°n D·ª•ng c·ª• ƒë·ªãnh l∆∞·ª£ng ch·∫•t l·ªèng c√≥ 2 ph·∫ßn kh√°c nhau v·ªõi c√°c ch·ª©c nƒÉng kh√°c nhau: - Ph·∫ßn b√™n tr√°i ƒë·ª±ng ch·∫•t l·ªèng - Ph·∫ßn b√™n ph·∫£i ƒë√≥ng vai tr√≤ ƒë·ªëi tr·ªçng c·ªßa c√°i b·∫•p b√™nh\nTa bi·ªÉu di·ªÖn 2 ph·∫ßn l·∫ßn l∆∞·ª£t b·∫±ng 2 ch·ªßng ng∆∞·ªùi l√πn kh√°c nhau: Hobbit v√† Dwarf (trong phim ‚ÄúThe Lord of the Rings‚Äù (Ch√∫a t·ªÉ nh·ªØng chi·∫øc nh·∫´n)). Gi·∫£ s·ª≠ nh·ªØng ng∆∞·ªùi l√πn n√†y c√πng v√≥c d√°ng, k√≠ch th∆∞·ªõc, tr√≠ tu·ªá‚Ä¶\nM√¥ h√¨nh l·∫°i b√†i to√°n:\n Khi nh·ªØng ng∆∞·ªùi Hobbit nhi·ªÅu h∆°n nh·ªØng ng∆∞·ªùi Dwarf, c√°i b·∫≠p b√™nh nghi√™ng v·ªÅ b√™n tr√°i. Nh·ªØng ng∆∞·ªùi Hobbit b·∫Øt ƒë·∫ßu nh·∫£y ra ngo√†i. Khi nh·ªØng ng∆∞·ªùi Hobbit √≠t h∆°n nh·ªØng ng∆∞·ªùi Dwarf, c√°i b·∫•p b√™nh b·∫Øt ƒë·∫ßu chuy·ªÉn ƒë·ªông v·ªÅ v·ªã tr√≠ ban ƒë·∫ßu, mang theo c·∫£ nh·ªØng ng∆∞·ªùi Hobbit ch∆∞a k·ªãp nh·∫£y ra ngo√†i (xem h√¨nh).\n Ph√°t c√°c √Ω t∆∞·ªüng b·∫±ng ng√¥n ng·ªØ c·ªßa nh·ªØng ng∆∞·ªùi t√Ω hon √ù t∆∞·ªüng 1 Nh·ªØng ng∆∞·ªùi Hobbit suy nghƒ© m·ªôt l√°t r·ªìi b·∫£o nhau: ‚ÄúT·∫°i sao ch√∫ng ta kh√¥ng kho√°c tay nhau th·∫≠t ch·∫∑t ƒë·ªÉ kh√¥ng ai b·ªã t·ª•t l·∫°i tr√™n c√°i b·∫≠p b√™nh. L√∫c ƒë√≥, t·∫•t c·∫£ m·ªçi ng∆∞·ªùi ƒë·ªÅu nh·∫£y ra ngo√†i ƒë∆∞·ª£c‚Äù.\n√ù t∆∞·ªüng 2 Nh·ªØng ng∆∞·ªùi Hobbit nh·∫£y kh√¥ng k·ªãp ra ngo√†i l√™n ti·∫øng: ‚ÄúCh√∫ng t√¥i kh√¥ng nh·∫£y ra ƒë∆∞·ª£c. Cao qu√°! C√°c anh gi√∫p ch√∫ng t√¥i ƒë∆∞·ª£c kh√¥ng, h·ª°i ng∆∞·ªùi Dwarf?‚Äù.\nNg∆∞·ªùi Dwarf ph√≠a b√™n kia s·ªët s·∫Øng: ‚ÄúCh√∫ng t√¥i s·∫Ω ch·∫°y v√†o gi·ªØa c√°i b·∫≠p b√™nh. C√°c anh tranh th·ªß l√∫c c√°i b·∫≠p b√™nh nghi√™ng v·ªÅ ph√≠a anh m√† nh·∫£y ra ngo√†i. Xong vi·ªác th√¨ ch√∫ng t√¥i ph·∫£i tr·ªü v·ªÅ v·ªã tr√≠ c≈© c·ªßa m√¨nh‚Äù.\n√ù t∆∞·ªüng 3 Ng∆∞·ªùi Dwarf: ‚ÄúCh√∫ng ta c√≥ th·ªÉ ch·ªù nh·ªØng ng∆∞·ªùi Hobbit leo h·∫øt l√™n c√°i b·∫≠p b√™nh r·ªìi t·∫•t c·∫£ ch√∫ng ta c√πng nh·∫£y xu·ªëng ƒë·∫•t. Kh√¥ng c√≤n ƒë·ªëi tr·ªçng n·ªØa, t·∫•t c·∫£ nh·ªØng ng∆∞·ªùi Hobbit t·ª•t xu·ªëng ƒë·∫•t d·ªÖ d√†ng. L√∫c ƒë√≥, ta nh·∫£y l·∫°i l√™n c√°i b·∫≠p b√™nh‚Äù.\nPhi√™n d·ªãch √Ω t∆∞·ªüng sang ng√¥n ng·ªØ th√¥ng th∆∞·ªùng c·ªßa ng∆∞·ªùi gi·∫£i b√†i to√°n √ù t∆∞·ªüng 1 ‚ÄúKho√°c tay nhau th·∫≠t ch·∫∑t‚Äù c√≥ th·ªÉ phi√™n d·ªãch l√†: ‚Äúch·∫•t l·ªèng bi·∫øn th√†nh ch·∫•t r·∫Øn‚Äù.\nL√†m cho ch·∫•t l·ªèng trong ph·∫ßn ƒë·ª±ng tr·ªü th√†nh ch·∫•t r·∫Øn trong ch·ªõp m·∫Øt r·ªìi ƒë·ªï c·∫£ nguy√™n kh·ªëi ch·∫•t r·∫Øn ƒë√≥ ra ngo√†i. Khi ra ngo√†i, ch·∫•t r·∫Øn l·∫°i tr·ªü th√†nh ch·∫•t l·ªèng.\n√ù t∆∞·ªüng 2 L√†m cho ph·∫ßn ƒë·ªëi tr·ªçng chuy·ªÉn ƒë·ªông ch·ª© kh√¥ng c·ªë ƒë·ªãnh. Khi d·ª•ng c·ª• ƒë·ªãnh l∆∞·ª£ng nghi√™ng sang tr√°i, ph·∫ßn ƒë·ªëi tr·ªçng ch·∫°y v·ªÅ ph√≠a t√¢m. Khi ƒë·ªï ch·∫•t l·ªèng ra h·∫øt, ph·∫ßn ƒë·ªëi tr·ªçng tr·ªü v·ªÅ v·ªã tr√≠ ban ƒë·∫ßu. ƒê∆°n gi·∫£n nh·∫•t l√†, ph·∫ßn ƒë·ªëi tr·ªçn c√≥ d·∫°ng ‚Äúqu·∫£ c·∫ßu b·ªã ch·ª©a trong‚Äù ph·∫ßn b√™n ph·∫£i c·ªßa c√°i ƒë·ªãnh l∆∞·ª£ng v√† lƒÉn theo ƒë·ªô nghi√™ng c·ªßa d·ª•ng c·ª• ƒë·ªãnh l∆∞·ª£ng.\n√ù t∆∞·ªüng 3 ‚ÄúKhi ph·∫ßn ƒë·ª±ng ch·∫•t l·ªèng ƒë·∫ßy, ƒë·ªëi tr·ªçng b√™n tay ph·∫£i kh√¥ng c√≤n n·ªØa. D·ª•ng c·ª• ƒë·ªãnh l∆∞·ª£ng nghi√™ng nhanh v·ªÅ b√™n tr√°i v√† d·ªÖ d√†ng ƒë·ªï ch·∫•t l·ªèng ra ngo√†i. V·ª´a ƒë·ªï xong th√¨ ƒë·ªëi tr·ªçng b√™n tay ph·∫£i xu·∫•t hi·ªán tr·ªü l·∫°i, d·ª•ng c·ª• ƒë·ªãnh l∆∞·ª£ng quay tr·ªü v·ªÅ v·ªã tr√≠ ban ƒë·∫ßu.‚Äù\nƒê·ªëi tr·ªçng bi·∫øn m·∫•t v√† xu·∫•t hi·ªán d·ªÖ d√†ng nh∆∞ v·∫≠y c√≥ th·ªÉ l√† l·ª±c h√∫t t·ª´ tr∆∞·ªùng, ch·ª© kh√¥ng ph·∫£i l·ª±c tr·ªçng tr∆∞·ªùng: D√πng nam ch√¢m ƒëi·ªán h√∫t ph·∫ßn b√™n ph·∫£i c√°i b·∫≠p b√™nh. Khi ph·∫ßn ƒë·ª±ng ch·∫•t l·ªèng ƒë·∫ßy, ng·∫Øt d√≤ng ƒëi·ªán (ƒë·ªëi tr·ªçng bi·∫øn m·∫•t). Khi ch·∫•t l·ªèng ƒë·ªï ra h·∫øt, b·∫≠t ƒëi·ªán tr·ªü l·∫°i (ƒë·ªëi tr·ªçng xu·∫•t hi·ªán), d·ª•ng c·ª• ƒë·ªãnh l∆∞·ª£ng quay v·ªÅ v·ªã tr√≠ ban ƒë·∫ßu.\nTham kh·∫£o [1] Phan D≈©ng. C√°c ph∆∞∆°ng ph√°p s√°ng t·∫°o (quy·ªÉn 6 c·ªßa b·ªô s√°ch ‚ÄúS√°ng t·∫°o v√† ƒë·ªïi m·ªõi‚Äù). NXB Tr·∫ª. TpHCM. 2010.\n","href":"/reasoning/mo-hinh-hoa-bai-toan-bang-nhung-nguoi-ty-hon/","title":"M√¥ h√¨nh ho√° b√†i to√°n b·∫±ng nh·ªØng ng∆∞·ªùi t√Ω hon"},{"content":"","href":"/tags/creative-thinking/","title":"creative-thinking"},{"content":"","href":"/tags/triz/","title":"triz"},{"content":" B√†i vi·∫øt n√†y ƒë∆∞·ª£c migrated t·ª´ m·ªôt c√°i note tr√™n facebook c√° nh√¢n c·ªßa m√¨nh (v·ªën ch·ªâ gi·ªõi h·∫°n cho b·∫°n b√® xem).\n\u0026hellip;\nB·∫°n n√†o th√≠ch ƒë·ªông n√£o, ph√¢n t√≠ch v·∫•n ƒë·ªÅ, h√£y c√πng nhau th·∫£o lu·∫≠n th·ª≠ nh√©!\nM·ª•c ƒë√≠ch (thu·∫≠t ng·ªØ m√¥n h·ªçc PPLST\u0026amp;DM g·ªçi l√† \u0026ldquo;t√≠nh h·ªá th·ªëng\u0026rdquo;) c·ªßa post: Ch·ªâ ra nh·ªØng kh·∫£ nƒÉng c√≥ th·ªÉ ·∫£nh h∆∞·ªüng ƒë·∫øn k·∫øt qu·∫£ b√†i to√°n.\nPh√°t bi·ªÉu b√†i to√°n  Gi·∫£ s·ª≠ L·ª±c ƒëi b·ªô v·ªõi v·∫≠n t·ªëc 1 b∆∞·ªõc/gi√¢y (t∆∞∆°ng ·ª©ng v·ªõi 0.5m/s). Gi·∫£ s·ª≠ ƒëo·∫°n ƒë∆∞·ªùng AB d√†i 30m. H·ªèi sau th·ªùi gian bao l√¢u k·ªÉ t·ª´ l√∫c xu·∫•t ph√°t t·∫°i v·ªã tr√≠ A, th√¨ L·ª±c ƒëi ƒë·∫øn ƒë√≠ch B?\n Ghi ch√∫:\n N·∫øu th√¥ng tin n√†o kh√¥ng ƒë∆∞·ª£c ph√°t bi·ªÉu m√† b·∫°n c·∫ßn ƒë·∫øn, h√£y \u0026ldquo;gi·∫£ ƒë·ªãnh\u0026rdquo;. V√¨ m·ªói ng∆∞·ªùi c√≥ m·ªôt c√°ch nh√¨n kh√°c nhau ƒë·ªëi v·ªõi c√πng v·∫•n ƒë·ªÅ, n√™n hy v·ªçng c√°c b·∫°n kh√¥ng ph√°n x√©t ph√™ b√¨nh c√¢u tr·∫£ l·ªùi c·ªßa nhau. H√£y h·ªçc h·ªèi l·∫´n nhau! Khuy·∫øn kh√≠ch s·ª≠ d·ª•ng h√¨nh v·∫Ω minh h·ªça. N·∫øu cmt c·ªßa b·∫°n d√†i, khuy·∫øn kh√≠ch b·∫°n upload file word/google docs v√† t√¥ ƒë·∫≠m, in nghi√™ng nh·ªØng ch·ªó c·∫ßn thi·∫øt ƒë·ªÉ ti·ªán cho vi·ªác theo d√µi.  Hi·ªÉu b√†i to√°n Tr∆∞·ªõc khi gi·∫£i b√†i to√°n, ta c·∫ßn ph·∫£i hi·ªÉu b√†i to√°n. Vi·ªác hi·ªÉu b√†i to√°n bao g·ªìm: x√°c ƒë·ªãnh m·ª•c ƒë√≠ch c·∫ßn ƒë·∫°t, x√°c ƒë·ªãnh nh·ªØng gi·∫£ thi·∫øt s·∫µn c√≥, x√°c ƒë·ªãnh r√µ \u0026ldquo;ƒë·ªãnh nghƒ©a\u0026rdquo; v√† c√°c \u0026ldquo;nghƒ©a c√≥ th·ªÉ c√≥\u0026rdquo; c·ªßa c√°c thu·∫≠t ng·ªØ\u0026hellip;\nM·ª•c ƒë√≠ch c·∫ßn ƒë·∫°t ƒê∆∞a ra nh·ªØng kh·∫£ nƒÉng ·∫£nh h∆∞·ªüng ƒë·∫øn k·∫øt qu·∫£.\nGi·∫£ thi·∫øt  V·∫≠n t·ªëc ƒëi ƒë·ªô: 1 b∆∞·ªõc/gi√¢y = 0.5m/s. V·ªã tr√≠ xu·∫•t ph√°t: A V·ªã tr√≠ ƒë√≠ch ƒë·∫øn: B Chi·ªÅu d√†i qu√£ng ƒë∆∞·ªùng: AB = 30m.  ƒê·ªãnh nghƒ©a - nghƒ©a c√≥ th·ªÉ c√≥ ·ªû ƒë√¢y m√¨nh s·∫Ω ƒë·∫∑t ra nh·ªØng c√¢u h·ªèi ƒë·ªÉ gi√∫p ta tr√°nh hi·ªÉu thu·∫≠t ng·ªØ d∆∞·ªõi m·ªôt c√°i nh√¨n \u0026ldquo;m·∫∑c ƒë·ªãnh\u0026rdquo;:\n \u0026ldquo;ƒêi b·ªô\u0026rdquo; l√† g√¨? \u0026ldquo;V·∫≠n t·ªëc\u0026rdquo; l√† g√¨? ·ªû ƒë√¢y c√≥ hi·ªÉu \u0026ldquo;v·∫≠n t·ªëc\u0026rdquo; l√† \u0026ldquo;t·ªëc ƒë·ªô\u0026rdquo; kh√¥ng? \u0026ldquo;Qu√£ng ƒë∆∞·ªùng\u0026rdquo; l√† g√¨? C√≥ th·ªÉ c√≥ nghƒ©a n√†o c·ªßa \u0026ldquo;ƒëi b·ªô\u0026rdquo; (hay c√≥ nh·ªØng ki·ªÉu ƒëi b·ªô n√†o)?  \u0026ldquo;Ph∆∞∆°ng\u0026rdquo; di chuy·ªÉn nh∆∞ th·∫ø n√†o?\n\u0026ndash;\u0026gt; Vu√¥ng g√≥c v·ªõi AB, song song v·ªõi AB, t·∫°o th√†nh g√≥c 30 ƒë·ªô so v·ªõi m·∫∑t ƒë∆∞·ªùng, n·∫±m tr√™n m·∫∑t ƒë∆∞·ªùng nh∆∞ng ƒëi x√©o g√≥c 30 ƒë·ªô (kh√¥ng ph·∫£i ƒëi gi·ªØa ƒë∆∞·ªùng), ƒëi h√¨nh zig zag\n\u0026hellip;\u0026hellip;\u0026hellip; \u0026ldquo;H∆∞·ªõng\u0026rdquo; di chuy·ªÉn nh∆∞ th·∫ø n√†o?\n\u0026ndash;\u0026gt; G·∫ßn d·∫ßn so v·ªõi B, xa d·∫ßn so v·ªõi B, ƒë·ªïi h∆∞·ªõng ng∆∞·ª£c l·∫°i sau 10 gi√¢y  C√≥ th·ªÉ c√≥ nghƒ©a n√†o c·ªßa \u0026ldquo;v·∫≠n t·ªëc\u0026rdquo;?  V·∫≠n t·ªëc ƒë·ªÅ c·∫≠p ƒë·∫øn l√† \u0026ldquo;v·∫≠n t·ªëc ƒë·ªÅu\u0026rdquo; hay \u0026ldquo;v·∫≠n t·ªëc trung b√¨nh\u0026rdquo;?  C√≥ th·ªÉ c√≥ nghƒ©a n√†o c·ªßa \u0026ldquo;qu√£ng ƒë∆∞·ªùng\u0026rdquo;?  Qu√£ng ƒë∆∞·ªùng l√† ƒë∆∞·ªùng th·∫≥ng Qu√£ng ƒë∆∞·ªùng l√† ƒë∆∞·ªùng cong: ƒë∆∞·ªùng n√∫i Qu√£ng ƒë∆∞·ªùng l√† m·ªôt bƒÉng chuy·ªÅn (thang cu·ªën) ƒëang di chuy·ªÉn c√πng/ng∆∞·ª£c chi·ªÅu\n\u0026hellip;\u0026hellip;\u0026hellip;  C√°c tr∆∞·ªùng h·ª£p c√≥ th·ªÉ c√≥ c·ªßa A v√† B?  A l√† n√≥c nh√† cao t·∫ßng, B l√† n√≥c nh√† cao t·∫ßng ƒë·ªëi di·ªán A l√† m·ªôt con thuy·ªÅn d√†i ƒëang xu√¥i/ng∆∞·ª£c d√≤ng, B l√† m·ªôt ƒëi·ªÉm c·ªë ƒë·ªãnh\n\u0026hellip;\u0026hellip;\u0026hellip;  C√≥ th·ªÉ c√≥ nghƒ©a n√†o c·ªßa \u0026ldquo;ƒë·∫øn ƒë√≠ch\u0026rdquo;?  C·∫£ ng∆∞·ªùi qua h·∫≥n v·ªát ƒë√≠ch hay l√† ch·ªâ c·∫ßn m·ªôt b·ªô ph·∫≠n c∆° th·ªÉ ng∆∞·ªùi ch·∫°m qua v·ªát ƒë√≠ch?   Ch·∫Øc c√°c b·∫°n c≈©ng h√¨nh dung trong m·ªói tr∆∞·ªùng h·ª£p tr√™n th√¨ k·∫øt qu·∫£ b·ªã ·∫£nh h∆∞·ªüng nh∆∞ th·∫ø n√†o r·ªìi :)\nB√†n lu·∫≠n  Trong notes m√¨nh c≈©ng ƒë√£ ph√°t bi·ªÉu s·∫µn m·ª•c ƒë√≠ch c·∫ßn ƒë·∫°t l√† \u0026ldquo;ƒë∆∞a ra nh·ªØng kh·∫£ nƒÉng ·∫£nh h∆∞·ªüng ƒë·∫øn k·∫øt qu·∫£\u0026rdquo;, ch·ª© kh√¥ng ph·∫£i ƒëi t√¨m l·ªùi gi·∫£i cho b√†i to√°n ƒëi b·ªô n√†y (th·ªùi gian ƒëi ƒë·∫øn ƒë√≠ch). M·ªôt l·ªói hay m·∫Øc ph·∫£i c·ªßa ch√∫ng ta, khi g·∫∑p m·ªôt b√†i to√°n, v·∫•n ƒë·ªÅ n√†o ƒë√≥, ta hay lao v√†o ƒëi t√¨m l·ªùi gi·∫£i, coi th∆∞·ªùng b∆∞·ªõc \u0026ldquo;x√°c ƒë·ªãnh m·ª•c ƒë√≠ch c·∫ßn ƒë·∫°t\u0026rdquo;.\n V√¨ trong tr∆∞·ªùng h·ªçc, ta quen gi·∫£i nh·ªØng b√†i to√°n v·ªõi gi·∫£ thi·∫øt v√† k·∫øt lu·∫≠n ƒë·ªÅu r·∫•t r√µ r√†ng. T·∫•t c·∫£ nh·ªØng th√¥ng tin kh√°c ƒë·ªÅu ƒë∆∞·ª£c m·∫∑c ƒë·ªãnh theo ng·ªØ c·∫£nh b√†i to√°n (ch·∫≥ng h·∫°n, nh·ªØng vi·ªác di chuy·ªÉn n√™u tr√™n ta m·∫∑c ƒë·ªãnh hi·ªÉu l√† di chuy·ªÉn tr√™n Tr√°i ƒê·∫•t, ho·∫∑c L·ª±c lu√¥n s·ªëng s√≥t trong l√∫c di chuy·ªÉn). Do ƒë√≥, ta th∆∞·ªùng hay hi·ªÉu \u0026ldquo;ƒë·ªãnh nghƒ©a\u0026rdquo; v√† \u0026ldquo;c√°c nghƒ©a c√≥ th·ªÉ c√≥\u0026rdquo; theo nh·ªØng c√°ch \u0026ldquo;m·∫∑c ƒë·ªãnh\u0026rdquo;. V√† nh∆∞ c√°c b·∫°n th·∫•y, vi·ªác l√†m r√µ nghƒ©a c·ªßa c√°c thu·∫≠t ng·ªØ ƒë√£ gi√∫p ch·ªâ ra nh·ªØng kh·∫£ nƒÉng c√≥ c·ªßa b√†i to√°n m·ªôt c√°ch logic v√† ƒë·∫ßy ƒë·ªß h∆°n, h·∫°n ch·∫ø ƒë∆∞·ª£c \u0026ldquo;t√≠nh ·ª≥ t√¢m l√Ω\u0026rdquo; (psychological inertia). C√≥ th·ªÉ hi·ªÉu \u0026ldquo;t√≠nh √Ω t√¢m l√Ω\u0026rdquo; b·∫±ng m·ªôt thu·∫≠t ng·ªØ b√¨nh d√¢n (nh∆∞ng kh√¥ng ph·∫£n √°nh h·∫øt nghƒ©a c·ªßa n√≥) l√† \u0026ldquo;suy nghƒ© l·ªëi m√≤n\u0026rdquo; hay \u0026ldquo;t∆∞ duy l·ªëi m√≤n\u0026rdquo;.\n  K·∫øt lu·∫≠n  Trong gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ (b√†i to√°n), vi·ªác hi·ªÉu b√†i to√°n l√† r·∫•t quan tr·ªçng. Lu√¥n nh·ªõ x√°c ƒë·ªãnh \u0026ldquo;m·ª•c ƒë√≠ch c·∫ßn ƒë·∫°t\u0026rdquo; c·ªßa b√†i to√°n tr∆∞·ªõc. Xem x√©t c√°c \u0026ldquo;ƒë·ªãnh nghƒ©a\u0026rdquo; c·ªßa c√°c thu·∫≠t ng·ªØ v√† c√°c \u0026ldquo;nghƒ©a c√≥ th·ªÉ c√≥\u0026rdquo; c·ªßa n√≥ ƒë·ªÉ thu th·∫≠p th√¥ng tin c√≥ hi·ªáu qu·∫£ h∆°n.  P/s: Trong v√≠ d·ª• n√†y, t·∫ßm quan tr·ªçng c·ªßa m·ª©c hi·ªÉu \u0026ldquo;ƒë·ªãnh nghƒ©a\u0026rdquo; ch∆∞a ƒë∆∞·ª£c th·ªÉ hi·ªán r√µ. Thuy√™n xin ƒë∆∞a ra m·ªôt t√¨nh hu·ªëng ƒë·ªÉ c√°c b·∫°n c√πng suy ng·∫´m.\nM·ªôt s·ªë c√¥ng ty hi·ªán nay xem x√©t \u0026ldquo;s√°ng t·∫°o\u0026rdquo; l√† ti√™u ch√≠ quan tr·ªçng ƒë·ªÉ tuy·ªÉn d·ª•ng nh√¢n vi√™n, th·∫≠m ch√≠ c√≥ c√¥ng ty ƒë·∫∑t n√≥ l√™n tr√™n h√†ng ƒë·∫ßu trong \u0026ldquo;core values\u0026rdquo; c·ªßa m√¥i tr∆∞·ªùng doanh nghi·ªáp m√† c√¥ng ty h∆∞·ªõng t·ªõi. H·ªç ƒë√£ hi·ªÉu s√°ng t·∫°o nh∆∞ th·∫ø n√†o? Theo c√°c b·∫°n, \u0026ldquo;S√ÅNG T·∫†O l√† g√¨?\u0026rdquo;. N√≥ kh√¥ng ph·∫£i ch·ªâ li√™n quan ƒë·∫øn \u0026ldquo;tr√≠ t∆∞·ªüng t∆∞·ª£ng\u0026rdquo; ch·ª©! :D\n","href":"/reasoning/do-vui-hieu-bai-toan/","title":"ƒê·ªë vui: b√†i to√°n t√≠nh qu√£ng ƒë∆∞·ªùng v√† vi·ªác hi·ªÉu b√†i to√°n"},{"content":"[B√†i vi·∫øt ƒë∆∞·ª£c d·∫´n t·ª´ facebook c√° nh√¢n, vi·∫øt v√†o ƒë·∫ßu th√°ng 2\u0026frasl;2014]\n\u0026hellip;\nTr·ªùi n·∫Øng oi b·ª©c‚Ä¶ ƒêang gi·ªØa tr∆∞a.\nT√¥i ch∆∞a th·∫•y ƒë∆∞·ªùng hoa n√†o ·ªü c√°c t·ªânh, th√†nh ph·ªë trong d·ªãp t·∫øt l·∫°i ƒë√¥ng v√† nh·ªôn nh·ªãp h∆°n ng∆∞·ªùi d√¢n ƒëi xem ƒëua thuy·ªÅn. ·ªû ƒë√¢y ƒë√¥ng nh∆∞ ƒëi xem ph√°o hoa 30 t·∫øt v·∫≠y. H·∫ßu nh∆∞ t·∫•t c·∫£ d√¢n ƒë·∫£o ƒë·ªÅu ƒë·∫øn xem ng√†y ƒëua cu·ªëi c√πng (m√πng 8 t·∫øt). D·ªçc b·ªù bi·ªÉn, c·∫£ ƒëo√†n ng∆∞·ªùi ƒë·ª©ng chen ch√∫c nhau, t√¨m m·ªôt ch·ªó c√≥ th·ªÉ nh√¨n th·∫•y ƒë∆∞·ª£c c·∫£ qu√£ng ƒë∆∞·ªùng ƒëua. ƒê∆∞·ªùng x√° ƒë√¥ng ƒë√∫c, t·∫•p n·∫≠p. Ng∆∞·ªùi ta n√≥i chuy·ªán r√¥m r·∫£, b√†n t√°n nhau v·ªÅ vi·ªác c√° ƒë·ªô, so s√°nh c√°c con thuy·ªÅn v·ªõi nhau, ti√™n li·ªáu con n√†o s·∫Ω th·∫Øng. D√π √¥ xanh √¥ ƒë·ªè tr·∫£i d·ªçc kh·∫Øp tri·ªÅn b·ªù bi·ªÉn. M·ªôt s·ªë ng∆∞·ªùi mu·ªën nh√¨n th·∫•y r√µ h∆°n th√¨ ra ngo√†i nh·ªØng thuy·ªÅn th√∫ng neo ƒë·∫≠u g·∫ßn b·ªù‚Ä¶\nƒêi d·ªçc b·ªù bi·ªÉn, chen v√†o m√£i m·ªõi ƒë∆∞·ª£c m·ªôt ch·ªó coi ƒë∆∞·ª£c. T√¥i ng√≥ nghi√™ng ng√≥ d·ªçc, th√≠ch th√∫ v·ªõi kh√¥ng kh√≠ t·∫•p t·∫≠p n∆°i ƒë√¢y. C√≥ m·ªôt ƒëi·ªÅu ng·∫°c nhi√™n khi t√¥i nh√¨n xung quanh: d√π c·ª• gi√† hay tr·∫ª n√≠t, ai n·∫•y c≈©ng chen ch√¢n ƒëi xem ƒëua thuy·ªÅn gi·ªØa tr∆∞a tr·ªùi n·∫Øng ƒë·ªët. Th·∫≠m ch√≠ c√≥ v√†i c√¥, tay c·∫ßm chi·∫øc √¥, ·∫µm cho con m·ªõi sinh m·∫•y th√°ng tu·ªïi b√∫. Th·∫≠t ƒë√∫ng v·ªõi c√°i ch·∫•t ‚Äúgan l√¨‚Äù c·ªßa ng∆∞·ªùi L√Ω S∆°n‚Ä¶\n‚Ä¶\nQu√£ng ƒë∆∞·ªùng ƒëua c·ªßa m·ªói thuy·ªÅn ƒë∆∞·ª£c ƒë√°nh d·∫•u b·∫±ng c√°c hoa ti√™u. C√≥ 2 hoa ti√™u 2 ƒë·∫ßu v√† 1 hoa ti√™u ·ªü gi·ªØa, g·ªçi l√† hoa ti√™u ‚Äúr·ªën‚Äù. C√°c hoa ti√™u 2 ƒë·∫ßu c·ªßa ƒë∆∞·ªùng ƒëua ch·∫µn v√† ƒë∆∞·ªùng ƒëua l·∫ª ƒë∆∞·ª£c c·∫Øm so le v·ªõi nhau ƒë·ªÉ tranh ƒë·ª•ng thuy·ªÅn khi quay ƒë·∫ßu. M·ªói thuy·ªÅn s·∫Ω xu·∫•t ph√°t tr·ª´ hoa ti√™u r·ªën. ƒëi qua hoa ti√™u 2 ƒë·∫ßu r·ªìi quay tr·ªü v·ªÅ ƒë√∫ng v·ªã tr√≠ ban ƒë·∫ßu, c·ª© th·∫ø b∆°i 4 v√≤ng l√† ho√†n th√†nh ph·∫ßn ƒëua. 8 con thuy·ªÅn c·ªßa c·∫£ 2 x√£ An H·∫£i v√† Anh Vƒ©nh. M·ªói x√£ c√≥ 4 thuy·ªÅn: Long, L√¢n, Quy, Ph·ª•ng. C·ª© m·ªói l·∫ßn thuy·ªÅn ƒë·ªôi n√†o ƒë·∫øn hoa ti√™u, ho·∫∑c ƒë·ªôi n√†o c√≥ s·ª± b·ª©t ph√° l√† nh·ªØng ng∆∞·ªùi c·ªï v≈© cho ƒë·ªôi ƒë√≥ l·∫°i la l√™n kh√≠ th·∫ø‚Ä¶ N·∫øu b·∫°n ch·ªçn cho m√¨nh 1 thuy·ªÅn ƒë·ªÉ c·ªï v≈©, t√¥i d√°m c√° v·ªõi b·∫°n ƒë√¢y s·∫Ω l√† d·ªãp ƒë·ªÉ b·∫°n tr·ªï t√†i la h√©t, 1 d·ªãp ƒë·ªÉ b·∫°n c√πng ƒÉn m·ª´ng v·ªõi th√†nh c√¥ng c·ªßa ƒë·ªôi v√† kh√¥ng th·ªÉ n√†o bu·ªìn h∆°n khi ƒë·ªôi ƒë√≥ kh√¥ng chi·∫øn th·∫Øng.\nK·∫øt qu·∫£ l·∫ßn ƒëua th·ª© nh·∫•t ƒë√£ c√≥, 4 thuy·ªÅn v·ªÅ s·ªõm nh·∫•t s·∫Ω b·ªëc thƒÉm ti·∫øp ƒë·ªÉ ƒë·∫ßu ti·∫øp l·∫ßn th·ª© 2, l·∫ßn ƒëua quy·∫øt ƒë·ªãnh k·∫øt qu·∫£. T√¥i th·∫•y th·∫≠t ti·∫øc v√¨ m√¨nh ph·∫£i ra c·∫£ng ƒë·ªÉ k·ªãp t√†u v·ªÅ Sa K·ª≥, kh√¥ng c√πng ƒÉn m·ª´ng v·ªõi chi·∫øn th·∫Øng c·ªßa ƒë·ªôi v√¥ ƒë·ªãch.\n‚Ä¶\nƒê·ªëi v·ªõi nh·ªØng du kh√°ch ƒë·∫øn thƒÉm v√πng ƒë·∫•t ƒë·∫£o n√†y, kh√¥ng kh√≠ t·∫øt ·ªü ƒë√¢y v·∫´n c√≤n qu√° r·ªôn r√†ng!\nTr√™n t√†u cao t·ªëc An Vƒ©nh v·ªÅ l·∫°i c·∫£ng Sa K·ª≥, t√¥i review l·∫°i h√†nh tr√¨nh 2 ng√†y v·ª´a r·ªìi. Chuy·∫øn ƒëi n√†y ch·ªâ m·ªõi kh√°m ph√° 1\u0026frasl;2 s·ª± th√∫ v·ªã c·ªßa L√Ω S∆°n, nh∆∞ng ƒë√£ c√≥ bi·∫øt bao nhi√™u ƒëi·ªÅu b·∫•t ng·ªù. Khoanh tr√≤n v·ªã tr√≠ ‚Äúƒë·∫£o b√©‚Äù tr√™n b·∫£n ƒë·ªì, ƒë·ªÉ d√†nh cho chuy·∫øn ƒëi l·∫ßn th·ª© 2 ƒë·∫øn v·ªõi v√πng ƒë·∫•t c·ªßa n·∫Øng, gi√≥ v√† bi·ªÉn‚Ä¶ T√¥i note l·∫°i trong nh·∫≠t k√Ω h√†nh tr√¨nh nh·ªØng ƒëi·ªÅu m√† t√¥i c·∫£m th·∫•y th√∫ v·ªã nh·∫•t m√† t√¥i kh√°m ph√° ƒë∆∞·ª£c ƒë·∫øn th·ªùi ƒëi·ªÉm n√†y: - C·∫£nh ƒë·∫πp L√Ω S∆°n hoang s∆° tuy·ªát v·ªùi. - Bi·ªÉn L√Ω S∆°n r·∫•t r·∫•t trong. - Vi·ªác th·ªù c√∫ng ·ªü L√Ω S∆°n r·∫•t ƒë∆∞·ª£c quan t√¢m. - Con ng∆∞·ªùi L√Ω S∆°n r·∫•t ‚Äúgan l√¨‚Äù, v√† c≈©ng r·∫•t hi·∫øu kh√°ch.\nT·∫°m bi·ªát L√Ω S∆°n v√† h·∫πn g·∫∑p l·∫°i!\n‚Äì M√πng 7-8 t·∫øt Gi√°p Ng·ªç 2014 ‚Äì\n","href":"/misc/ly-son-tap-7/","title":"[L√Ω S∆°n v1] T·∫≠p cu·ªëi: H·ªôi ƒëua thuy·ªÅn T·ª© linh"},{"content":"","href":"/tags/travel/","title":"travel"},{"content":"[B√†i vi·∫øt ƒë∆∞·ª£c d·∫´n t·ª´ facebook c√° nh√¢n, vi·∫øt v√†o ƒë·∫ßu th√°ng 2\u0026frasl;2014]\n\u0026hellip;\nN∆°i ƒë√¢y c≈©ng c√≥ 1 v√°ch ƒë√° d·ª±ng ƒë·ª©ng cao nh∆∞ ·ªü Hang C√¢u. N·∫øu ·ªü Hang C√¢u, v√°ch ƒë√° ƒë∆∞·ª£c n∆∞·ªõc bi·ªÉn b√†o m√≤n nh·∫µn th√¨ ·ªü ch√πa Hang, ta th·∫•y ƒë√° nh√¥ ra t·ª´ng phi·∫øn. Ph·∫ßn ch√¢n v√°ch ƒë√° l√µm s√¢u v√†o b√™n trong h∆°n nhi·ªÅu so v·ªõi ·ªü Hang C√¢u. Ch√πa n·∫±m trong hang, ƒë∆∞·ª£c t·∫°o ra t·ª´ ph·∫ßn l√µm ƒë√≥.\nTh·∫≠t may m·∫Øn khi t√¥i v√†o ƒë√∫ng l√∫c c√∫ng ƒë∆∞·ªùng. Ti·∫øng m·ªè k√™u, ti·∫øng t·ª•ng kinh vang v·ªçng kh·∫Øp hang cho ta c·∫£m gi√°c th·∫≠t b√¨nh an. T√¥i th·∫•y r·∫•t th√¢n thu·ªôc v·ªõi c√°i x·ª© s·ªü ƒë·∫•y ·∫Øp nh·ªØng ƒëi·ªÅu th√∫ v·ªã n√†y‚Ä¶ Ti·∫øng t·ª•ng kinh l√∫c nhanh l√∫c ch·∫≠m, l√∫c ‚Äúh·ª£p kinh‚Äù l√∫c ‚Äúƒë·ªôc kinh‚Äù, l√∫c ƒë·ªÅu gi·ªçng, l√∫c l√™n gi·ªçng. Nghe khoan kho√°i v√¥ c√πng.\nT√¥i ph√°t hi·ªán ra kinh ph·∫≠t c≈©ng mang nh·ªØng giai ƒëi·ªáu v√¥ c√πng ƒë·∫∑c s·∫Øc, n√≥ nh∆∞ 1 b·∫£n tr∆∞·ªùng ca. C√≥ nhi·ªÅu ph√¢n ƒëo·∫°n. M·ªói ph√¢n ƒëo·∫°n c√≥ 1 c√°ch t·ª•ng kh√°c nhau. V√† c√°i th√∫ v·ªã nh·∫•t khi nghe l√† ƒë∆∞·ª£c nghe ƒëo·∫°n chuy·ªÉn gi·ªØa 2 ph√¢n ƒëo·∫°n, khi ch·ªâ c√≥ 1 ng∆∞·ªùi t·ª•ng v√† l√™n gi·ªçng. N√≥ c≈©ng gi·ªëng nh∆∞ th·ªùi kh·∫Øc giao m√πa, ch√∫t luy·∫øn ti·∫øc v·ªõi m√πa c≈© v√† ch√∫t h√°o h·ª©c khi m√πa m·ªõi ƒë·∫øn.\nRa kh·ªèi ch√πa, ti·∫øng t·ª•ng kinh d·∫ßn nh·∫°t trong ti·∫øng s√≥ng. Nh∆∞ng ti·∫øng m·ªè g√µ v·∫´n c√≤n nhanh v√† ƒë·ªÅu nh·ªãp. Nh·ªØng du kh√°ch v√† ng∆∞·ªùi d√¢n b·∫£n x·ª© ƒë·∫øn m·ªôt l√∫c ƒë√¥ng h∆°n‚Ä¶\n","href":"/misc/ly-son-tap-6/","title":"[L√Ω S∆°n v1] T·∫≠p 6: Ch√πa Hang"},{"content":"[B√†i vi·∫øt ƒë∆∞·ª£c d·∫´n t·ª´ facebook c√° nh√¢n, vi·∫øt v√†o ƒë·∫ßu th√°ng 2\u0026frasl;2014]\n\u0026hellip;\nSau m·ªôt ƒë√™m ng·ªß ·ªü ch√πa Vƒ©nh √Çn, 5h20 ch√∫ng t√¥i xu·∫•t ph√°t b·∫±ng xe m√°y. Tr·ªùi l·ªù m·ªù, nh·ªØng con thuy·ªÅn neo ƒë·∫≠u g·∫ßn nh·ªØng b√£i ƒë√° ƒë·ª©ng l·∫∑ng y√™n. Kh√¥ng gian tƒ©nh m·ªãch, kh√¥ng c√≥ ti·∫øng s√≥ng, ch·ªâ c√≥ ti·∫øng xe m√°y ch·∫°y bon bon ƒëi v·ªÅ ph√≠a n√∫i Th·ªõi L·ªõi‚Ä¶\nV·ª´a leo l√™n ƒë·ªânh n√∫i, t√¥i v·ª´a ng√≥ nghi√™ng ng√≥ d·ªçc xem m·∫∑t tr·ªùi ƒë√£ m·ªçc ch∆∞a. Tr·ªùi ƒë√£ chuy·ªÉn m√†u h·ªìng t√≠t ƒë·∫±ng xa. M·∫∑t tr·ªùi ƒë√£ chui ƒë·∫ßu ra kh·ªèi l·ªõp s∆∞∆°ng m√π. C≈©ng nh∆∞ ho√†ng h√¥n, b√¨nh minh ch·ªâ t·ªìn t·∫°i trong ch·ªëc l√°t ng·∫Øn ng·ªßi. N·∫øu ng·ªìi tr√™n ƒë·ªânh n√∫i ng·∫Øm ch·ªù ƒë·ªÉ xem c·∫£nh ·∫•y v·ªõi t√¢m tr·∫°ng tr√¥ng ch·ªù h·∫øt th·∫©y, c√≥ th·ªÉ ta s·∫Ω h·ª•t h·∫´ng ƒë√¥i ch√∫t v√¨ n√≥ qu√° nhanh.\nC√≥ m·ªôt ƒëi·ªÅu t√¥i nh·∫≠n ra l√†, m·∫∑t tr·ªùi l√∫c ·∫•y ch·ªâ ƒë·∫πp khi tr·∫£i m√¨nh tr√™n ·ªü c·∫£ b·∫ßu tr·ªùi v√† l·ªõp s∆∞∆°ng m√π d√†y ƒë·∫∑c cu·ªëi ch√¢n tr·ªùi. Khi ·∫•y ta th·∫•y r√µ nguy√™n h√¨nh d·∫°ng c·ªßa n√≥ v·ªõi ƒë∆∞·ªùng n√©t h·∫øt s·ª©c r√µ v√† s·∫Øc. C√≤n khi ƒë√£ bay ra kh·ªèi l·ªõp s∆∞∆°ng m√π, n√≥ s√°ng ch√≥i l√≥a khi·∫øn ta kh√¥ng th·ªÉ nh√¨n ƒë∆∞·ª£c b·∫±ng m·∫Øt th∆∞·ªùng.\nCh√∫ng t√¥i tranh th·ªß ch·ª•p v√†i b·ª©c h√¨nh r·ªìi xu·ªëng d·ªëc, qua b√™n C·ªôt c·ªù ch·ª•p ti·∫øp. N·∫Øng ƒë√£ ·∫•m, ch√∫ng t√¥i r·ªùi n∆°i ƒë√¢y ƒë·ªÉ ti·∫øp t·ª•c v·ªõi ƒëi·ªÉm ƒë·∫øn ti·∫øp theo: ch√πa Hang.\n","href":"/misc/ly-son-tap-5/","title":"[L√Ω S∆°n v1] T·∫≠p 5: B√¨nh minh tr√™n n√∫i Th·ªõi L·ªõi"},{"content":"[B√†i vi·∫øt ƒë∆∞·ª£c d·∫´n t·ª´ facebook c√° nh√¢n, vi·∫øt v√†o ƒë·∫ßu th√°ng 2\u0026frasl;2014]\n\u0026hellip;\nCh√∫ng t√¥i ti·∫øp t·ª•c cu·ªôc h√†nh tr√¨nh v·ªõi ƒë√≠ch ƒë·∫øn l√† ch√πa ƒê·ª•c v√† ƒë·ªânh Li√™m T·ª±. Ch√πa ƒê·ª•c t·ªça l·∫°c ·ªü th√¥n T√¢y, x√£ An Vƒ©nh, c√°ch C·∫£ng L√Ω S∆°n kh√¥ng xa, ch∆∞a t·ªõi 1km. Ch√πa n·∫±m tr√™n gi·ªØa s∆∞·ªùn n√∫i. Ta ph·∫£i leo men theo s∆∞·ªùn n√∫i ƒë√∫ng 100 b·∫≠c thang th√¨ g·∫∑p ch√πa. ·∫Æt h·∫≥n nh·ªØng b·∫°n tr·∫ª ƒëi v·ªõi s·ª± h√°o h·ª©c trong ng∆∞·ªùi khi l√™n c√°c b·∫≠c th·ªÅm ƒë·ªÅu gi·ªëng nh∆∞ t√¥i: v·ª´a leo v·ª´a ƒë·∫øm s·ªë b·∫≠c thang‚Ä¶ 100 b·∫≠c thang ch√≥ng qua, ng√¥i ch√πa ƒë∆°n gi·∫£n, h√¨nh th√†nh 1 c√°ch t·ª± nhi√™n do v√°ch n√∫i l√µm s√¢u v√†o b√™n trong. Nh∆∞ng ƒë·ªëi v·ªõi t√¥i, c√°i th·ª±c s·ª± h·∫•p d·∫´n t√¥i ch∆∞a ph·∫£i ch√πa ƒê·ª•c m√† l√† ƒë·ªânh Li√™m T·ª±.\nƒê·ªàNH LI√äM T·ª∞ n·∫±m tr√™n 1 ng·ªçn n√∫i c√≥ h√¨nh h√¨nh t·ª© di·ªán, h∆°i nghi√™ng ra ngo√†i bi·ªÉn. T·ª´ ngo√†i c·ªïng ph√≥ng t·∫ßm m·∫Øt l√™n ƒë·ªânh Li√™m T·ª±, t√¥i nom th·∫•y v√†i b·∫°n n·ªØ ƒë·ª©ng tr√™n ƒë·ªânh ch·ª•p h√¨nh. V√†i ng∆∞·ªùi ng·ªìi h√≥ng m√°t, ch√¢n bu√¥ng th·∫£ xu·ªëng theo m·∫∑t d·ªëc, h∆∞·ªõng ra bi·ªÉn. B·∫°n th·ª≠ t∆∞·ªüng t∆∞·ª£ng c·∫£nh m·ªôt ng∆∞·ªùi ƒë·ª©ng tr√™n ch√≥p ƒë·ªânh c·ªßa chi·∫øc n√≥n, hay m·ªôt ng∆∞·ªùi ng·ªìi ngay v·ª±c n√∫i. Ch·ªâ c·∫ßn m·ªôt c∆°n gi√≥ m·∫°nh, hay 1 c√°i gi·∫≠t m√¨nh nh·∫π, ng∆∞·ªùi ƒë√≥ c√≥ th·ªÉ tan x√°c ·ªü ph√≠a d∆∞·ªõi ch√¢n n√∫i. Nghƒ© ƒë·∫øn c·∫£nh ·∫•y, t√¥i l·∫°nh x∆∞∆°ng s·ªëng ng∆∞·ªùi‚Ä¶\nHai ƒë·ª©a h√¨ h·ª•c leo d·ªçc s∆∞·ªùn n√∫i, b√°m b·ª•i c·ªè m√† leo. Kh√¥ng d·ªÖ nh∆∞ t√¥i t∆∞·ªüng. Leo 1 ƒëo·∫°n th√¨ kh√¥ng c√≤n ƒë∆∞·ªùng m√≤n ƒë·ªÉ leo n·ªØa. C·ªè to√†n nh·ªØng c·ªè l√°, n·∫Øm v√†o r·∫•t d·ªÖ ƒë·ª©t. V·∫≠y m√† con b√© Ph·ª•ng n√≥ leo thoƒÉn tho·∫Øt‚Ä¶\nL√™n t·ªõi ƒë·ªânh r·ªìi th·∫•y r·∫•t an to√†n. C√≥ 1 qu√£ng v·ª´a ƒë·ªß ch·ªó ƒë·ªÉ v√†i ng∆∞·ªùi ng·ªìi, ƒë·ª©ng. ·ªû ƒë√¢y gi√≥ kh√¥ng m·∫°nh l·∫Øm. T√¥i hi·ªÉu v√¨ sao ng∆∞·ªùi ta ƒë·ª©ng ƒë∆∞·ª£c tr√™n ƒë√¢y m√† kh√¥ng t√© ng√£ nh∆∞ trong tr√≠ t∆∞·ªüng t∆∞·ª£ng c·ªßa t√¥i. Ch√≠nh c·∫£m gi√°c s·ª£ ng√£ s·∫Ω khi·∫øn ng∆∞·ªùi ta d·ªÖ ng√£ h∆°n. Ch√∫ng t√¥i ng·ªìi tr√™n ƒë·ªânh ng·∫Øm c·∫£nh v·∫≠t ph√≠a d∆∞·ªõi n√∫i. Bi·ªÉn ·ªü ƒë√¢y √≠t s√≥ng, ta ch·ªâ nghe ti·∫øng gi√≥, ti·∫øng ƒë√πa gi·ª°n c·ªßa m·∫•y b·∫°n tr·∫ª, c·ªßa nh·ªØng nh√≥m picnic ·ªü v√πng ƒë·ªìi g·∫ßn ch√πa ƒê·ª•c. H√£y tr·∫£i nghi·ªám c·∫£m gi√°c khi ·ªü tr√™n ƒë√¢y: l·∫Øng nghe nh·ªØng √¢m thanh; vung t·∫ßm m·∫Øt ra th·∫≠t xa nh√¨n nh·ªØng c·∫£nh v·∫≠t b√™n d∆∞·ªõi th·∫≠t nh·ªè b√©, ƒë·ªÉ th·∫•y ta to l·ªõn c·ª° n√†o; th·∫≠m ch√≠ n·∫øu ƒë∆∞·ª£c, h√£y l√†m nh·ªØng h√†nh ƒë·ªông h∆°i ƒëi√™n r·ªì m·ªôt t√≠ nh∆∞ h√©t th·∫≠t to, ‚Äúti·ªÉu‚Äù xu·ªëng t·ª´ ƒë·ªânh n√∫i. M√¨nh tin r·∫±ng, b·∫°n s·∫Ω th·∫•y r·∫•t th√≠ch th√∫ v·ªõi ƒëi·ªÅu ƒë√≥‚Ä¶\n‚Ä¶ Sau nhi·ªÅu l·∫ßn ƒë·ªÉ √Ω, t√¥i ph√°t hi·ªán ra 1 ƒëi·ªÅu th√∫ v·ªã. C√≥ nhi·ªÅu ng∆∞·ªùi d√¢n ƒë·∫£o leo l√™n ƒë√¢y c√πng con c·ªßa m√¨nh. Nh·ªØng ƒë·ª©a nh√≥c ch·ªâ m·ªõi ch·ª´ng 10 tu·ªïi. Nh∆∞ng ba m·∫π c·ªßa ch√∫ng ƒë·ªÉ cho ch√∫ng t·ª± leo. V√† c√≥ nhi·ªÅu l√∫c, ch√∫ng ƒë·ª©ng ·ªü m·ªôt g√≥c m√† ch·ªâ c·∫ßn tr∆∞·ª£t ph·∫£i 1 h√≤n s·ªèi nh·ªè l√† c√≥ th·ªÉ l·ªôn b√°t nh√°o xu·ªëng ch√¢n n√∫i. Th·∫ø nh∆∞ng ba m·∫π ch√∫ng v·∫´n kh√¥ng h·ªÅ nao n√∫ng, lo s·ª£, hay bu√¥ng 1 c√¢u nh·∫Øc c·∫©n th·∫≠n. T√¥i th·∫•y l·∫° v√¨ ·ªü ƒë·∫•t ƒë·∫£o n√†y, ng∆∞·ªùi ta ‚ÄúGAN L√å‚Äù qu√°. T√¥i chia s·∫ª v·ªõi Ph·ª•ng ƒëi·ªÅu ƒë√≥ v√† bi·∫øt ƒë∆∞·ª£c s·ª± th·∫≠t ƒë√∫ng l√† nh∆∞ v·∫≠y. N√≥ xu·∫•t ph√°t t·ª´ vi·ªác ng∆∞·ªùi ta th∆∞·ªùng xuy√™n ƒëi bi·ªÉn, s·ªëng ch·∫øt l√† m·ªôt chuy·ªán h·∫øt s·ª©c b√¨nh th∆∞·ªùng. Khi nh·ªï neo, ng∆∞·ªùi ta s·∫µn s√†ng ch·∫•p nh·∫≠n m·ªôt c√°i ch·∫øt ngo√†i ƒë·∫°i d∆∞∆°ng. T·ª´ ƒë√≥, t√¥i r√∫t ra ƒë∆∞·ª£c m·ªôt ƒëi·ªÅu: S·ª± ‚Äúgan l√¨‚Äù kh√¥ng ch·ªâ c√≥ ·ªü m·ªôt v√†i ng∆∞·ªùi, m√† n√≥ c√≥ ·ªü h·∫ßu h·∫øt ng∆∞·ªùi d√¢n ƒë·∫£o, t·ª´ ng∆∞·ªùi l·ªõn cho ƒë·∫øn tr·∫ª nh·ªè. N√≥ nh∆∞ m·ªôt TRUY·ªÄN TH·ªêNG v√¥ t√¨nh ƒë∆∞·ª£c truy·ªÅn l·∫°i cho c√°c th·∫ø h·ªá m√† ch√≠nh h·ªç c≈©ng kh√¥ng nh·∫≠n ra ƒëi·ªÅu ƒë√≥.\nCh√∫ng t√¥i leo xu·ªëng n√∫i ƒë·ªÉ qua c·ªïng T√≤ V√≤ ng·∫Øm ho√†ng h√¥n. Leo xu·ªëng kh√≥ h∆°n nhi·ªÅu so v·ªõi leo l√™n. M·ªôt l·∫ßn n·ªØa, t√¥i b·ªã Ph·ª•ng b·ªè 1 ƒëo·∫°n r·∫•t xa. V√† t√¥i d·∫ßn b·∫Øt k·ªãp t·ªëc ƒë·ªô c·ªßa Ph·ª•ng sau khi h·ªçc ƒë∆∞·ª£c 1 b√†i h·ªçc: ch·ªâ nh√¨n ƒë∆∞·ªùng ƒëi, kh√¥ng nh√¨n xung quanh‚Ä¶\n\u0026hellip;\u0026hellip;\nC·ªîNG T√í V√í bu·ªïi chi·ªÅu ho√†ng h√¥n‚Ä¶\nM·∫∑t tr·ªùi xu·ªëng n√∫i. Nh·ªØng b√£i ƒë√° ƒëen tr·∫£i d·ªçc tri·ªÅn b·ªù bi·ªÉn. Ng·ªìi nghe ti·∫øng s√≥ng v·ªó, nh√¨n ng·∫Øm m·∫∑t tr·ªùi l·∫∑n, nh·∫Øm m·∫Øt c·∫£m nh·∫≠n t·ª´ng con gi√≥; nh·ªØng lo toan nh·ªçc nh·∫±n c≈©ng s·∫Ω t·∫°m g√°c qua 1 b√™n, thay v√†o ƒë√≥ l√† s·ª± say ƒë·∫Øm c√°i v·∫ª ƒë·∫πp hoang s∆° c·ªßa thi√™n nhi√™n n∆°i ƒë√¢y.\nKho·∫£nh kh·∫Øc ho√†ng h√¥n di·ªÖn ra th·∫≠t ch√≥ng v√°nh, Ch·ªâ m·ªõi v·ª´a ch·∫°m m·∫∑t n√∫i m√† ch∆∞a ƒë√†y 1 ph√∫t c√°i ƒë·ªëm s√°ng ƒë√£ t·∫Øt m·∫•t ƒë·ªÉ l·∫°i c√°i vi·ªÅn xanh do ch√≠nh m√¨nh t∆∞·ªüng t∆∞·ª£ng l√† m·∫∑t tr·ªùi v·∫´n c√≤n n·∫±m ·ªü ƒë√≥. C√≥ m·ªôt ch√∫t ti·∫øc nu·ªëi, c·ª© nh∆∞ th·ªÉ ƒë√¢y l√† ph√∫t t·∫°m bi·ªát:\n ‚ÄúAnh ph·∫£i v·ªÅ th√¥i xa em th√¥i\nHo√†ng h√¥n y√™n l·∫∑ng c≈©ng theo v·ªÅ\nGi·ªçt n·∫Øng cu·ªëi ng√†y r∆°i xu·ªëng t√≥c\nM√† l·ªùi t·ª´ bi·ªát ch·∫≥ng l√™n m√¥i‚Äù ‚Äì Chia tay ho√†ng h√¥n [NS. Thu·∫≠n Y·∫øn]\n Th·ª≠ t∆∞·ªüng t∆∞·ª£ng n·∫øu nh∆∞ 1 chuy·∫øn ƒëi k·∫øt th√∫c trong gi√¢y ph√∫t n√†y th√¨ bu·ªìn bi·∫øt ch·ª´ng n√†o :D. T√¥i th·∫•y r·∫•t vui v√¨ m√¨nh c√≤n ƒë·∫øn 1 ng√†y n·ªØa ƒë·ªÉ kh√°m ph√°. T·∫°m bi·ªát ho√†ng h√¥n tr√™n b√£i bi·ªÉn, ƒë·ªÉ ng√†y mai ch√†o ƒë√≥n b√¨nh minh tr√™n ƒë·ªânh n√∫i.\np/s: V·∫≠y l√† h√†nh tr√¨nh ng√†y th·ª© nh·∫•t k·∫øt th√∫c th·∫≠t th√∫ v·ªã! V√† vi·ªác xin ng·ªß ·ªü ch√πa Vƒ©nh √Çn s·∫Ω l√†m cho chuy·∫øn ƒëi c·ªßa m√¨nh th√™m th√∫ v·ªã h∆°n r·∫•t nhi·ªÅu.\n","href":"/misc/ly-son-tap-3-4/","title":"[L√Ω S∆°n v1] T·∫≠p 3,4: Ch√πa ƒê·ª•c, s·ª± th√∫ v·ªã c·ªßa d√¢n ƒë·∫£o \u0026 ho√†ng h√¥n"},{"content":"[B√†i vi·∫øt ƒë∆∞·ª£c d·∫´n t·ª´ facebook c√° nh√¢n, vi·∫øt v√†o ƒë·∫ßu th√°ng 2\u0026frasl;2014]\n\u0026hellip;\nC√≥ 2 may m·∫Øn r·∫•t l·ªõn trong chuy·∫øn ƒëi c·ªßa m√¨nh. Th·ª© nh·∫•t, m√¨nh c√≥ 1 ƒë·ª©a b·∫°n t√™n Ph·ª•ng, l√† ng∆∞·ªùi d√¢n ·ªü ƒë√¢y, ƒë√£ gi√∫p ƒë·ª° m√¨nh su·ªët 2 ng√†y trong vai tr√≤ l√† 1 h∆∞·ªõng d·∫´n vi√™n. May m·∫Øn th·ª© hai l√†, m√¨nh ƒë∆∞·ª£c quen v·ªõi nh·ªØng ng∆∞·ªùi b·∫°n c·ªßa Ph·ª•ng: Tr·∫°ch, Th·ª´a, C√≥, H·ªìng, T√≠ N·ªã, M·ªπ, Tuy·∫øt. Th·∫≠t t√¨nh c·ªù, h√¥m ·∫•y l√† sinh nh·∫≠t Trach. M·ªçi ng∆∞·ªùi r·ªß nhau ƒëi Hang C√¢u, v√† dƒ© nhi√™n m√¨nh c≈©ng nh·∫≠p b·ªçn\u0026hellip;\nHang C√¢u n·∫±m ·ªü x√£ An H·∫£i, d∆∞·ªõi ch√¢n n√∫i Th·ªõi L·ªõi, c√°ch C·∫£ng L√Ω S∆°n kho·∫£ng 20ph√∫t xe m√°y. T·ª´ Hang C√¢u c√≥ th·ªÉ nh√¨n th·∫•y h·∫£i ƒëƒÉng L√Ω S∆°n, c√°ch ƒë√≥ kh√¥ng xa\u0026hellip; ·ªû ƒë√¢y c√≥ 1 v√°ch ƒë√° d·ª±ng ƒë·ª©ng cao. V√°ch ƒë√° b·ªã gi√≥ bi·ªÉn b√†o m√≤n nh·∫µn, ph·∫ßn ch√¢n v√°ch l√µm v√†o b√™n trong. ·∫Æt h·∫≥n ai ƒë·∫øn hang C√¢u c≈©ng s·∫Ω ph·∫£i th√≠ch th√∫ b·ªüi v·∫ª ƒë·∫πp c·ªßa n√≥: M·ªôt b√™n l√† s·ª± h√πng vƒ© c·ªßa v√°ch ƒë√° cao, m·ªôt b√™n l√† s·ª± hoang s∆° c·ªßa bi·ªÉn. ƒêi·ªÅu ·∫•n t∆∞·ª£ng nh·∫•t c·ªßa m√¨nh ƒë·ªëi v·ªõi n∆°i n√†y l√† n∆∞·ªõc bi·ªÉn trong v·∫Øt. M·∫∑t ƒë√°y bi·ªÉn to√†n ƒë√° nh·ªè, san h√¥ v·ª•n, c√°t tr·∫Øng (lo·∫°i c√°t m√† khi n∆∞·ªõc v√†o n√≥ v·∫´n m√†u tr·∫Øng ch·ª© kh√¥ng ph·∫£i m√†u v√†ng n√¢u). ·ªû nh·ªØng ch·ªó nhi·ªÅu ƒë√°y c√°t tr·∫Øng, nh√¨n t·ª´ tr√™n xu·ªëng n∆∞·ªõc bi·ªÉn c√≥ m√†u xanh cyan r·∫•t ƒë·∫πp. C√°ch ƒë√≥ kh√¥ng xa c√≥ nh·ªØng r·∫∑ng ƒë√° ƒëen, M·ªói l·∫ßn s√≥ng ƒë·∫≠p v√†o, nh·ªØng r·∫∑ng ·ªü xa tung b·ªçt tr·∫Øng x√≥a, nh·ªØng r·∫∑ng ·ªü g·∫ßn tr√†n n∆∞·ªõc xu·ªëng nh∆∞ 1 c√°i th√°c t√≠ hon.\nƒê√¢y l√† l·∫ßn ƒë·∫ßu ti√™n m√¨nh ƒë∆∞·ª£c ƒë·∫øn m·ªôt b√£i bi·ªÉn c√≥ n∆∞·ªõc trong nh∆∞ v·∫≠y. N√≥ ƒëem l·∫°i cho m√¨nh c·∫£m x√∫c r·∫•t m√£nh li·ªát. N·∫øu ai ƒë·∫øn thƒÉm L√Ω S∆°n, ƒë·ª´ng qu√™n gh√© hang C√¢u ƒë·ªÉ nh√¨n ng·∫Øm v·∫ª k·ª≥ vƒ© v√† hoang s∆° c·ªßa n∆°i ƒë√¢y. Nh∆∞ng nh√¨n ng·∫Øm, ch·ª•p h√¨nh th√¥i th√¨ ch∆∞a ƒë·ªß. B·∫°n ph·∫£i th·ª≠ c·∫£m gi√°c t·∫Øm ·ªü m·ªôt b√£i bi·ªÉn n∆∞·ªõc trong v·∫Øt nh∆∞ th·∫ø n√†y th√¨ m·ªõi ƒë√∫ng v·ªõi ch·ªØ \u0026ldquo;tuy·ªát\u0026rdquo;. Sau khi ƒÉn u·ªëng, c·∫£ b·ªçn k√©o xu·ªëng t·∫Øm. M·∫•y ƒë·ª©a b·∫°n c·ªßa Ph·ª•ng r·∫•t vui. D√π c√≥ ch√∫t ng·∫°i, nh∆∞ng v·ªõi s·ª± nhi·ªát t√¨nh ·∫•y c·ªßa m·∫•y b√©, m√¨nh c≈©ng b·∫Øt ƒë·∫ßu qu·∫≠y v√† qu·∫≠y. L√¥i ƒë·ª©a n√†y l√™ xu·ªëng bi·ªÉn, nh·∫•n ƒë·ª©a kia xu·ªëng n∆∞·ªõc, khi√™ng ng∆∞·ªùi, lƒÉn b·ªôt\u0026hellip; tr√≤ n√†o vui l√† ch∆°i.\n\u0026hellip;\nT·∫Øm xong, m·ªçi ng∆∞·ªùi leo l√™n n√∫i Th·ªõi L·ªõi mang theo bi·∫øt bao nhi√™u ƒë·∫•t c√°t, mu·ªëi v√† n∆∞·ªõc trong ng∆∞·ªùi. Ph√≠a tr√™n n√∫i nh√¨n xu·ªëng, ta c√≥ th·ªÉ th·∫•y to√†n c√†nh x√£ An H·∫£i. L√Ω S∆°n th·∫≠t nh·ªè b√© v·ªõi m√†u xanh lam c·ªßa bi·ªÉn, m√†u xanh l·ª•c c·ªßa nh·ªØng c√°nh ƒë·ªìng t·ªèi, m√†u v√†ng c·ªßa n·∫Øng, m√†u tr·∫Øng c·ªßa c√°t, ƒë√°. Th·∫ø m√† l·∫°i ch·ª©a bao ƒëi·ªÅu th√∫ v·ªã\u0026hellip;\nƒê·ªãa ƒëi·ªÉm ti·∫øp theo: ch√πa ƒê·ª•c v√† ho√†ng h√¥n tr√™n c·ªïng T√≤ V√≤\n","href":"/misc/ly-son-tap-2/","title":"[L√Ω S∆°n v1] T·∫≠p 2: Hang C√¢u v√† b·ªØa ti·ªác sinh nh·∫≠t"},{"content":"[B√†i vi·∫øt ƒë∆∞·ª£c d·∫´n t·ª´ facebook c√° nh√¢n, vi·∫øt v√†o ƒë·∫ßu th√°ng 2\u0026frasl;2014]\n\u0026hellip;\n√Çm Linh T·ª± c√°ch c·∫£ng L√Ω S∆°n kh√¥ng xa, kho·∫£ng ch·ª´ng 100m. Ban ƒë·∫ßu ƒëo√†n kh√¥ng ƒë·ªãnh s·∫Ω gh√© thƒÉm √Çm Linh T·ª±, nh∆∞ng khi ƒëi ngang qua th·∫•y ki·∫øn tr√∫c t·ª± h∆°i l·∫°i n√™n v√†o xem th·ª≠. ·∫§n t∆∞·ª£ng ƒë·∫ßu ti√™n khi b∆∞·ªõc v√†o √Çm Linh T·ª±: c√°i n√†y kh√¥ng gi·ªëng ch√πa ·ªü Nghƒ©a H√†nh, hay b·∫•t c·ª© 1 c√°i ch√πa n√†o m√¨nh t·ª´ng th·∫•y. N√≥ gi·ªëng nh∆∞ 1 c√°i ƒë√¨nh th·ªù ·ªü mi·ªÅn B·∫Øc h∆°n. V√† s·ª± th·∫≠t, n√≥ kh√¥ng ph·∫£i l√† ch√πa. Ng∆∞·ªùi ta g·ªçi ƒë√¢y l√† \u0026ldquo;lƒÉng\u0026rdquo;.\nLƒÉng kh√°c v·ªõi ch√πa. LƒÉng ƒë∆∞·ª£c ng∆∞·ªùi d√¢n trong l√†ng x√£ d·ª±ng l√™n v√† ƒë∆∞·ª£c qu·∫£n b·ªüi 1 t·ªôc h·ªç\u0026hellip; N·∫øu ·ªü ch√πa ng∆∞·ªùi ta th·ªù c√°c ph·∫≠t th√¨ ·ªü lƒÉng ng∆∞·ªùi ta th·ªù c√°c v·ªã th·∫ßn, m·ªói v·ªã th·∫ßn ƒë∆∞·ª£c ƒë·∫°i di·ªán b·ªüi 1 con v·∫≠t. N·∫øu nh∆∞ ·ªü ch√πa ng∆∞·ªùi ta ƒÉn chay, th√¨ ·ªü lƒÉng ng∆∞·ªùi ta ƒÉn m·∫∑n, c√∫ng m·∫∑n\u0026hellip; ·ªû √Çm Linh T·ª±, ng∆∞·ªùi ta th·ªù th·∫ßn R√πa. ·ªû ƒë√¢y c≈©ng l√† x∆∞·ªüng thuy·ªÅn Quy, ch·ªãu tr√°ch nhi·ªám cho thuy·ªÅn ƒëua trong h·ªôi ƒëua thuy·ªÅn t·ª© linh (Long L√¢n Quy Ph·ª•ng) t·ª´ m√πng 4 ƒë·∫øn m√πng 8 t·∫øt. Do ƒë√≥, ·ªü ƒë√¢y ng∆∞·ªùi ta c√∫ng nhi·ªÅu l·∫Øm, m·ªôt ng√†y c√∫ng c≈©ng ph·∫£i m·∫•y l·∫ßn\u0026hellip;\n\u0026hellip;\nC·∫£ ng√†y ƒëi m·ªát nho√†i, ƒëo√†n gh√© v√†o ƒÉn kem ·ªü qu√°n c·ªßa nh√† ƒë·ª©a b·∫°n\u0026hellip; Ti·∫øng tr·ªëng n·ªïi l√™n. V√†i ng∆∞·ªùi d√¢n b∆∞·ªõc v√†o xem. Ng∆∞·ªùi ta ƒëang c√∫ng cho ng√†y mai thuy·ªÅn Quy s·∫Ω th·∫Øng tr·∫≠n. ƒê√¢y l√† l·∫ßn ƒë·∫ßu ti√™n m√¨nh th·∫•y ng∆∞·ªùi ta c√∫ng lƒÉng. N√≥ kh√¥ng gi·ªëng nh∆∞ c√∫ng ·ªü nh√†, c√∫ng ·ªü ch√πa. N√≥ gi·ªëng nh∆∞ c√∫ng t·∫ø. Nh√¨n c√°ch ng∆∞·ªùi ta v·∫≠n √°o d√†i, c√°ch ng∆∞·ªùi ta ƒë·ªçc kh·∫•n t·∫ø, nh·ªØng ti·∫øng k√®n-tr·ªëng-ph√°ch; ·∫Øt h·∫≥n ai c≈©ng nh·∫≠n ra ƒë∆∞·ª£c s·ª± trang nghi√™m c·ªßa vi·ªác c√∫ng t·∫ø. T·ª´ ƒë√≥, m√¨nh nh·∫≠n ra m·ªôt ƒëi·ªÅu: vi·ªác th·ªù c√∫ng ·ªü L√Ω S∆°n r·∫•t quan tr·ªçng. N√≥ g·∫Øn li·ªÅn v·ªõi t√≠nh ch·∫•t lao ƒë·ªông ·ªü ƒë√¢y; r·∫±ng ng∆∞·ªùi d√¢n ph·∫£i th∆∞·ªùng xuy√™n ƒëi bi·ªÉn, ƒë·ªëi ƒë·∫ßu v·ªõi bi·∫øt bao nhi√™u hi·ªÉm nguy v√† c·∫ßn nh·ªØng ƒë·∫•ng c√≥ s·ª©c m·∫°nh to l·ªõn ch·ªü che. V√† n·∫øu ai c√≥ ƒëi·ªÅu ki·ªán ra thƒÉm L√Ω S∆°n, c√≥ l·∫Ω b·∫°n c≈©ng s·∫Ω t·ª± ƒë·∫∑t ra c√¢u h·ªèi: \u0026ldquo;sao ·ªü ƒë√¢y nhi·ªÅu lƒÉng, ƒë√¨nh qu√° v·∫≠y\u0026rdquo;.\n\u0026hellip;\nCh√†, ƒëang l√† m√πng 7 nh∆∞ng ·ªü ƒë√¢y ch∆∞a m·∫•t ƒëi kh√¥ng kh√≠ t·∫øt. Ti·∫øng tr·ªëng c√∫ng lƒÉng vang l√™n khi·∫øn cho m√¨nh nh∆∞ quay tr·ªü v·ªÅ 3 ng√†y t·∫øt!\np/s: √Çm Linh c√≥ nghƒ©a l√† √¢m h·ªìn, linh h·ªìn ng∆∞·ªùi ch·∫øt.\n","href":"/misc/ly-son-tap-1/","title":"[L√Ω S∆°n v1] T·∫≠p 1: √Çm Linh T·ª±"},{"content":"[B√†i vi·∫øt ƒë∆∞·ª£c d·∫´n t·ª´ facebook c√° nh√¢n, vi·∫øt v√†o ƒë·∫ßu th√°ng 2\u0026frasl;2014]\n\u0026hellip;\nXu·∫•t ph√°t t·ª´ C·∫£ng Sa K·ª≥, ƒëo√†n c·ªßa m√¨nh g·ªìm c√≥ 2 ng∆∞·ªùi l√†: m√¨nh v√† ch√≠nh m√¨nh. M√¨nh g·∫∑p 3 thanh ni√™n ƒëi du l·ªãch v·ªõi nh·ªØng d·ª•ng c·ª• ƒë·ªì ngh·ªÅ nh√¨n r·∫•t chuy√™n nghi·ªáp. ƒê∆∞·ª£c bi·∫øt h·ªç ƒë·∫øn t·ª´ H√† N·ªôi v√† ƒëi L√Ω S∆°n l·∫ßn ƒë·∫ßu ti√™n sau chuy·∫øn ƒëi ·ªü Hu·∫ø. M√¨nh r·∫•t vui v√† h√°o h·ª©c, v√¨ n∆°i ƒë√¢y ƒë∆∞·ª£c nhi·ªÅu ng∆∞·ªùi bi·∫øt ƒë·∫øn v√† ng∆∞·ªùi ta c·ª© kh√°o nhau r·∫±ng \u0026ldquo;L√Ω S∆°n ƒë·∫πp l·∫Øm\u0026rdquo;\u0026hellip;\nT√¥i leo l√™n boong t√†u. Boong t√†u ƒë√¥ng k√≠n ng∆∞·ªùi. ƒê·ªëi v·ªõi nh·ªØng ng∆∞·ªùi m·ªõi ƒëi ra ƒë·∫£o l·∫ßn ƒë·∫ßu, ƒë·ª©ng tr√™n boong t√†u h√≥ng gi√≥ l√† 1 c·∫£m gi√°c th√∫ v·ªã nh·∫•t ƒë·ªãnh ph·∫£i th·ª≠. ƒê·ªëi v·ªõi ng∆∞·ªùi d√¢n ƒë·∫£o ƒëi v·ªÅ, ng∆∞·ªùi ta ƒë·ª©ng ch·ªù ƒë·ªÉ ph√°t hi·ªán ra khi n√†o h√≤n ƒë·∫£o l·ªô d·∫ßn ·ªü ph√≠a ch√¢n tr·ªùi. V·ªã m·∫∑n c·ªßa n∆∞·ªõc bi·ªÉn, v·ªã m√°t c·ªßa gi√≥ ph·∫£ v√†o m·∫∑t kh√° m√£nh li·ªát\u0026hellip; Nh·ªØng ti·∫øng reo h√∫ ·ªü boong t√†u khoang d∆∞·ªõi c·ªßa m·∫•y b·∫°n n·ªØ vang l√™n khi m≈©i t√†u ch·∫∑t s√≥ng d·ªôi n∆∞·ªõc vƒÉng tr·∫Øng x√≥a, nh·ªØng ti·∫øng c∆∞·ªùi ƒë√πa c·ªßa nh√≥m thanh ni√™n ƒë·ªôi n√≥n tai b√®o, ti·∫øng ƒë·ªông c∆° ch·∫°y, ti·∫øng s√≥ng n∆∞·ª°c vƒÉng\u0026hellip; khi·∫øn cho ƒëo√†n t√†u vui nh·ªôn h·∫≥n l√™n. Ch·∫≥ng m·∫•y ch·ªëc m√† 1 ti·∫øng ƒë·ªìng h·ªì tr√¥i qua nhanh h·∫Øt.\nT√†u c·∫≠p c·∫£ng. C√≥ m·ªôt ƒëi·ªÅu khi·∫øn m√¨nh ph·∫£i b·∫•t ng·ªù: c·∫£ng ·ªü ƒë√¢y n∆∞·ªõc trong qu√°. M√πi bi·ªÉn, m√πi th·ªßy h·∫£i s·∫£n x·ªôc v√†o m≈©i n·ªìng n·∫∑c\u0026hellip; M√¨nh ƒë√£ ƒë·∫øn L√Ω S∆°n!\n","href":"/misc/ly-son-tap-0/","title":"[L√Ω S∆°n v1] T·∫≠p 0: T√†u cao t·ªëc An Vƒ©nh"},{"content":"","href":"/page/","title":"Pages"},{"content":"","href":"/search/","title":"Search"}]
